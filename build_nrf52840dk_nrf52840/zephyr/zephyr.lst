
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001420 	.word	0x20001420
}
   4:	0000286d 	.word	0x0000286d
   8:	000078a3 	.word	0x000078a3
   c:	00002859 	.word	0x00002859
  10:	00002859 	.word	0x00002859
  14:	00002859 	.word	0x00002859
  18:	00002859 	.word	0x00002859
	...
  2c:	00002675 	.word	0x00002675
  30:	00002859 	.word	0x00002859
  34:	00000000 	.word	0x00000000
  38:	00002621 	.word	0x00002621
  3c:	00002859 	.word	0x00002859

00000040 <_irq_vector_table>:
  40:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  50:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  60:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  70:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  80:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  90:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  a0:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  b0:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  c0:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  d0:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  e0:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..
  f0:	000025d9 000025d9 000025d9 000025d9     .%...%...%...%..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_IDLE_STACK_SIZE+0x1ba>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_IDLE_STACK_SIZE+0x1a6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_IDLE_STACK_SIZE+0xf0>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_IDLE_STACK_SIZE+0x20c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_IDLE_STACK_SIZE+0x13a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_IDLE_STACK_SIZE+0x136>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_IDLE_STACK_SIZE+0x150>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_IDLE_STACK_SIZE+0x19e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_IDLE_STACK_SIZE+0x186>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_IDLE_STACK_SIZE+0x21a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_IDLE_STACK_SIZE+0x1de>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_IDLE_STACK_SIZE+0x1fc>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_uldivmod>:
     9fc:	b953      	cbnz	r3, a14 <__aeabi_uldivmod+0x18>
     9fe:	b94a      	cbnz	r2, a14 <__aeabi_uldivmod+0x18>
     a00:	2900      	cmp	r1, #0
     a02:	bf08      	it	eq
     a04:	2800      	cmpeq	r0, #0
     a06:	bf1c      	itt	ne
     a08:	f04f 31ff 	movne.w	r1, #4294967295
     a0c:	f04f 30ff 	movne.w	r0, #4294967295
     a10:	f000 b96c 	b.w	cec <__aeabi_idiv0>
     a14:	f1ad 0c08 	sub.w	ip, sp, #8
     a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a1c:	f000 f806 	bl	a2c <__udivmoddi4>
     a20:	f8dd e004 	ldr.w	lr, [sp, #4]
     a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a28:	b004      	add	sp, #16
     a2a:	4770      	bx	lr

00000a2c <__udivmoddi4>:
     a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a30:	9e08      	ldr	r6, [sp, #32]
     a32:	460d      	mov	r5, r1
     a34:	4604      	mov	r4, r0
     a36:	468e      	mov	lr, r1
     a38:	2b00      	cmp	r3, #0
     a3a:	f040 8082 	bne.w	b42 <__udivmoddi4+0x116>
     a3e:	428a      	cmp	r2, r1
     a40:	4617      	mov	r7, r2
     a42:	d946      	bls.n	ad2 <__udivmoddi4+0xa6>
     a44:	fab2 f282 	clz	r2, r2
     a48:	b14a      	cbz	r2, a5e <__udivmoddi4+0x32>
     a4a:	f1c2 0120 	rsb	r1, r2, #32
     a4e:	fa05 f302 	lsl.w	r3, r5, r2
     a52:	fa20 f101 	lsr.w	r1, r0, r1
     a56:	4097      	lsls	r7, r2
     a58:	ea41 0e03 	orr.w	lr, r1, r3
     a5c:	4094      	lsls	r4, r2
     a5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     a62:	0c23      	lsrs	r3, r4, #16
     a64:	fbbe fcf8 	udiv	ip, lr, r8
     a68:	b2b9      	uxth	r1, r7
     a6a:	fb08 ee1c 	mls	lr, r8, ip, lr
     a6e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     a72:	fb0c f001 	mul.w	r0, ip, r1
     a76:	4298      	cmp	r0, r3
     a78:	d90a      	bls.n	a90 <__udivmoddi4+0x64>
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	f10c 35ff 	add.w	r5, ip, #4294967295
     a80:	f080 8116 	bcs.w	cb0 <__udivmoddi4+0x284>
     a84:	4298      	cmp	r0, r3
     a86:	f240 8113 	bls.w	cb0 <__udivmoddi4+0x284>
     a8a:	f1ac 0c02 	sub.w	ip, ip, #2
     a8e:	443b      	add	r3, r7
     a90:	1a1b      	subs	r3, r3, r0
     a92:	b2a4      	uxth	r4, r4
     a94:	fbb3 f0f8 	udiv	r0, r3, r8
     a98:	fb08 3310 	mls	r3, r8, r0, r3
     a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     aa0:	fb00 f101 	mul.w	r1, r0, r1
     aa4:	42a1      	cmp	r1, r4
     aa6:	d909      	bls.n	abc <__udivmoddi4+0x90>
     aa8:	193c      	adds	r4, r7, r4
     aaa:	f100 33ff 	add.w	r3, r0, #4294967295
     aae:	f080 8101 	bcs.w	cb4 <__udivmoddi4+0x288>
     ab2:	42a1      	cmp	r1, r4
     ab4:	f240 80fe 	bls.w	cb4 <__udivmoddi4+0x288>
     ab8:	3802      	subs	r0, #2
     aba:	443c      	add	r4, r7
     abc:	1a64      	subs	r4, r4, r1
     abe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     ac2:	2100      	movs	r1, #0
     ac4:	b11e      	cbz	r6, ace <__udivmoddi4+0xa2>
     ac6:	40d4      	lsrs	r4, r2
     ac8:	2300      	movs	r3, #0
     aca:	e9c6 4300 	strd	r4, r3, [r6]
     ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ad2:	b902      	cbnz	r2, ad6 <__udivmoddi4+0xaa>
     ad4:	deff      	udf	#255	; 0xff
     ad6:	fab2 f282 	clz	r2, r2
     ada:	2a00      	cmp	r2, #0
     adc:	d14f      	bne.n	b7e <__udivmoddi4+0x152>
     ade:	1bcb      	subs	r3, r1, r7
     ae0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ae4:	fa1f f887 	uxth.w	r8, r7
     ae8:	2101      	movs	r1, #1
     aea:	fbb3 fcfe 	udiv	ip, r3, lr
     aee:	0c25      	lsrs	r5, r4, #16
     af0:	fb0e 331c 	mls	r3, lr, ip, r3
     af4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     af8:	fb08 f30c 	mul.w	r3, r8, ip
     afc:	42ab      	cmp	r3, r5
     afe:	d907      	bls.n	b10 <__udivmoddi4+0xe4>
     b00:	197d      	adds	r5, r7, r5
     b02:	f10c 30ff 	add.w	r0, ip, #4294967295
     b06:	d202      	bcs.n	b0e <__udivmoddi4+0xe2>
     b08:	42ab      	cmp	r3, r5
     b0a:	f200 80e7 	bhi.w	cdc <__udivmoddi4+0x2b0>
     b0e:	4684      	mov	ip, r0
     b10:	1aed      	subs	r5, r5, r3
     b12:	b2a3      	uxth	r3, r4
     b14:	fbb5 f0fe 	udiv	r0, r5, lr
     b18:	fb0e 5510 	mls	r5, lr, r0, r5
     b1c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     b20:	fb08 f800 	mul.w	r8, r8, r0
     b24:	45a0      	cmp	r8, r4
     b26:	d907      	bls.n	b38 <__udivmoddi4+0x10c>
     b28:	193c      	adds	r4, r7, r4
     b2a:	f100 33ff 	add.w	r3, r0, #4294967295
     b2e:	d202      	bcs.n	b36 <__udivmoddi4+0x10a>
     b30:	45a0      	cmp	r8, r4
     b32:	f200 80d7 	bhi.w	ce4 <__udivmoddi4+0x2b8>
     b36:	4618      	mov	r0, r3
     b38:	eba4 0408 	sub.w	r4, r4, r8
     b3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b40:	e7c0      	b.n	ac4 <__udivmoddi4+0x98>
     b42:	428b      	cmp	r3, r1
     b44:	d908      	bls.n	b58 <__udivmoddi4+0x12c>
     b46:	2e00      	cmp	r6, #0
     b48:	f000 80af 	beq.w	caa <__udivmoddi4+0x27e>
     b4c:	2100      	movs	r1, #0
     b4e:	e9c6 0500 	strd	r0, r5, [r6]
     b52:	4608      	mov	r0, r1
     b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b58:	fab3 f183 	clz	r1, r3
     b5c:	2900      	cmp	r1, #0
     b5e:	d14b      	bne.n	bf8 <__udivmoddi4+0x1cc>
     b60:	42ab      	cmp	r3, r5
     b62:	d302      	bcc.n	b6a <__udivmoddi4+0x13e>
     b64:	4282      	cmp	r2, r0
     b66:	f200 80b7 	bhi.w	cd8 <__udivmoddi4+0x2ac>
     b6a:	1a84      	subs	r4, r0, r2
     b6c:	eb65 0303 	sbc.w	r3, r5, r3
     b70:	2001      	movs	r0, #1
     b72:	469e      	mov	lr, r3
     b74:	2e00      	cmp	r6, #0
     b76:	d0aa      	beq.n	ace <__udivmoddi4+0xa2>
     b78:	e9c6 4e00 	strd	r4, lr, [r6]
     b7c:	e7a7      	b.n	ace <__udivmoddi4+0xa2>
     b7e:	f1c2 0c20 	rsb	ip, r2, #32
     b82:	fa01 f302 	lsl.w	r3, r1, r2
     b86:	4097      	lsls	r7, r2
     b88:	fa20 f00c 	lsr.w	r0, r0, ip
     b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b90:	fa21 fc0c 	lsr.w	ip, r1, ip
     b94:	4318      	orrs	r0, r3
     b96:	fbbc f1fe 	udiv	r1, ip, lr
     b9a:	0c05      	lsrs	r5, r0, #16
     b9c:	fb0e cc11 	mls	ip, lr, r1, ip
     ba0:	fa1f f887 	uxth.w	r8, r7
     ba4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     ba8:	fb01 f308 	mul.w	r3, r1, r8
     bac:	42ab      	cmp	r3, r5
     bae:	fa04 f402 	lsl.w	r4, r4, r2
     bb2:	d909      	bls.n	bc8 <__udivmoddi4+0x19c>
     bb4:	197d      	adds	r5, r7, r5
     bb6:	f101 3cff 	add.w	ip, r1, #4294967295
     bba:	f080 808b 	bcs.w	cd4 <__udivmoddi4+0x2a8>
     bbe:	42ab      	cmp	r3, r5
     bc0:	f240 8088 	bls.w	cd4 <__udivmoddi4+0x2a8>
     bc4:	3902      	subs	r1, #2
     bc6:	443d      	add	r5, r7
     bc8:	1aeb      	subs	r3, r5, r3
     bca:	b285      	uxth	r5, r0
     bcc:	fbb3 f0fe 	udiv	r0, r3, lr
     bd0:	fb0e 3310 	mls	r3, lr, r0, r3
     bd4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     bd8:	fb00 f308 	mul.w	r3, r0, r8
     bdc:	42ab      	cmp	r3, r5
     bde:	d907      	bls.n	bf0 <__udivmoddi4+0x1c4>
     be0:	197d      	adds	r5, r7, r5
     be2:	f100 3cff 	add.w	ip, r0, #4294967295
     be6:	d271      	bcs.n	ccc <__udivmoddi4+0x2a0>
     be8:	42ab      	cmp	r3, r5
     bea:	d96f      	bls.n	ccc <__udivmoddi4+0x2a0>
     bec:	3802      	subs	r0, #2
     bee:	443d      	add	r5, r7
     bf0:	1aeb      	subs	r3, r5, r3
     bf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     bf6:	e778      	b.n	aea <__udivmoddi4+0xbe>
     bf8:	f1c1 0c20 	rsb	ip, r1, #32
     bfc:	408b      	lsls	r3, r1
     bfe:	fa22 f70c 	lsr.w	r7, r2, ip
     c02:	431f      	orrs	r7, r3
     c04:	fa20 f40c 	lsr.w	r4, r0, ip
     c08:	fa05 f301 	lsl.w	r3, r5, r1
     c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     c10:	fa25 f50c 	lsr.w	r5, r5, ip
     c14:	431c      	orrs	r4, r3
     c16:	0c23      	lsrs	r3, r4, #16
     c18:	fbb5 f9fe 	udiv	r9, r5, lr
     c1c:	fa1f f887 	uxth.w	r8, r7
     c20:	fb0e 5519 	mls	r5, lr, r9, r5
     c24:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     c28:	fb09 fa08 	mul.w	sl, r9, r8
     c2c:	45aa      	cmp	sl, r5
     c2e:	fa02 f201 	lsl.w	r2, r2, r1
     c32:	fa00 f301 	lsl.w	r3, r0, r1
     c36:	d908      	bls.n	c4a <__udivmoddi4+0x21e>
     c38:	197d      	adds	r5, r7, r5
     c3a:	f109 30ff 	add.w	r0, r9, #4294967295
     c3e:	d247      	bcs.n	cd0 <__udivmoddi4+0x2a4>
     c40:	45aa      	cmp	sl, r5
     c42:	d945      	bls.n	cd0 <__udivmoddi4+0x2a4>
     c44:	f1a9 0902 	sub.w	r9, r9, #2
     c48:	443d      	add	r5, r7
     c4a:	eba5 050a 	sub.w	r5, r5, sl
     c4e:	b2a4      	uxth	r4, r4
     c50:	fbb5 f0fe 	udiv	r0, r5, lr
     c54:	fb0e 5510 	mls	r5, lr, r0, r5
     c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     c5c:	fb00 f808 	mul.w	r8, r0, r8
     c60:	45a0      	cmp	r8, r4
     c62:	d907      	bls.n	c74 <__udivmoddi4+0x248>
     c64:	193c      	adds	r4, r7, r4
     c66:	f100 35ff 	add.w	r5, r0, #4294967295
     c6a:	d22d      	bcs.n	cc8 <__udivmoddi4+0x29c>
     c6c:	45a0      	cmp	r8, r4
     c6e:	d92b      	bls.n	cc8 <__udivmoddi4+0x29c>
     c70:	3802      	subs	r0, #2
     c72:	443c      	add	r4, r7
     c74:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     c78:	eba4 0408 	sub.w	r4, r4, r8
     c7c:	fba0 8902 	umull	r8, r9, r0, r2
     c80:	454c      	cmp	r4, r9
     c82:	46c6      	mov	lr, r8
     c84:	464d      	mov	r5, r9
     c86:	d319      	bcc.n	cbc <__udivmoddi4+0x290>
     c88:	d016      	beq.n	cb8 <__udivmoddi4+0x28c>
     c8a:	b15e      	cbz	r6, ca4 <__udivmoddi4+0x278>
     c8c:	ebb3 020e 	subs.w	r2, r3, lr
     c90:	eb64 0405 	sbc.w	r4, r4, r5
     c94:	fa04 fc0c 	lsl.w	ip, r4, ip
     c98:	40ca      	lsrs	r2, r1
     c9a:	ea4c 0202 	orr.w	r2, ip, r2
     c9e:	40cc      	lsrs	r4, r1
     ca0:	e9c6 2400 	strd	r2, r4, [r6]
     ca4:	2100      	movs	r1, #0
     ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     caa:	4631      	mov	r1, r6
     cac:	4630      	mov	r0, r6
     cae:	e70e      	b.n	ace <__udivmoddi4+0xa2>
     cb0:	46ac      	mov	ip, r5
     cb2:	e6ed      	b.n	a90 <__udivmoddi4+0x64>
     cb4:	4618      	mov	r0, r3
     cb6:	e701      	b.n	abc <__udivmoddi4+0x90>
     cb8:	4543      	cmp	r3, r8
     cba:	d2e6      	bcs.n	c8a <__udivmoddi4+0x25e>
     cbc:	ebb8 0e02 	subs.w	lr, r8, r2
     cc0:	eb69 0507 	sbc.w	r5, r9, r7
     cc4:	3801      	subs	r0, #1
     cc6:	e7e0      	b.n	c8a <__udivmoddi4+0x25e>
     cc8:	4628      	mov	r0, r5
     cca:	e7d3      	b.n	c74 <__udivmoddi4+0x248>
     ccc:	4660      	mov	r0, ip
     cce:	e78f      	b.n	bf0 <__udivmoddi4+0x1c4>
     cd0:	4681      	mov	r9, r0
     cd2:	e7ba      	b.n	c4a <__udivmoddi4+0x21e>
     cd4:	4661      	mov	r1, ip
     cd6:	e777      	b.n	bc8 <__udivmoddi4+0x19c>
     cd8:	4608      	mov	r0, r1
     cda:	e74b      	b.n	b74 <__udivmoddi4+0x148>
     cdc:	f1ac 0c02 	sub.w	ip, ip, #2
     ce0:	443d      	add	r5, r7
     ce2:	e715      	b.n	b10 <__udivmoddi4+0xe4>
     ce4:	3802      	subs	r0, #2
     ce6:	443c      	add	r4, r7
     ce8:	e726      	b.n	b38 <__udivmoddi4+0x10c>
     cea:	bf00      	nop

00000cec <__aeabi_idiv0>:
     cec:	4770      	bx	lr
     cee:	bf00      	nop

00000cf0 <main>:
#include "config_macros.h"
#include "config_gpio.h"
#include "func_extras.h"

void main(void) 
{ 
     cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cf4:	b08f      	sub	sp, #60	; 0x3c
  get_bind();
     cf6:	f000 fa31 	bl	115c <get_bind>
  int state = S0;		
  double Vtotal = 0;

  char produto1[] = "Beer: 1.5 EUR";
     cfa:	4bb5      	ldr	r3, [pc, #724]	; (fd0 <main+0x2e0>)
     cfc:	466a      	mov	r2, sp
     cfe:	f103 0508 	add.w	r5, r3, #8
     d02:	6818      	ldr	r0, [r3, #0]
     d04:	6859      	ldr	r1, [r3, #4]
     d06:	4614      	mov	r4, r2
     d08:	c403      	stmia	r4!, {r0, r1}
     d0a:	3308      	adds	r3, #8
     d0c:	42ab      	cmp	r3, r5
     d0e:	4622      	mov	r2, r4
     d10:	d1f7      	bne.n	d02 <main+0x12>
     d12:	6818      	ldr	r0, [r3, #0]
     d14:	889b      	ldrh	r3, [r3, #4]
     d16:	80a3      	strh	r3, [r4, #4]
  char produto2[] = "Tuna Sandwich: 1.0 EUR";
     d18:	4bae      	ldr	r3, [pc, #696]	; (fd4 <main+0x2e4>)
  char produto1[] = "Beer: 1.5 EUR";
     d1a:	6020      	str	r0, [r4, #0]
  char produto2[] = "Tuna Sandwich: 1.0 EUR";
     d1c:	aa08      	add	r2, sp, #32
     d1e:	f103 0510 	add.w	r5, r3, #16
     d22:	6818      	ldr	r0, [r3, #0]
     d24:	6859      	ldr	r1, [r3, #4]
     d26:	4614      	mov	r4, r2
     d28:	c403      	stmia	r4!, {r0, r1}
     d2a:	3308      	adds	r3, #8
     d2c:	42ab      	cmp	r3, r5
     d2e:	4622      	mov	r2, r4
     d30:	d1f7      	bne.n	d22 <main+0x32>
     d32:	6818      	ldr	r0, [r3, #0]
     d34:	8899      	ldrh	r1, [r3, #4]
     d36:	799b      	ldrb	r3, [r3, #6]
     d38:	71a3      	strb	r3, [r4, #6]
  char produto3[] = "Coffee: 0.5 EUR";
     d3a:	4ba7      	ldr	r3, [pc, #668]	; (fd8 <main+0x2e8>)
  char produto2[] = "Tuna Sandwich: 1.0 EUR";
     d3c:	6020      	str	r0, [r4, #0]
     d3e:	80a1      	strh	r1, [r4, #4]
  char produto3[] = "Coffee: 0.5 EUR";
     d40:	aa04      	add	r2, sp, #16
     d42:	f103 0510 	add.w	r5, r3, #16
     d46:	6818      	ldr	r0, [r3, #0]
     d48:	6859      	ldr	r1, [r3, #4]
     d4a:	4614      	mov	r4, r2
     d4c:	c403      	stmia	r4!, {r0, r1}
     d4e:	3308      	adds	r3, #8
     d50:	42ab      	cmp	r3, r5
     d52:	4622      	mov	r2, r4
     d54:	d1f7      	bne.n	d46 <main+0x56>
            }
          }

          if(selProduct == 2)
          {
            if( vp2 > Vtotal)
     d56:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
            }
          }

          if(selProduct == 3)
          {
            if( vp3 > Vtotal)
     d5a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
  int selProduct = 1;
     d5e:	2601      	movs	r6, #1
  double Vtotal = 0;
     d60:	2400      	movs	r4, #0
     d62:	2500      	movs	r5, #0
  int state = S0;		
     d64:	2700      	movs	r7, #0
            if( vp2 > Vtotal)
     d66:	f04f 0a00 	mov.w	sl, #0
            if( vp3 > Vtotal)
     d6a:	f04f 0800 	mov.w	r8, #0
    k_msleep(100);                
     d6e:	2064      	movs	r0, #100	; 0x64
     d70:	3f01      	subs	r7, #1
     d72:	f006 fc89 	bl	7688 <k_msleep>
    switch(state)
     d76:	2f03      	cmp	r7, #3
     d78:	d803      	bhi.n	d82 <main+0x92>
     d7a:	e8df f007 	tbb	[pc, r7]
     d7e:	6c41      	.short	0x6c41
     d80:	bba8      	.short	0xbba8
        if (dcToggleFlag1==1 || dcToggleFlag2==1 || dcToggleFlag3==1 || dcToggleFlag4==1)
     d82:	4b96      	ldr	r3, [pc, #600]	; (fdc <main+0x2ec>)
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	2b01      	cmp	r3, #1
     d88:	d030      	beq.n	dec <main+0xfc>
     d8a:	4b95      	ldr	r3, [pc, #596]	; (fe0 <main+0x2f0>)
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	2b01      	cmp	r3, #1
     d90:	d02c      	beq.n	dec <main+0xfc>
     d92:	4b94      	ldr	r3, [pc, #592]	; (fe4 <main+0x2f4>)
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	2b01      	cmp	r3, #1
     d98:	d028      	beq.n	dec <main+0xfc>
     d9a:	4b93      	ldr	r3, [pc, #588]	; (fe8 <main+0x2f8>)
     d9c:	681b      	ldr	r3, [r3, #0]
     d9e:	2b01      	cmp	r3, #1
     da0:	bf0c      	ite	eq
     da2:	2302      	moveq	r3, #2
     da4:	2300      	movne	r3, #0
        if (dcToggleFlag5==1 || dcToggleFlag6==1)
     da6:	4a91      	ldr	r2, [pc, #580]	; (fec <main+0x2fc>)
     da8:	6817      	ldr	r7, [r2, #0]
     daa:	2f01      	cmp	r7, #1
     dac:	d004      	beq.n	db8 <main+0xc8>
     dae:	4a90      	ldr	r2, [pc, #576]	; (ff0 <main+0x300>)
     db0:	6817      	ldr	r7, [r2, #0]
     db2:	2f01      	cmp	r7, #1
     db4:	bf18      	it	ne
     db6:	461f      	movne	r7, r3
        if (dcToggleFlag7==1)
     db8:	4b8e      	ldr	r3, [pc, #568]	; (ff4 <main+0x304>)
     dba:	681b      	ldr	r3, [r3, #0]
          state = S3;
     dbc:	2b01      	cmp	r3, #1
        if (dcToggleFlag8==1)
     dbe:	4b8e      	ldr	r3, [pc, #568]	; (ff8 <main+0x308>)
     dc0:	681b      	ldr	r3, [r3, #0]
          state = S3;
     dc2:	bf08      	it	eq
     dc4:	2703      	moveq	r7, #3
          state = S4; 
     dc6:	2b01      	cmp	r3, #1
     dc8:	bf08      	it	eq
     dca:	2704      	moveq	r7, #4
        if(selProduct == 1)
     dcc:	2e01      	cmp	r6, #1
     dce:	d10f      	bne.n	df0 <main+0x100>
                printk("\n%s", produto1);
     dd0:	4669      	mov	r1, sp
                printk("\n%s", produto3);
     dd2:	488a      	ldr	r0, [pc, #552]	; (ffc <main+0x30c>)
     dd4:	f006 fd3f 	bl	7856 <printk>
        int_parts = split_credit(Vtotal);
     dd8:	4629      	mov	r1, r5
     dda:	4620      	mov	r0, r4
     ddc:	f000 fade 	bl	139c <split_credit>
        printk("		Credit: %d.%d EUR\n", int_parts[0], int_parts[1]);
     de0:	e9d0 1200 	ldrd	r1, r2, [r0]
     de4:	4886      	ldr	r0, [pc, #536]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     de6:	f006 fd36 	bl	7856 <printk>
        break;
     dea:	e7c0      	b.n	d6e <main+0x7e>
          state = S2;
     dec:	2302      	movs	r3, #2
     dee:	e7da      	b.n	da6 <main+0xb6>
        if(selProduct == 2)
     df0:	2e02      	cmp	r6, #2
     df2:	d003      	beq.n	dfc <main+0x10c>
        if(selProduct == 3)
     df4:	2e03      	cmp	r6, #3
     df6:	d1ef      	bne.n	dd8 <main+0xe8>
                printk("\n%s", produto3);
     df8:	a904      	add	r1, sp, #16
     dfa:	e7ea      	b.n	dd2 <main+0xe2>
                printk("\n%s", produto2);
     dfc:	a908      	add	r1, sp, #32
     dfe:	e7e8      	b.n	dd2 <main+0xe2>
        if(dcToggleFlag6==1 && selProduct == 1)
     e00:	4a7b      	ldr	r2, [pc, #492]	; (ff0 <main+0x300>)
     e02:	6813      	ldr	r3, [r2, #0]
     e04:	2b01      	cmp	r3, #1
     e06:	4b79      	ldr	r3, [pc, #484]	; (fec <main+0x2fc>)
     e08:	d101      	bne.n	e0e <main+0x11e>
     e0a:	2e01      	cmp	r6, #1
     e0c:	d01d      	beq.n	e4a <main+0x15a>
        else if(dcToggleFlag6==1 && selProduct == 2)
     e0e:	6811      	ldr	r1, [r2, #0]
     e10:	2901      	cmp	r1, #1
     e12:	d101      	bne.n	e18 <main+0x128>
     e14:	2e02      	cmp	r6, #2
     e16:	d01a      	beq.n	e4e <main+0x15e>
        else if(dcToggleFlag6==1 && selProduct == 3)
     e18:	6811      	ldr	r1, [r2, #0]
     e1a:	2901      	cmp	r1, #1
     e1c:	d101      	bne.n	e22 <main+0x132>
     e1e:	2e03      	cmp	r6, #3
     e20:	d017      	beq.n	e52 <main+0x162>
        else if(dcToggleFlag5==1 && selProduct == 1)
     e22:	6819      	ldr	r1, [r3, #0]
     e24:	2901      	cmp	r1, #1
     e26:	d101      	bne.n	e2c <main+0x13c>
     e28:	2e01      	cmp	r6, #1
     e2a:	d010      	beq.n	e4e <main+0x15e>
        else if(dcToggleFlag5==1 && selProduct == 2)
     e2c:	6819      	ldr	r1, [r3, #0]
     e2e:	2901      	cmp	r1, #1
     e30:	d101      	bne.n	e36 <main+0x146>
     e32:	2e02      	cmp	r6, #2
     e34:	d00d      	beq.n	e52 <main+0x162>
        else if(dcToggleFlag5==1 && selProduct == 3)
     e36:	6819      	ldr	r1, [r3, #0]
     e38:	2901      	cmp	r1, #1
     e3a:	d102      	bne.n	e42 <main+0x152>
                selProduct = 2;
     e3c:	2e03      	cmp	r6, #3
     e3e:	bf08      	it	eq
     e40:	2602      	moveq	r6, #2
        dcToggleFlag6=0;
     e42:	2700      	movs	r7, #0
     e44:	6017      	str	r7, [r2, #0]
              printk("Product Coffee dispensed, remaining credit is %d.%d EUR\n", int_parts[0], int_parts[1]);
              k_msleep(2000);
            }
          }
           
          dcToggleFlag8=0;  
     e46:	601f      	str	r7, [r3, #0]
          state = S0;
          break;
     e48:	e791      	b.n	d6e <main+0x7e>
                selProduct = 2;
     e4a:	2602      	movs	r6, #2
     e4c:	e7f9      	b.n	e42 <main+0x152>
                selProduct = 3;
     e4e:	2603      	movs	r6, #3
     e50:	e7f7      	b.n	e42 <main+0x152>
                selProduct = 1;
     e52:	460e      	mov	r6, r1
     e54:	e7f5      	b.n	e42 <main+0x152>
        if(dcToggleFlag1==1)
     e56:	4f61      	ldr	r7, [pc, #388]	; (fdc <main+0x2ec>)
     e58:	683b      	ldr	r3, [r7, #0]
     e5a:	2b01      	cmp	r3, #1
     e5c:	d10a      	bne.n	e74 <main+0x184>
          Vtotal += 0.1;
     e5e:	a358      	add	r3, pc, #352	; (adr r3, fc0 <main+0x2d0>)
     e60:	e9d3 2300 	ldrd	r2, r3, [r3]
     e64:	4620      	mov	r0, r4
     e66:	4629      	mov	r1, r5
     e68:	f7ff f950 	bl	10c <__adddf3>
          dcToggleFlag1=0;
     e6c:	2300      	movs	r3, #0
          Vtotal += 0.1;
     e6e:	4604      	mov	r4, r0
     e70:	460d      	mov	r5, r1
          dcToggleFlag1=0;
     e72:	603b      	str	r3, [r7, #0]
        if(dcToggleFlag2==1)
     e74:	4f5a      	ldr	r7, [pc, #360]	; (fe0 <main+0x2f0>)
     e76:	683b      	ldr	r3, [r7, #0]
     e78:	2b01      	cmp	r3, #1
     e7a:	d10a      	bne.n	e92 <main+0x1a2>
          Vtotal += 0.2;
     e7c:	a352      	add	r3, pc, #328	; (adr r3, fc8 <main+0x2d8>)
     e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
     e82:	4620      	mov	r0, r4
     e84:	4629      	mov	r1, r5
     e86:	f7ff f941 	bl	10c <__adddf3>
          dcToggleFlag2=0;
     e8a:	2300      	movs	r3, #0
          Vtotal += 0.2;
     e8c:	4604      	mov	r4, r0
     e8e:	460d      	mov	r5, r1
          dcToggleFlag2=0;
     e90:	603b      	str	r3, [r7, #0]
        if(dcToggleFlag3==1)
     e92:	4f54      	ldr	r7, [pc, #336]	; (fe4 <main+0x2f4>)
     e94:	683b      	ldr	r3, [r7, #0]
     e96:	2b01      	cmp	r3, #1
     e98:	d109      	bne.n	eae <main+0x1be>
          Vtotal += 0.5;
     e9a:	464b      	mov	r3, r9
     e9c:	4620      	mov	r0, r4
     e9e:	4629      	mov	r1, r5
     ea0:	4642      	mov	r2, r8
     ea2:	f7ff f933 	bl	10c <__adddf3>
          dcToggleFlag3=0;
     ea6:	2300      	movs	r3, #0
          Vtotal += 0.5;
     ea8:	4604      	mov	r4, r0
     eaa:	460d      	mov	r5, r1
          dcToggleFlag3=0;
     eac:	603b      	str	r3, [r7, #0]
        if(dcToggleFlag4==1)
     eae:	4f4e      	ldr	r7, [pc, #312]	; (fe8 <main+0x2f8>)
     eb0:	683b      	ldr	r3, [r7, #0]
     eb2:	2b01      	cmp	r3, #1
     eb4:	d109      	bne.n	eca <main+0x1da>
          Vtotal += 1;
     eb6:	465b      	mov	r3, fp
     eb8:	4620      	mov	r0, r4
     eba:	4629      	mov	r1, r5
     ebc:	4652      	mov	r2, sl
     ebe:	f7ff f925 	bl	10c <__adddf3>
          dcToggleFlag4=0;
     ec2:	2300      	movs	r3, #0
          Vtotal += 1;
     ec4:	4604      	mov	r4, r0
     ec6:	460d      	mov	r5, r1
          dcToggleFlag4=0;
     ec8:	603b      	str	r3, [r7, #0]
        state = S0;
     eca:	2700      	movs	r7, #0
     ecc:	e74f      	b.n	d6e <main+0x7e>
          int_parts = split_credit(Vtotal);
     ece:	4629      	mov	r1, r5
     ed0:	4620      	mov	r0, r4
     ed2:	f000 fa63 	bl	139c <split_credit>
          printk("\n%d.%d EUR return\n", int_parts[0], int_parts[1]);
     ed6:	e9d0 1200 	ldrd	r1, r2, [r0]
     eda:	484a      	ldr	r0, [pc, #296]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     edc:	f006 fcbb 	bl	7856 <printk>
          k_msleep(2000);
     ee0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     ee4:	f006 fbd0 	bl	7688 <k_msleep>
          dcToggleFlag7=0;
     ee8:	4b42      	ldr	r3, [pc, #264]	; (ff4 <main+0x304>)
     eea:	2700      	movs	r7, #0
     eec:	601f      	str	r7, [r3, #0]
          Vtotal = 0;
     eee:	2400      	movs	r4, #0
     ef0:	2500      	movs	r5, #0
          break;
     ef2:	e73c      	b.n	d6e <main+0x7e>
          if(selProduct == 1)
     ef4:	2e01      	cmp	r6, #1
     ef6:	d122      	bne.n	f3e <main+0x24e>
            if( vp1 > Vtotal)
     ef8:	4b43      	ldr	r3, [pc, #268]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     efa:	2200      	movs	r2, #0
     efc:	4620      	mov	r0, r4
     efe:	4629      	mov	r1, r5
     f00:	f7ff fd2c 	bl	95c <__aeabi_dcmplt>
     f04:	b168      	cbz	r0, f22 <main+0x232>
              int_parts = split_credit(Vtotal);
     f06:	4629      	mov	r1, r5
     f08:	4620      	mov	r0, r4
     f0a:	f000 fa47 	bl	139c <split_credit>
              printk("Not enough credit, Product Beer cost 1.5 EUR, credit is %d.%d EUR\n", int_parts[0], int_parts[1]);
     f0e:	e9d0 1200 	ldrd	r1, r2, [r0]
     f12:	483e      	ldr	r0, [pc, #248]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
              printk("Product Coffee dispensed, remaining credit is %d.%d EUR\n", int_parts[0], int_parts[1]);
     f14:	f006 fc9f 	bl	7856 <printk>
              k_msleep(2000);
     f18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     f1c:	f006 fbb4 	bl	7688 <k_msleep>
     f20:	e011      	b.n	f46 <main+0x256>
              Vtotal = Vtotal - vp1;
     f22:	2200      	movs	r2, #0
     f24:	4b38      	ldr	r3, [pc, #224]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     f26:	4620      	mov	r0, r4
     f28:	4629      	mov	r1, r5
     f2a:	f7ff f8ed 	bl	108 <__aeabi_dsub>
     f2e:	460d      	mov	r5, r1
     f30:	4604      	mov	r4, r0
              int_parts = split_credit(Vtotal);
     f32:	f000 fa33 	bl	139c <split_credit>
              printk("Product Beer dispensed, remaining credit is %d.%d EUR\n", int_parts[0], int_parts[1]);
     f36:	e9d0 1200 	ldrd	r1, r2, [r0]
     f3a:	4835      	ldr	r0, [pc, #212]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     f3c:	e7ea      	b.n	f14 <main+0x224>
          if(selProduct == 2)
     f3e:	2e02      	cmp	r6, #2
     f40:	d004      	beq.n	f4c <main+0x25c>
          if(selProduct == 3)
     f42:	2e03      	cmp	r6, #3
     f44:	d01f      	beq.n	f86 <main+0x296>
          dcToggleFlag8=0;  
     f46:	4b2c      	ldr	r3, [pc, #176]	; (ff8 <main+0x308>)
     f48:	2700      	movs	r7, #0
     f4a:	e77c      	b.n	e46 <main+0x156>
            if( vp2 > Vtotal)
     f4c:	4652      	mov	r2, sl
     f4e:	465b      	mov	r3, fp
     f50:	4620      	mov	r0, r4
     f52:	4629      	mov	r1, r5
     f54:	f7ff fd02 	bl	95c <__aeabi_dcmplt>
     f58:	b138      	cbz	r0, f6a <main+0x27a>
              int_parts = split_credit(Vtotal);
     f5a:	4629      	mov	r1, r5
     f5c:	4620      	mov	r0, r4
     f5e:	f000 fa1d 	bl	139c <split_credit>
              printk("Not enough credit, Product Tuna Sandwich cost 1.0 EUR, credit is %d.%d EUR\n", int_parts[0], int_parts[1]);
     f62:	e9d0 1200 	ldrd	r1, r2, [r0]
     f66:	482b      	ldr	r0, [pc, #172]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     f68:	e7d4      	b.n	f14 <main+0x224>
              Vtotal = Vtotal - vp2;
     f6a:	4652      	mov	r2, sl
     f6c:	465b      	mov	r3, fp
     f6e:	4620      	mov	r0, r4
     f70:	4629      	mov	r1, r5
     f72:	f7ff f8c9 	bl	108 <__aeabi_dsub>
     f76:	460d      	mov	r5, r1
     f78:	4604      	mov	r4, r0
              int_parts = split_credit(Vtotal);
     f7a:	f000 fa0f 	bl	139c <split_credit>
              printk("Product Tuna Sandwich dispensed, remaining credit is %d.%d EUR\n", int_parts[0], int_parts[1]);
     f7e:	e9d0 1200 	ldrd	r1, r2, [r0]
     f82:	4825      	ldr	r0, [pc, #148]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     f84:	e7c6      	b.n	f14 <main+0x224>
            if( vp3 > Vtotal)
     f86:	4642      	mov	r2, r8
     f88:	464b      	mov	r3, r9
     f8a:	4620      	mov	r0, r4
     f8c:	4629      	mov	r1, r5
     f8e:	f7ff fce5 	bl	95c <__aeabi_dcmplt>
     f92:	b138      	cbz	r0, fa4 <main+0x2b4>
             int_parts = split_credit(Vtotal);
     f94:	4629      	mov	r1, r5
     f96:	4620      	mov	r0, r4
     f98:	f000 fa00 	bl	139c <split_credit>
             printk("Not enough credit, Product Coffee cost 0.5 EUR, credit is %d.%d EUR\n", int_parts[0], int_parts[1]);
     f9c:	e9d0 1200 	ldrd	r1, r2, [r0]
     fa0:	481e      	ldr	r0, [pc, #120]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fa2:	e7b7      	b.n	f14 <main+0x224>
              Vtotal = Vtotal - vp3;
     fa4:	4642      	mov	r2, r8
     fa6:	464b      	mov	r3, r9
     fa8:	4620      	mov	r0, r4
     faa:	4629      	mov	r1, r5
     fac:	f7ff f8ac 	bl	108 <__aeabi_dsub>
     fb0:	460d      	mov	r5, r1
     fb2:	4604      	mov	r4, r0
              int_parts = split_credit(Vtotal);
     fb4:	f000 f9f2 	bl	139c <split_credit>
              printk("Product Coffee dispensed, remaining credit is %d.%d EUR\n", int_parts[0], int_parts[1]);
     fb8:	e9d0 1200 	ldrd	r1, r2, [r0]
     fbc:	4818      	ldr	r0, [pc, #96]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     fbe:	e7a9      	b.n	f14 <main+0x224>
     fc0:	9999999a 	.word	0x9999999a
     fc4:	3fb99999 	.word	0x3fb99999
     fc8:	9999999a 	.word	0x9999999a
     fcc:	3fc99999 	.word	0x3fc99999
     fd0:	00008738 	.word	0x00008738
     fd4:	00008746 	.word	0x00008746
     fd8:	0000875d 	.word	0x0000875d
     fdc:	20000328 	.word	0x20000328
     fe0:	2000032c 	.word	0x2000032c
     fe4:	20000330 	.word	0x20000330
     fe8:	20000334 	.word	0x20000334
     fec:	20000338 	.word	0x20000338
     ff0:	2000033c 	.word	0x2000033c
     ff4:	20000340 	.word	0x20000340
     ff8:	20000344 	.word	0x20000344
     ffc:	00008588 	.word	0x00008588
    1000:	0000858c 	.word	0x0000858c
    1004:	000085a1 	.word	0x000085a1
    1008:	3ff80000 	.word	0x3ff80000
    100c:	000085b4 	.word	0x000085b4
    1010:	000085f7 	.word	0x000085f7
    1014:	0000862e 	.word	0x0000862e
    1018:	0000867a 	.word	0x0000867a
    101c:	000086ba 	.word	0x000086ba
    1020:	000086ff 	.word	0x000086ff
    1024:	3ff00000 	.word	0x3ff00000
    1028:	3fe00000 	.word	0x3fe00000

0000102c <but1press_cbfunction>:
volatile int dcToggleFlag7 = 0;
volatile int dcToggleFlag8 = 0;

void but1press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
  dcToggleFlag1 = 1;
    102c:	4b01      	ldr	r3, [pc, #4]	; (1034 <but1press_cbfunction+0x8>)
    102e:	2201      	movs	r2, #1
    1030:	601a      	str	r2, [r3, #0]
}
    1032:	4770      	bx	lr
    1034:	20000328 	.word	0x20000328

00001038 <but2press_cbfunction>:

void but2press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
  dcToggleFlag2 = 1;
    1038:	4b01      	ldr	r3, [pc, #4]	; (1040 <but2press_cbfunction+0x8>)
    103a:	2201      	movs	r2, #1
    103c:	601a      	str	r2, [r3, #0]
}
    103e:	4770      	bx	lr
    1040:	2000032c 	.word	0x2000032c

00001044 <but3press_cbfunction>:

void but3press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
  dcToggleFlag3 = 1;
    1044:	4b01      	ldr	r3, [pc, #4]	; (104c <but3press_cbfunction+0x8>)
    1046:	2201      	movs	r2, #1
    1048:	601a      	str	r2, [r3, #0]
}
    104a:	4770      	bx	lr
    104c:	20000330 	.word	0x20000330

00001050 <but4press_cbfunction>:

void but4press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
  dcToggleFlag4 = 1;
    1050:	4b01      	ldr	r3, [pc, #4]	; (1058 <but4press_cbfunction+0x8>)
    1052:	2201      	movs	r2, #1
    1054:	601a      	str	r2, [r3, #0]
}
    1056:	4770      	bx	lr
    1058:	20000334 	.word	0x20000334

0000105c <but5press_cbfunction>:


void but5press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{ 
  dcToggleFlag5 = 1;
    105c:	4b01      	ldr	r3, [pc, #4]	; (1064 <but5press_cbfunction+0x8>)
    105e:	2201      	movs	r2, #1
    1060:	601a      	str	r2, [r3, #0]
}
    1062:	4770      	bx	lr
    1064:	20000338 	.word	0x20000338

00001068 <but6press_cbfunction>:

void but6press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
  dcToggleFlag6 = 1;
    1068:	4b01      	ldr	r3, [pc, #4]	; (1070 <but6press_cbfunction+0x8>)
    106a:	2201      	movs	r2, #1
    106c:	601a      	str	r2, [r3, #0]
}
    106e:	4770      	bx	lr
    1070:	2000033c 	.word	0x2000033c

00001074 <but7press_cbfunction>:

void but7press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
  dcToggleFlag7 = 1;
    1074:	4b01      	ldr	r3, [pc, #4]	; (107c <but7press_cbfunction+0x8>)
    1076:	2201      	movs	r2, #1
    1078:	601a      	str	r2, [r3, #0]
}
    107a:	4770      	bx	lr
    107c:	20000340 	.word	0x20000340

00001080 <but8press_cbfunction>:

void but8press_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
  dcToggleFlag8 = 1;
    1080:	4b01      	ldr	r3, [pc, #4]	; (1088 <but8press_cbfunction+0x8>)
    1082:	2201      	movs	r2, #1
    1084:	601a      	str	r2, [r3, #0]
}
    1086:	4770      	bx	lr
    1088:	20000344 	.word	0x20000344

0000108c <z_impl_gpio_pin_configure.constprop.0>:
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    108c:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_configure(const struct device *port,
    108e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1092:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
    1094:	f8d0 8008 	ldr.w	r8, [r0, #8]
	struct gpio_driver_data *data =
    1098:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    109a:	2601      	movs	r6, #1
    109c:	408e      	lsls	r6, r1
    109e:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_configure(const struct device *port,
    10a0:	4604      	mov	r4, r0
    10a2:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10a4:	d10e      	bne.n	10c4 <z_impl_gpio_pin_configure.constprop.0+0x38>
    10a6:	490e      	ldr	r1, [pc, #56]	; (10e0 <z_impl_gpio_pin_configure.constprop.0+0x54>)
    10a8:	4a0e      	ldr	r2, [pc, #56]	; (10e4 <z_impl_gpio_pin_configure.constprop.0+0x58>)
    10aa:	480f      	ldr	r0, [pc, #60]	; (10e8 <z_impl_gpio_pin_configure.constprop.0+0x5c>)
    10ac:	f240 23fd 	movw	r3, #765	; 0x2fd
    10b0:	f006 fbd1 	bl	7856 <printk>
    10b4:	480d      	ldr	r0, [pc, #52]	; (10ec <z_impl_gpio_pin_configure.constprop.0+0x60>)
    10b6:	f006 fbce 	bl	7856 <printk>
    10ba:	480a      	ldr	r0, [pc, #40]	; (10e4 <z_impl_gpio_pin_configure.constprop.0+0x58>)
    10bc:	f240 21fd 	movw	r1, #765	; 0x2fd
    10c0:	f006 faf5 	bl	76ae <assert_post_action>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    10c4:	683b      	ldr	r3, [r7, #0]
    10c6:	ea23 0606 	bic.w	r6, r3, r6
    10ca:	603e      	str	r6, [r7, #0]
	}

	return api->pin_configure(port, pin, flags);
    10cc:	f8d8 3000 	ldr.w	r3, [r8]
    10d0:	4629      	mov	r1, r5
    10d2:	4620      	mov	r0, r4
    10d4:	f44f 7288 	mov.w	r2, #272	; 0x110
}
    10d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
    10dc:	4718      	bx	r3
    10de:	bf00      	nop
    10e0:	000081e6 	.word	0x000081e6
    10e4:	000081bc 	.word	0x000081bc
    10e8:	00008224 	.word	0x00008224
    10ec:	00008241 	.word	0x00008241

000010f0 <z_impl_gpio_pin_interrupt_configure.constprop.0>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10f0:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
    10f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10f6:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
    10f8:	6887      	ldr	r7, [r0, #8]
	const struct gpio_driver_data *const data =
    10fa:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    10fe:	2601      	movs	r6, #1
    1100:	408e      	lsls	r6, r1
    1102:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
    1104:	4604      	mov	r4, r0
    1106:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    1108:	d10e      	bne.n	1128 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x38>
    110a:	4910      	ldr	r1, [pc, #64]	; (114c <z_impl_gpio_pin_interrupt_configure.constprop.0+0x5c>)
    110c:	4a10      	ldr	r2, [pc, #64]	; (1150 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x60>)
    110e:	4811      	ldr	r0, [pc, #68]	; (1154 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x64>)
    1110:	f240 239d 	movw	r3, #669	; 0x29d
    1114:	f006 fb9f 	bl	7856 <printk>
    1118:	480f      	ldr	r0, [pc, #60]	; (1158 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x68>)
    111a:	f006 fb9c 	bl	7856 <printk>
    111e:	480c      	ldr	r0, [pc, #48]	; (1150 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x60>)
    1120:	f240 219d 	movw	r1, #669	; 0x29d
    1124:	f006 fac3 	bl	76ae <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    1128:	f8d8 3000 	ldr.w	r3, [r8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    112c:	421e      	tst	r6, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
    112e:	69be      	ldr	r6, [r7, #24]
    1130:	4629      	mov	r1, r5
    1132:	4620      	mov	r0, r4
    1134:	46b4      	mov	ip, r6
    1136:	bf18      	it	ne
    1138:	f44f 3300 	movne.w	r3, #131072	; 0x20000
}
    113c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    1140:	bf08      	it	eq
    1142:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    1146:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    114a:	4760      	bx	ip
    114c:	000081e6 	.word	0x000081e6
    1150:	000081bc 	.word	0x000081bc
    1154:	00008224 	.word	0x00008224
    1158:	00008241 	.word	0x00008241

0000115c <get_bind>:


void get_bind(void)
{
    115c:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    115e:	486c      	ldr	r0, [pc, #432]	; (1310 <get_bind+0x1b4>)
    1160:	f003 fe88 	bl	4e74 <z_impl_device_get_binding>
  
  const struct device *gpio0_dev;       
  int ret=0;                             
    
  gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
  if (gpio0_dev == NULL)
    1164:	4604      	mov	r4, r0
    1166:	b920      	cbnz	r0, 1172 <get_bind+0x16>
  
  gpio_init_callback(&but8_cb_data, but8press_cbfunction, BIT(BOARDBUT8));
  gpio_add_callback(gpio0_dev, &but8_cb_data);
//#################################################################################################      

    1168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error: Failed to bind to GPIO0\n\r");        
    116c:	4869      	ldr	r0, [pc, #420]	; (1314 <get_bind+0x1b8>)
    116e:	f006 bb72 	b.w	7856 <printk>
      printk("Bind to GPIO0 successfull \n\r");        
    1172:	4869      	ldr	r0, [pc, #420]	; (1318 <get_bind+0x1bc>)
    1174:	f006 fb6f 	bl	7856 <printk>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    1178:	210b      	movs	r1, #11
    117a:	4620      	mov	r0, r4
    117c:	f7ff ff86 	bl	108c <z_impl_gpio_pin_configure.constprop.0>
  if (ret < 0) {
    1180:	1e01      	subs	r1, r0, #0
    1182:	da04      	bge.n	118e <get_bind+0x32>
    printk("Error %d: Failed to configure BUT 1 \n\r", ret);
    1184:	4865      	ldr	r0, [pc, #404]	; (131c <get_bind+0x1c0>)
    1186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
    118a:	f006 bb64 	b.w	7856 <printk>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    118e:	210b      	movs	r1, #11
    1190:	4620      	mov	r0, r4
    1192:	f7ff ffad 	bl	10f0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
  if (ret != 0) {
    1196:	4601      	mov	r1, r0
    1198:	b108      	cbz	r0, 119e <get_bind+0x42>
    printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
    119a:	4861      	ldr	r0, [pc, #388]	; (1320 <get_bind+0x1c4>)
    119c:	e7f3      	b.n	1186 <get_bind+0x2a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    119e:	4961      	ldr	r1, [pc, #388]	; (1324 <get_bind+0x1c8>)
    11a0:	4b61      	ldr	r3, [pc, #388]	; (1328 <get_bind+0x1cc>)
    11a2:	604b      	str	r3, [r1, #4]
  gpio_add_callback(gpio0_dev, &but1_cb_data);
    11a4:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    11a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    11aa:	608b      	str	r3, [r1, #8]
    11ac:	f006 fa64 	bl	7678 <gpio_add_callback>
	return z_impl_gpio_pin_configure(port, pin, flags);
    11b0:	210c      	movs	r1, #12
    11b2:	4620      	mov	r0, r4
    11b4:	f7ff ff6a 	bl	108c <z_impl_gpio_pin_configure.constprop.0>
  if (ret < 0) {
    11b8:	1e01      	subs	r1, r0, #0
    11ba:	da01      	bge.n	11c0 <get_bind+0x64>
    printk("Error %d: Failed to configure BUT 2 \n\r", ret);
    11bc:	485b      	ldr	r0, [pc, #364]	; (132c <get_bind+0x1d0>)
    11be:	e7e2      	b.n	1186 <get_bind+0x2a>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    11c0:	210c      	movs	r1, #12
    11c2:	4620      	mov	r0, r4
    11c4:	f7ff ff94 	bl	10f0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
  if (ret != 0) {
    11c8:	4601      	mov	r1, r0
    11ca:	b108      	cbz	r0, 11d0 <get_bind+0x74>
    printk("Error %d: failed to configure interrupt on BUT2 pin \n\r", ret);
    11cc:	4858      	ldr	r0, [pc, #352]	; (1330 <get_bind+0x1d4>)
    11ce:	e7da      	b.n	1186 <get_bind+0x2a>
	callback->handler = handler;
    11d0:	4958      	ldr	r1, [pc, #352]	; (1334 <get_bind+0x1d8>)
    11d2:	4b59      	ldr	r3, [pc, #356]	; (1338 <get_bind+0x1dc>)
    11d4:	604b      	str	r3, [r1, #4]
  gpio_add_callback(gpio0_dev, &but2_cb_data);
    11d6:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    11d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11dc:	608b      	str	r3, [r1, #8]
    11de:	f006 fa4b 	bl	7678 <gpio_add_callback>
	return z_impl_gpio_pin_configure(port, pin, flags);
    11e2:	2118      	movs	r1, #24
    11e4:	4620      	mov	r0, r4
    11e6:	f7ff ff51 	bl	108c <z_impl_gpio_pin_configure.constprop.0>
  if (ret < 0) {
    11ea:	1e01      	subs	r1, r0, #0
    11ec:	da01      	bge.n	11f2 <get_bind+0x96>
    printk("Error %d: Failed to configure BUT 3 \n\r", ret);
    11ee:	4853      	ldr	r0, [pc, #332]	; (133c <get_bind+0x1e0>)
    11f0:	e7c9      	b.n	1186 <get_bind+0x2a>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    11f2:	2118      	movs	r1, #24
    11f4:	4620      	mov	r0, r4
    11f6:	f7ff ff7b 	bl	10f0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
  if (ret != 0) {
    11fa:	4601      	mov	r1, r0
    11fc:	b108      	cbz	r0, 1202 <get_bind+0xa6>
    printk("Error %d: failed to configure interrupt on BUT3 pin \n\r", ret);
    11fe:	4850      	ldr	r0, [pc, #320]	; (1340 <get_bind+0x1e4>)
    1200:	e7c1      	b.n	1186 <get_bind+0x2a>
	callback->handler = handler;
    1202:	4950      	ldr	r1, [pc, #320]	; (1344 <get_bind+0x1e8>)
    1204:	4b50      	ldr	r3, [pc, #320]	; (1348 <get_bind+0x1ec>)
    1206:	604b      	str	r3, [r1, #4]
  gpio_add_callback(gpio0_dev, &but3_cb_data);
    1208:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    120a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    120e:	608b      	str	r3, [r1, #8]
    1210:	f006 fa32 	bl	7678 <gpio_add_callback>
	return z_impl_gpio_pin_configure(port, pin, flags);
    1214:	2119      	movs	r1, #25
    1216:	4620      	mov	r0, r4
    1218:	f7ff ff38 	bl	108c <z_impl_gpio_pin_configure.constprop.0>
  if (ret < 0) {
    121c:	1e01      	subs	r1, r0, #0
    121e:	da01      	bge.n	1224 <get_bind+0xc8>
    printk("Error %d: Failed to configure BUT 4 \n\r", ret);
    1220:	484a      	ldr	r0, [pc, #296]	; (134c <get_bind+0x1f0>)
    1222:	e7b0      	b.n	1186 <get_bind+0x2a>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    1224:	2119      	movs	r1, #25
    1226:	4620      	mov	r0, r4
    1228:	f7ff ff62 	bl	10f0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
  if (ret != 0) {
    122c:	4601      	mov	r1, r0
    122e:	b108      	cbz	r0, 1234 <get_bind+0xd8>
    printk("Error %d: failed to configure interrupt on BUT4 pin \n\r", ret);
    1230:	4847      	ldr	r0, [pc, #284]	; (1350 <get_bind+0x1f4>)
    1232:	e7a8      	b.n	1186 <get_bind+0x2a>
	callback->handler = handler;
    1234:	4947      	ldr	r1, [pc, #284]	; (1354 <get_bind+0x1f8>)
    1236:	4b48      	ldr	r3, [pc, #288]	; (1358 <get_bind+0x1fc>)
    1238:	604b      	str	r3, [r1, #4]
  gpio_add_callback(gpio0_dev, &but4_cb_data);
    123a:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    123c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    1240:	608b      	str	r3, [r1, #8]
    1242:	f006 fa19 	bl	7678 <gpio_add_callback>
	return z_impl_gpio_pin_configure(port, pin, flags);
    1246:	2103      	movs	r1, #3
    1248:	4620      	mov	r0, r4
    124a:	f7ff ff1f 	bl	108c <z_impl_gpio_pin_configure.constprop.0>
  if (ret < 0) {
    124e:	1e01      	subs	r1, r0, #0
    1250:	da01      	bge.n	1256 <get_bind+0xfa>
    printk("Error %d: Failed to configure BUT 5 \n\r", ret);
    1252:	4842      	ldr	r0, [pc, #264]	; (135c <get_bind+0x200>)
    1254:	e797      	b.n	1186 <get_bind+0x2a>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    1256:	2103      	movs	r1, #3
    1258:	4620      	mov	r0, r4
    125a:	f7ff ff49 	bl	10f0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
  if (ret != 0) {
    125e:	4601      	mov	r1, r0
    1260:	b108      	cbz	r0, 1266 <get_bind+0x10a>
    printk("Error %d: failed to configure interrupt on BUT5 pin \n\r", ret);
    1262:	483f      	ldr	r0, [pc, #252]	; (1360 <get_bind+0x204>)
    1264:	e78f      	b.n	1186 <get_bind+0x2a>
	callback->handler = handler;
    1266:	493f      	ldr	r1, [pc, #252]	; (1364 <get_bind+0x208>)
    1268:	4b3f      	ldr	r3, [pc, #252]	; (1368 <get_bind+0x20c>)
    126a:	604b      	str	r3, [r1, #4]
  gpio_add_callback(gpio0_dev, &but5_cb_data);
    126c:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    126e:	2308      	movs	r3, #8
    1270:	608b      	str	r3, [r1, #8]
    1272:	f006 fa01 	bl	7678 <gpio_add_callback>
	return z_impl_gpio_pin_configure(port, pin, flags);
    1276:	2104      	movs	r1, #4
    1278:	4620      	mov	r0, r4
    127a:	f7ff ff07 	bl	108c <z_impl_gpio_pin_configure.constprop.0>
  if (ret < 0) {
    127e:	1e01      	subs	r1, r0, #0
    1280:	da01      	bge.n	1286 <get_bind+0x12a>
    printk("Error %d: Failed to configure BUT 6 \n\r", ret);
    1282:	483a      	ldr	r0, [pc, #232]	; (136c <get_bind+0x210>)
    1284:	e77f      	b.n	1186 <get_bind+0x2a>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    1286:	2104      	movs	r1, #4
    1288:	4620      	mov	r0, r4
    128a:	f7ff ff31 	bl	10f0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
  if (ret != 0) {
    128e:	4601      	mov	r1, r0
    1290:	b108      	cbz	r0, 1296 <get_bind+0x13a>
    printk("Error %d: failed to configure interrupt on BUT6 pin \n\r", ret);
    1292:	4837      	ldr	r0, [pc, #220]	; (1370 <get_bind+0x214>)
    1294:	e777      	b.n	1186 <get_bind+0x2a>
	callback->handler = handler;
    1296:	4937      	ldr	r1, [pc, #220]	; (1374 <get_bind+0x218>)
    1298:	4b37      	ldr	r3, [pc, #220]	; (1378 <get_bind+0x21c>)
    129a:	604b      	str	r3, [r1, #4]
  gpio_add_callback(gpio0_dev, &but6_cb_data);
    129c:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    129e:	2310      	movs	r3, #16
    12a0:	608b      	str	r3, [r1, #8]
    12a2:	f006 f9e9 	bl	7678 <gpio_add_callback>
	return z_impl_gpio_pin_configure(port, pin, flags);
    12a6:	211c      	movs	r1, #28
    12a8:	4620      	mov	r0, r4
    12aa:	f7ff feef 	bl	108c <z_impl_gpio_pin_configure.constprop.0>
  if (ret < 0) {
    12ae:	1e01      	subs	r1, r0, #0
    12b0:	da01      	bge.n	12b6 <get_bind+0x15a>
    printk("Error %d: Failed to configure BUT 7 \n\r", ret);
    12b2:	4832      	ldr	r0, [pc, #200]	; (137c <get_bind+0x220>)
    12b4:	e767      	b.n	1186 <get_bind+0x2a>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    12b6:	211c      	movs	r1, #28
    12b8:	4620      	mov	r0, r4
    12ba:	f7ff ff19 	bl	10f0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
  if (ret != 0) {
    12be:	4601      	mov	r1, r0
    12c0:	b108      	cbz	r0, 12c6 <get_bind+0x16a>
    printk("Error %d: failed to configure interrupt on BUT7 pin \n\r", ret);
    12c2:	482f      	ldr	r0, [pc, #188]	; (1380 <get_bind+0x224>)
    12c4:	e75f      	b.n	1186 <get_bind+0x2a>
	callback->handler = handler;
    12c6:	492f      	ldr	r1, [pc, #188]	; (1384 <get_bind+0x228>)
    12c8:	4b2f      	ldr	r3, [pc, #188]	; (1388 <get_bind+0x22c>)
    12ca:	604b      	str	r3, [r1, #4]
  gpio_add_callback(gpio0_dev, &but7_cb_data);
    12cc:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    12ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    12d2:	608b      	str	r3, [r1, #8]
    12d4:	f006 f9d0 	bl	7678 <gpio_add_callback>
	return z_impl_gpio_pin_configure(port, pin, flags);
    12d8:	211d      	movs	r1, #29
    12da:	4620      	mov	r0, r4
    12dc:	f7ff fed6 	bl	108c <z_impl_gpio_pin_configure.constprop.0>
  if (ret < 0) {
    12e0:	1e01      	subs	r1, r0, #0
    12e2:	da01      	bge.n	12e8 <get_bind+0x18c>
    printk("Error %d: Failed to configure BUT 8 \n\r", ret);
    12e4:	4829      	ldr	r0, [pc, #164]	; (138c <get_bind+0x230>)
    12e6:	e74e      	b.n	1186 <get_bind+0x2a>
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    12e8:	211d      	movs	r1, #29
    12ea:	4620      	mov	r0, r4
    12ec:	f7ff ff00 	bl	10f0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
  if (ret != 0) {
    12f0:	4601      	mov	r1, r0
    12f2:	b108      	cbz	r0, 12f8 <get_bind+0x19c>
    printk("Error %d: failed to configure interrupt on BUT8 pin \n\r", ret);
    12f4:	4826      	ldr	r0, [pc, #152]	; (1390 <get_bind+0x234>)
    12f6:	e746      	b.n	1186 <get_bind+0x2a>
	callback->handler = handler;
    12f8:	4926      	ldr	r1, [pc, #152]	; (1394 <get_bind+0x238>)
    12fa:	4b27      	ldr	r3, [pc, #156]	; (1398 <get_bind+0x23c>)
    12fc:	604b      	str	r3, [r1, #4]
  gpio_add_callback(gpio0_dev, &but8_cb_data);
    12fe:	4620      	mov	r0, r4
	callback->pin_mask = pin_mask;
    1300:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    1304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1308:	608b      	str	r3, [r1, #8]
  gpio_add_callback(gpio0_dev, &but8_cb_data);
    130a:	f006 b9b5 	b.w	7678 <gpio_add_callback>
    130e:	bf00      	nop
    1310:	00008253 	.word	0x00008253
    1314:	0000825a 	.word	0x0000825a
    1318:	0000827b 	.word	0x0000827b
    131c:	00008298 	.word	0x00008298
    1320:	000082bf 	.word	0x000082bf
    1324:	200002c8 	.word	0x200002c8
    1328:	0000102d 	.word	0x0000102d
    132c:	000082f6 	.word	0x000082f6
    1330:	0000831d 	.word	0x0000831d
    1334:	200002d4 	.word	0x200002d4
    1338:	00001039 	.word	0x00001039
    133c:	00008354 	.word	0x00008354
    1340:	0000837b 	.word	0x0000837b
    1344:	200002e0 	.word	0x200002e0
    1348:	00001045 	.word	0x00001045
    134c:	000083b2 	.word	0x000083b2
    1350:	000083d9 	.word	0x000083d9
    1354:	200002ec 	.word	0x200002ec
    1358:	00001051 	.word	0x00001051
    135c:	00008410 	.word	0x00008410
    1360:	00008437 	.word	0x00008437
    1364:	200002f8 	.word	0x200002f8
    1368:	0000105d 	.word	0x0000105d
    136c:	0000846e 	.word	0x0000846e
    1370:	00008495 	.word	0x00008495
    1374:	20000304 	.word	0x20000304
    1378:	00001069 	.word	0x00001069
    137c:	000084cc 	.word	0x000084cc
    1380:	000084f3 	.word	0x000084f3
    1384:	20000310 	.word	0x20000310
    1388:	00001075 	.word	0x00001075
    138c:	0000852a 	.word	0x0000852a
    1390:	00008551 	.word	0x00008551
    1394:	2000031c 	.word	0x2000031c
    1398:	00001081 	.word	0x00001081

0000139c <split_credit>:
#include "func_extras.h"

int *split_credit(double credit)
{
    139c:	b5d0      	push	{r4, r6, r7, lr}
    139e:	460f      	mov	r7, r1
    13a0:	4606      	mov	r6, r0
  static int array[2];
  int intpart = 0;
  int decpart = 0;  

  intpart = (int) credit;
    13a2:	f7ff fb03 	bl	9ac <__aeabi_d2iz>
  decpart = (credit - intpart) * 10;

  array[0] = intpart;
    13a6:	4c09      	ldr	r4, [pc, #36]	; (13cc <split_credit+0x30>)
    13a8:	6020      	str	r0, [r4, #0]
  decpart = (credit - intpart) * 10;
    13aa:	f7fe fffb 	bl	3a4 <__aeabi_i2d>
    13ae:	4602      	mov	r2, r0
    13b0:	460b      	mov	r3, r1
    13b2:	4630      	mov	r0, r6
    13b4:	4639      	mov	r1, r7
    13b6:	f7fe fea7 	bl	108 <__aeabi_dsub>
    13ba:	4b05      	ldr	r3, [pc, #20]	; (13d0 <split_credit+0x34>)
    13bc:	2200      	movs	r2, #0
    13be:	f7ff f85b 	bl	478 <__aeabi_dmul>
    13c2:	f7ff faf3 	bl	9ac <__aeabi_d2iz>
    13c6:	6060      	str	r0, [r4, #4]
  array[1] = decpart;

  return array;
    13c8:	4620      	mov	r0, r4
    13ca:	bdd0      	pop	{r4, r6, r7, pc}
    13cc:	20000348 	.word	0x20000348
    13d0:	40240000 	.word	0x40240000

000013d4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    13d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13d8:	b091      	sub	sp, #68	; 0x44
    13da:	468b      	mov	fp, r1
    13dc:	9002      	str	r0, [sp, #8]
    13de:	4692      	mov	sl, r2
    13e0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    13e2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    13e4:	f89a 0000 	ldrb.w	r0, [sl]
    13e8:	b908      	cbnz	r0, 13ee <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    13ea:	4628      	mov	r0, r5
    13ec:	e35e      	b.n	1aac <cbvprintf+0x6d8>
		if (*fp != '%') {
    13ee:	2825      	cmp	r0, #37	; 0x25
    13f0:	f10a 0701 	add.w	r7, sl, #1
    13f4:	d007      	beq.n	1406 <cbvprintf+0x32>
			OUTC('%');
    13f6:	9b02      	ldr	r3, [sp, #8]
    13f8:	4659      	mov	r1, fp
    13fa:	4798      	blx	r3
    13fc:	2800      	cmp	r0, #0
    13fe:	f2c0 8355 	blt.w	1aac <cbvprintf+0x6d8>
    1402:	3501      	adds	r5, #1
			break;
    1404:	e210      	b.n	1828 <cbvprintf+0x454>
		} state = {
    1406:	2218      	movs	r2, #24
    1408:	2100      	movs	r1, #0
    140a:	a80a      	add	r0, sp, #40	; 0x28
    140c:	f006 fa84 	bl	7918 <memset>
	if (*sp == '%') {
    1410:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1414:	2b25      	cmp	r3, #37	; 0x25
    1416:	d078      	beq.n	150a <cbvprintf+0x136>
    1418:	2200      	movs	r2, #0
    141a:	4694      	mov	ip, r2
    141c:	4616      	mov	r6, r2
    141e:	4696      	mov	lr, r2
    1420:	4610      	mov	r0, r2
    1422:	4639      	mov	r1, r7
		switch (*sp) {
    1424:	f817 3b01 	ldrb.w	r3, [r7], #1
    1428:	2b2b      	cmp	r3, #43	; 0x2b
    142a:	f000 809d 	beq.w	1568 <cbvprintf+0x194>
    142e:	f200 8094 	bhi.w	155a <cbvprintf+0x186>
    1432:	2b20      	cmp	r3, #32
    1434:	f000 809b 	beq.w	156e <cbvprintf+0x19a>
    1438:	2b23      	cmp	r3, #35	; 0x23
    143a:	f000 809a 	beq.w	1572 <cbvprintf+0x19e>
    143e:	b128      	cbz	r0, 144c <cbvprintf+0x78>
    1440:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1444:	f040 0004 	orr.w	r0, r0, #4
    1448:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    144c:	f1be 0f00 	cmp.w	lr, #0
    1450:	d005      	beq.n	145e <cbvprintf+0x8a>
    1452:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1456:	f040 0008 	orr.w	r0, r0, #8
    145a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    145e:	b12e      	cbz	r6, 146c <cbvprintf+0x98>
    1460:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1464:	f040 0010 	orr.w	r0, r0, #16
    1468:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    146c:	f1bc 0f00 	cmp.w	ip, #0
    1470:	d005      	beq.n	147e <cbvprintf+0xaa>
    1472:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1476:	f040 0020 	orr.w	r0, r0, #32
    147a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    147e:	b12a      	cbz	r2, 148c <cbvprintf+0xb8>
    1480:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1488:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    148c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1490:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1494:	2844      	cmp	r0, #68	; 0x44
    1496:	d103      	bne.n	14a0 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1498:	f36f 1286 	bfc	r2, #6, #1
    149c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    14a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    14a4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    14a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    14aa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    14ae:	d17b      	bne.n	15a8 <cbvprintf+0x1d4>
		conv->width_star = true;
    14b0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    14b4:	f042 0201 	orr.w	r2, r2, #1
    14b8:	1c4b      	adds	r3, r1, #1
    14ba:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    14be:	781a      	ldrb	r2, [r3, #0]
    14c0:	2a2e      	cmp	r2, #46	; 0x2e
    14c2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    14c6:	bf0c      	ite	eq
    14c8:	2101      	moveq	r1, #1
    14ca:	2100      	movne	r1, #0
    14cc:	f361 0241 	bfi	r2, r1, #1, #1
    14d0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    14d4:	d174      	bne.n	15c0 <cbvprintf+0x1ec>
	if (*sp == '*') {
    14d6:	785a      	ldrb	r2, [r3, #1]
    14d8:	2a2a      	cmp	r2, #42	; 0x2a
    14da:	d06a      	beq.n	15b2 <cbvprintf+0x1de>
    14dc:	3301      	adds	r3, #1
	size_t val = 0;
    14de:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    14e0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    14e2:	4618      	mov	r0, r3
    14e4:	f810 2b01 	ldrb.w	r2, [r0], #1
    14e8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    14ec:	2f09      	cmp	r7, #9
    14ee:	f240 808e 	bls.w	160e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    14f2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    14f6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    14f8:	f3c2 0040 	ubfx	r0, r2, #1, #1
    14fc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1500:	f361 0241 	bfi	r2, r1, #1, #1
    1504:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1508:	e05a      	b.n	15c0 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    150a:	f10a 0702 	add.w	r7, sl, #2
    150e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1512:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1516:	07d9      	lsls	r1, r3, #31
    1518:	f140 8149 	bpl.w	17ae <cbvprintf+0x3da>
			width = va_arg(ap, int);
    151c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1520:	f1b9 0f00 	cmp.w	r9, #0
    1524:	da07      	bge.n	1536 <cbvprintf+0x162>
				conv->flag_dash = true;
    1526:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    152a:	f042 0204 	orr.w	r2, r2, #4
    152e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1532:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1536:	075a      	lsls	r2, r3, #29
    1538:	f140 8142 	bpl.w	17c0 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    153c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1540:	f1b8 0f00 	cmp.w	r8, #0
    1544:	f280 8141 	bge.w	17ca <cbvprintf+0x3f6>
				conv->prec_present = false;
    1548:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    154c:	f36f 0341 	bfc	r3, #1, #1
    1550:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1554:	f04f 38ff 	mov.w	r8, #4294967295
    1558:	e137      	b.n	17ca <cbvprintf+0x3f6>
		switch (*sp) {
    155a:	2b2d      	cmp	r3, #45	; 0x2d
    155c:	d00c      	beq.n	1578 <cbvprintf+0x1a4>
    155e:	2b30      	cmp	r3, #48	; 0x30
    1560:	f47f af6d 	bne.w	143e <cbvprintf+0x6a>
			conv->flag_zero = true;
    1564:	2201      	movs	r2, #1
	} while (loop);
    1566:	e75c      	b.n	1422 <cbvprintf+0x4e>
			conv->flag_plus = true;
    1568:	f04f 0e01 	mov.w	lr, #1
    156c:	e759      	b.n	1422 <cbvprintf+0x4e>
			conv->flag_space = true;
    156e:	2601      	movs	r6, #1
    1570:	e757      	b.n	1422 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1572:	f04f 0c01 	mov.w	ip, #1
    1576:	e754      	b.n	1422 <cbvprintf+0x4e>
		switch (*sp) {
    1578:	2001      	movs	r0, #1
    157a:	e752      	b.n	1422 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    157c:	fb0c 0202 	mla	r2, ip, r2, r0
    1580:	3a30      	subs	r2, #48	; 0x30
    1582:	4633      	mov	r3, r6
    1584:	461e      	mov	r6, r3
    1586:	f816 0b01 	ldrb.w	r0, [r6], #1
    158a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    158e:	2f09      	cmp	r7, #9
    1590:	d9f4      	bls.n	157c <cbvprintf+0x1a8>
	if (sp != wp) {
    1592:	4299      	cmp	r1, r3
    1594:	d093      	beq.n	14be <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1596:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    159a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    159c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    159e:	f362 0141 	bfi	r1, r2, #1, #1
    15a2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    15a6:	e78a      	b.n	14be <cbvprintf+0xea>
    15a8:	460b      	mov	r3, r1
	size_t val = 0;
    15aa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    15ac:	f04f 0c0a 	mov.w	ip, #10
    15b0:	e7e8      	b.n	1584 <cbvprintf+0x1b0>
		conv->prec_star = true;
    15b2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    15b6:	f042 0204 	orr.w	r2, r2, #4
    15ba:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    15be:	3302      	adds	r3, #2
	switch (*sp) {
    15c0:	461f      	mov	r7, r3
    15c2:	f817 2b01 	ldrb.w	r2, [r7], #1
    15c6:	2a6c      	cmp	r2, #108	; 0x6c
    15c8:	d041      	beq.n	164e <cbvprintf+0x27a>
    15ca:	d825      	bhi.n	1618 <cbvprintf+0x244>
    15cc:	2a68      	cmp	r2, #104	; 0x68
    15ce:	d02b      	beq.n	1628 <cbvprintf+0x254>
    15d0:	2a6a      	cmp	r2, #106	; 0x6a
    15d2:	d046      	beq.n	1662 <cbvprintf+0x28e>
    15d4:	2a4c      	cmp	r2, #76	; 0x4c
    15d6:	d04c      	beq.n	1672 <cbvprintf+0x29e>
    15d8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    15da:	f817 2b01 	ldrb.w	r2, [r7], #1
    15de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    15e2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    15e6:	2a78      	cmp	r2, #120	; 0x78
    15e8:	f200 80d9 	bhi.w	179e <cbvprintf+0x3ca>
    15ec:	2a57      	cmp	r2, #87	; 0x57
    15ee:	d84d      	bhi.n	168c <cbvprintf+0x2b8>
    15f0:	2a41      	cmp	r2, #65	; 0x41
    15f2:	d003      	beq.n	15fc <cbvprintf+0x228>
    15f4:	3a45      	subs	r2, #69	; 0x45
    15f6:	2a02      	cmp	r2, #2
    15f8:	f200 80d1 	bhi.w	179e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    15fc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1600:	2204      	movs	r2, #4
    1602:	f362 0302 	bfi	r3, r2, #0, #3
    1606:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    160a:	2301      	movs	r3, #1
			break;
    160c:	e09e      	b.n	174c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    160e:	fb06 2101 	mla	r1, r6, r1, r2
    1612:	3930      	subs	r1, #48	; 0x30
    1614:	4603      	mov	r3, r0
    1616:	e764      	b.n	14e2 <cbvprintf+0x10e>
	switch (*sp) {
    1618:	2a74      	cmp	r2, #116	; 0x74
    161a:	d026      	beq.n	166a <cbvprintf+0x296>
    161c:	2a7a      	cmp	r2, #122	; 0x7a
    161e:	d1db      	bne.n	15d8 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1620:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1624:	2206      	movs	r2, #6
    1626:	e00d      	b.n	1644 <cbvprintf+0x270>
		if (*++sp == 'h') {
    1628:	785a      	ldrb	r2, [r3, #1]
    162a:	2a68      	cmp	r2, #104	; 0x68
    162c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1630:	d106      	bne.n	1640 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1632:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1634:	f361 02c6 	bfi	r2, r1, #3, #4
    1638:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    163c:	1c9f      	adds	r7, r3, #2
    163e:	e7cc      	b.n	15da <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1640:	4613      	mov	r3, r2
    1642:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1644:	f362 03c6 	bfi	r3, r2, #3, #4
    1648:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    164c:	e7c5      	b.n	15da <cbvprintf+0x206>
		if (*++sp == 'l') {
    164e:	785a      	ldrb	r2, [r3, #1]
    1650:	2a6c      	cmp	r2, #108	; 0x6c
    1652:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1656:	d101      	bne.n	165c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1658:	2104      	movs	r1, #4
    165a:	e7eb      	b.n	1634 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    165c:	4613      	mov	r3, r2
    165e:	2203      	movs	r2, #3
    1660:	e7f0      	b.n	1644 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1662:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1666:	2205      	movs	r2, #5
    1668:	e7ec      	b.n	1644 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    166a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    166e:	2207      	movs	r2, #7
    1670:	e7e8      	b.n	1644 <cbvprintf+0x270>
		conv->unsupported = true;
    1672:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1676:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    167a:	f023 0302 	bic.w	r3, r3, #2
    167e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1682:	f043 0302 	orr.w	r3, r3, #2
    1686:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    168a:	e7a6      	b.n	15da <cbvprintf+0x206>
    168c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1690:	2920      	cmp	r1, #32
    1692:	f200 8084 	bhi.w	179e <cbvprintf+0x3ca>
    1696:	a001      	add	r0, pc, #4	; (adr r0, 169c <cbvprintf+0x2c8>)
    1698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    169c:	00001761 	.word	0x00001761
    16a0:	0000179f 	.word	0x0000179f
    16a4:	0000179f 	.word	0x0000179f
    16a8:	0000179f 	.word	0x0000179f
    16ac:	0000179f 	.word	0x0000179f
    16b0:	0000179f 	.word	0x0000179f
    16b4:	0000179f 	.word	0x0000179f
    16b8:	0000179f 	.word	0x0000179f
    16bc:	0000179f 	.word	0x0000179f
    16c0:	000015fd 	.word	0x000015fd
    16c4:	0000179f 	.word	0x0000179f
    16c8:	00001761 	.word	0x00001761
    16cc:	00001721 	.word	0x00001721
    16d0:	000015fd 	.word	0x000015fd
    16d4:	000015fd 	.word	0x000015fd
    16d8:	000015fd 	.word	0x000015fd
    16dc:	0000179f 	.word	0x0000179f
    16e0:	00001721 	.word	0x00001721
    16e4:	0000179f 	.word	0x0000179f
    16e8:	0000179f 	.word	0x0000179f
    16ec:	0000179f 	.word	0x0000179f
    16f0:	0000179f 	.word	0x0000179f
    16f4:	00001769 	.word	0x00001769
    16f8:	00001761 	.word	0x00001761
    16fc:	00001785 	.word	0x00001785
    1700:	0000179f 	.word	0x0000179f
    1704:	0000179f 	.word	0x0000179f
    1708:	00001785 	.word	0x00001785
    170c:	0000179f 	.word	0x0000179f
    1710:	00001761 	.word	0x00001761
    1714:	0000179f 	.word	0x0000179f
    1718:	0000179f 	.word	0x0000179f
    171c:	00001761 	.word	0x00001761
		conv->specifier_cat = SPECIFIER_SINT;
    1720:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1724:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1726:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    172a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    172e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1730:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1734:	bf02      	ittt	eq
    1736:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    173a:	f041 0101 	orreq.w	r1, r1, #1
    173e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1742:	2a63      	cmp	r2, #99	; 0x63
    1744:	d131      	bne.n	17aa <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1746:	3b00      	subs	r3, #0
    1748:	bf18      	it	ne
    174a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    174c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1750:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1754:	430b      	orrs	r3, r1
    1756:	f363 0241 	bfi	r2, r3, #1, #1
    175a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    175e:	e6d8      	b.n	1512 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1760:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1764:	2002      	movs	r0, #2
    1766:	e7de      	b.n	1726 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1768:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    176c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1770:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1774:	2103      	movs	r1, #3
    1776:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    177a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    177c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1780:	4143      	adcs	r3, r0
    1782:	e7e3      	b.n	174c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1784:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1788:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    178a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    178e:	f361 0202 	bfi	r2, r1, #0, #3
    1792:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1796:	bf14      	ite	ne
    1798:	2301      	movne	r3, #1
    179a:	2300      	moveq	r3, #0
    179c:	e7d6      	b.n	174c <cbvprintf+0x378>
		conv->invalid = true;
    179e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    17a2:	f043 0301 	orr.w	r3, r3, #1
    17a6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    17aa:	2300      	movs	r3, #0
    17ac:	e7ce      	b.n	174c <cbvprintf+0x378>
		} else if (conv->width_present) {
    17ae:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    17b2:	2a00      	cmp	r2, #0
			width = conv->width_value;
    17b4:	bfb4      	ite	lt
    17b6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    17ba:	f04f 39ff 	movge.w	r9, #4294967295
    17be:	e6ba      	b.n	1536 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    17c0:	079b      	lsls	r3, r3, #30
    17c2:	f57f aec7 	bpl.w	1554 <cbvprintf+0x180>
			precision = conv->prec_value;
    17c6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    17ca:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    17ce:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    17d0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    17d4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    17d8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    17dc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    17de:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    17e2:	d136      	bne.n	1852 <cbvprintf+0x47e>
			switch (length_mod) {
    17e4:	1ed3      	subs	r3, r2, #3
    17e6:	2b04      	cmp	r3, #4
    17e8:	d820      	bhi.n	182c <cbvprintf+0x458>
    17ea:	e8df f003 	tbb	[pc, r3]
    17ee:	0703      	.short	0x0703
    17f0:	1f07      	.short	0x1f07
    17f2:	1f          	.byte	0x1f
    17f3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    17f4:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    17f8:	17c1      	asrs	r1, r0, #31
    17fa:	e004      	b.n	1806 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    17fc:	3407      	adds	r4, #7
    17fe:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1802:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    1806:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    180a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    180e:	f013 0603 	ands.w	r6, r3, #3
    1812:	d054      	beq.n	18be <cbvprintf+0x4ea>
			OUTS(sp, fp);
    1814:	9802      	ldr	r0, [sp, #8]
    1816:	463b      	mov	r3, r7
    1818:	4652      	mov	r2, sl
    181a:	4659      	mov	r1, fp
    181c:	f005 ff99 	bl	7752 <outs>
    1820:	2800      	cmp	r0, #0
    1822:	f2c0 8143 	blt.w	1aac <cbvprintf+0x6d8>
    1826:	4405      	add	r5, r0
			continue;
    1828:	46ba      	mov	sl, r7
    182a:	e5db      	b.n	13e4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    182c:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    1830:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1832:	ea4f 71e0 	mov.w	r1, r0, asr #31
    1836:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    183a:	d105      	bne.n	1848 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    183c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1840:	930a      	str	r3, [sp, #40]	; 0x28
    1842:	2300      	movs	r3, #0
    1844:	930b      	str	r3, [sp, #44]	; 0x2c
    1846:	e7e0      	b.n	180a <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    1848:	2a02      	cmp	r2, #2
    184a:	d1de      	bne.n	180a <cbvprintf+0x436>
				value->sint = (short)value->sint;
    184c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    1850:	e7d2      	b.n	17f8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1852:	2b02      	cmp	r3, #2
    1854:	d123      	bne.n	189e <cbvprintf+0x4ca>
			switch (length_mod) {
    1856:	1ed3      	subs	r3, r2, #3
    1858:	2b04      	cmp	r3, #4
    185a:	d813      	bhi.n	1884 <cbvprintf+0x4b0>
    185c:	e8df f003 	tbb	[pc, r3]
    1860:	120a0a03 	.word	0x120a0a03
    1864:	12          	.byte	0x12
    1865:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1866:	6820      	ldr	r0, [r4, #0]
    1868:	900a      	str	r0, [sp, #40]	; 0x28
    186a:	2100      	movs	r1, #0
    186c:	1d23      	adds	r3, r4, #4
    186e:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1870:	461c      	mov	r4, r3
    1872:	e7ca      	b.n	180a <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    1874:	3407      	adds	r4, #7
    1876:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    187a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    187e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    1882:	e7f5      	b.n	1870 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    1884:	f854 3b04 	ldr.w	r3, [r4], #4
    1888:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    188a:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    188c:	f04f 0300 	mov.w	r3, #0
    1890:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1892:	d0d3      	beq.n	183c <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    1894:	2a02      	cmp	r2, #2
    1896:	d1b8      	bne.n	180a <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    1898:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    189c:	e7d0      	b.n	1840 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    189e:	2b04      	cmp	r3, #4
    18a0:	d107      	bne.n	18b2 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    18a2:	3407      	adds	r4, #7
    18a4:	f024 0407 	bic.w	r4, r4, #7
    18a8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    18ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    18b0:	e7ab      	b.n	180a <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    18b2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    18b4:	bf04      	itt	eq
    18b6:	f854 3b04 	ldreq.w	r3, [r4], #4
    18ba:	930a      	streq	r3, [sp, #40]	; 0x28
    18bc:	e7a5      	b.n	180a <cbvprintf+0x436>
		switch (conv->specifier) {
    18be:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    18c2:	2878      	cmp	r0, #120	; 0x78
    18c4:	d8b0      	bhi.n	1828 <cbvprintf+0x454>
    18c6:	2862      	cmp	r0, #98	; 0x62
    18c8:	d822      	bhi.n	1910 <cbvprintf+0x53c>
    18ca:	2825      	cmp	r0, #37	; 0x25
    18cc:	f43f ad93 	beq.w	13f6 <cbvprintf+0x22>
    18d0:	2858      	cmp	r0, #88	; 0x58
    18d2:	d1a9      	bne.n	1828 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    18d4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    18d8:	9300      	str	r3, [sp, #0]
    18da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    18de:	ab04      	add	r3, sp, #16
    18e0:	aa0c      	add	r2, sp, #48	; 0x30
    18e2:	f005 feeb 	bl	76bc <encode_uint>
    18e6:	4682      	mov	sl, r0
			if (precision >= 0) {
    18e8:	f1b8 0f00 	cmp.w	r8, #0
    18ec:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    18f0:	db0c      	blt.n	190c <cbvprintf+0x538>
				conv->flag_zero = false;
    18f2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    18f6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    18fa:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    18fe:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1900:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1904:	d902      	bls.n	190c <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    1906:	eba8 0303 	sub.w	r3, r8, r3
    190a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    190c:	4680      	mov	r8, r0
    190e:	e03d      	b.n	198c <cbvprintf+0x5b8>
    1910:	3863      	subs	r0, #99	; 0x63
    1912:	2815      	cmp	r0, #21
    1914:	d888      	bhi.n	1828 <cbvprintf+0x454>
    1916:	a101      	add	r1, pc, #4	; (adr r1, 191c <cbvprintf+0x548>)
    1918:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    191c:	0000199d 	.word	0x0000199d
    1920:	00001a01 	.word	0x00001a01
    1924:	00001829 	.word	0x00001829
    1928:	00001829 	.word	0x00001829
    192c:	00001829 	.word	0x00001829
    1930:	00001829 	.word	0x00001829
    1934:	00001a01 	.word	0x00001a01
    1938:	00001829 	.word	0x00001829
    193c:	00001829 	.word	0x00001829
    1940:	00001829 	.word	0x00001829
    1944:	00001829 	.word	0x00001829
    1948:	00001a5f 	.word	0x00001a5f
    194c:	00001a2d 	.word	0x00001a2d
    1950:	00001a31 	.word	0x00001a31
    1954:	00001829 	.word	0x00001829
    1958:	00001829 	.word	0x00001829
    195c:	00001975 	.word	0x00001975
    1960:	00001829 	.word	0x00001829
    1964:	00001a2d 	.word	0x00001a2d
    1968:	00001829 	.word	0x00001829
    196c:	00001829 	.word	0x00001829
    1970:	00001a2d 	.word	0x00001a2d
			if (precision >= 0) {
    1974:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1978:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    197c:	db0a      	blt.n	1994 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    197e:	4641      	mov	r1, r8
    1980:	4650      	mov	r0, sl
    1982:	f005 ffa9 	bl	78d8 <strnlen>
			bpe = bps + len;
    1986:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    198a:	2600      	movs	r6, #0
		if (bps == NULL) {
    198c:	f1ba 0f00 	cmp.w	sl, #0
    1990:	d10c      	bne.n	19ac <cbvprintf+0x5d8>
    1992:	e749      	b.n	1828 <cbvprintf+0x454>
				len = strlen(bps);
    1994:	4650      	mov	r0, sl
    1996:	f005 ff98 	bl	78ca <strlen>
    199a:	e7f4      	b.n	1986 <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    199c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    199e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    19a2:	2600      	movs	r6, #0
			bpe = buf + 1;
    19a4:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    19a8:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    19ac:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    19b0:	b106      	cbz	r6, 19b4 <cbvprintf+0x5e0>
			nj_len += 1U;
    19b2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    19b4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    19b8:	06d0      	lsls	r0, r2, #27
    19ba:	d56b      	bpl.n	1a94 <cbvprintf+0x6c0>
			nj_len += 2U;
    19bc:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    19be:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    19c0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    19c2:	bf48      	it	mi
    19c4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    19c6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    19c8:	bf48      	it	mi
    19ca:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    19cc:	f1b9 0f00 	cmp.w	r9, #0
    19d0:	dd79      	ble.n	1ac6 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    19d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    19d6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    19da:	f3c2 0380 	ubfx	r3, r2, #2, #1
    19de:	9303      	str	r3, [sp, #12]
    19e0:	0753      	lsls	r3, r2, #29
    19e2:	d470      	bmi.n	1ac6 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    19e4:	0650      	lsls	r0, r2, #25
    19e6:	d564      	bpl.n	1ab2 <cbvprintf+0x6de>
					if (sign != 0) {
    19e8:	b146      	cbz	r6, 19fc <cbvprintf+0x628>
						OUTC(sign);
    19ea:	9b02      	ldr	r3, [sp, #8]
    19ec:	4659      	mov	r1, fp
    19ee:	4630      	mov	r0, r6
    19f0:	4798      	blx	r3
    19f2:	2800      	cmp	r0, #0
    19f4:	db5a      	blt.n	1aac <cbvprintf+0x6d8>
						sign = 0;
    19f6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    19f8:	3501      	adds	r5, #1
						sign = 0;
    19fa:	461e      	mov	r6, r3
					pad = '0';
    19fc:	2330      	movs	r3, #48	; 0x30
    19fe:	e059      	b.n	1ab4 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    1a00:	071e      	lsls	r6, r3, #28
    1a02:	d411      	bmi.n	1a28 <cbvprintf+0x654>
				sign = ' ';
    1a04:	f013 0610 	ands.w	r6, r3, #16
    1a08:	bf18      	it	ne
    1a0a:	2620      	movne	r6, #32
			sint = value->sint;
    1a0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1a10:	2a00      	cmp	r2, #0
    1a12:	f173 0100 	sbcs.w	r1, r3, #0
    1a16:	f6bf af5d 	bge.w	18d4 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    1a1a:	4252      	negs	r2, r2
    1a1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1a20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1a24:	262d      	movs	r6, #45	; 0x2d
    1a26:	e755      	b.n	18d4 <cbvprintf+0x500>
				sign = '+';
    1a28:	262b      	movs	r6, #43	; 0x2b
    1a2a:	e7ef      	b.n	1a0c <cbvprintf+0x638>
		switch (conv->specifier) {
    1a2c:	2600      	movs	r6, #0
    1a2e:	e751      	b.n	18d4 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1a30:	980a      	ldr	r0, [sp, #40]	; 0x28
    1a32:	b348      	cbz	r0, 1a88 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1a34:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1a38:	9300      	str	r3, [sp, #0]
    1a3a:	aa0c      	add	r2, sp, #48	; 0x30
    1a3c:	ab04      	add	r3, sp, #16
    1a3e:	2100      	movs	r1, #0
    1a40:	f005 fe3c 	bl	76bc <encode_uint>
				conv->altform_0c = true;
    1a44:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1a48:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1a4c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1a50:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1a54:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1a56:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1a5a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1a5c:	e744      	b.n	18e8 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1a60:	2a07      	cmp	r2, #7
    1a62:	f63f aee1 	bhi.w	1828 <cbvprintf+0x454>
    1a66:	e8df f002 	tbb	[pc, r2]
    1a6a:	040d      	.short	0x040d
    1a6c:	08080d06 	.word	0x08080d06
    1a70:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1a72:	701d      	strb	r5, [r3, #0]
		break;
    1a74:	e6d8      	b.n	1828 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    1a76:	801d      	strh	r5, [r3, #0]
		break;
    1a78:	e6d6      	b.n	1828 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    1a7a:	4628      	mov	r0, r5
    1a7c:	17e9      	asrs	r1, r5, #31
    1a7e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1a82:	e6d1      	b.n	1828 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1a84:	601d      	str	r5, [r3, #0]
		break;
    1a86:	e6cf      	b.n	1828 <cbvprintf+0x454>
			bpe = bps + 5;
    1a88:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1b50 <cbvprintf+0x77c>
    1a8c:	4606      	mov	r6, r0
			bps = "(nil)";
    1a8e:	f1a8 0a05 	sub.w	sl, r8, #5
    1a92:	e78b      	b.n	19ac <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    1a94:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1a96:	bf48      	it	mi
    1a98:	3301      	addmi	r3, #1
    1a9a:	e790      	b.n	19be <cbvprintf+0x5ea>
					OUTC(pad);
    1a9c:	4618      	mov	r0, r3
    1a9e:	9303      	str	r3, [sp, #12]
    1aa0:	4659      	mov	r1, fp
    1aa2:	9b02      	ldr	r3, [sp, #8]
    1aa4:	4798      	blx	r3
    1aa6:	2800      	cmp	r0, #0
    1aa8:	9b03      	ldr	r3, [sp, #12]
    1aaa:	da04      	bge.n	1ab6 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    1aac:	b011      	add	sp, #68	; 0x44
    1aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1ab2:	2320      	movs	r3, #32
    1ab4:	444d      	add	r5, r9
    1ab6:	464a      	mov	r2, r9
				while (width-- > 0) {
    1ab8:	2a00      	cmp	r2, #0
    1aba:	eba5 0109 	sub.w	r1, r5, r9
    1abe:	f109 39ff 	add.w	r9, r9, #4294967295
    1ac2:	dceb      	bgt.n	1a9c <cbvprintf+0x6c8>
    1ac4:	460d      	mov	r5, r1
		if (sign != 0) {
    1ac6:	b136      	cbz	r6, 1ad6 <cbvprintf+0x702>
			OUTC(sign);
    1ac8:	9b02      	ldr	r3, [sp, #8]
    1aca:	4659      	mov	r1, fp
    1acc:	4630      	mov	r0, r6
    1ace:	4798      	blx	r3
    1ad0:	2800      	cmp	r0, #0
    1ad2:	dbeb      	blt.n	1aac <cbvprintf+0x6d8>
    1ad4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1ad6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1ada:	06d9      	lsls	r1, r3, #27
    1adc:	d401      	bmi.n	1ae2 <cbvprintf+0x70e>
    1ade:	071a      	lsls	r2, r3, #28
    1ae0:	d506      	bpl.n	1af0 <cbvprintf+0x71c>
				OUTC('0');
    1ae2:	9b02      	ldr	r3, [sp, #8]
    1ae4:	4659      	mov	r1, fp
    1ae6:	2030      	movs	r0, #48	; 0x30
    1ae8:	4798      	blx	r3
    1aea:	2800      	cmp	r0, #0
    1aec:	dbde      	blt.n	1aac <cbvprintf+0x6d8>
    1aee:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1af0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1af4:	06db      	lsls	r3, r3, #27
    1af6:	d507      	bpl.n	1b08 <cbvprintf+0x734>
				OUTC(conv->specifier);
    1af8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1afc:	9b02      	ldr	r3, [sp, #8]
    1afe:	4659      	mov	r1, fp
    1b00:	4798      	blx	r3
    1b02:	2800      	cmp	r0, #0
    1b04:	dbd2      	blt.n	1aac <cbvprintf+0x6d8>
    1b06:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1b08:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1b0a:	442e      	add	r6, r5
    1b0c:	1b73      	subs	r3, r6, r5
    1b0e:	2b00      	cmp	r3, #0
    1b10:	dc16      	bgt.n	1b40 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    1b12:	9802      	ldr	r0, [sp, #8]
    1b14:	4643      	mov	r3, r8
    1b16:	4652      	mov	r2, sl
    1b18:	4659      	mov	r1, fp
    1b1a:	f005 fe1a 	bl	7752 <outs>
    1b1e:	2800      	cmp	r0, #0
    1b20:	dbc4      	blt.n	1aac <cbvprintf+0x6d8>
    1b22:	4405      	add	r5, r0
		while (width > 0) {
    1b24:	44a9      	add	r9, r5
    1b26:	eba9 0305 	sub.w	r3, r9, r5
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	f77f ae7c 	ble.w	1828 <cbvprintf+0x454>
			OUTC(' ');
    1b30:	9b02      	ldr	r3, [sp, #8]
    1b32:	4659      	mov	r1, fp
    1b34:	2020      	movs	r0, #32
    1b36:	4798      	blx	r3
    1b38:	2800      	cmp	r0, #0
    1b3a:	dbb7      	blt.n	1aac <cbvprintf+0x6d8>
    1b3c:	3501      	adds	r5, #1
			--width;
    1b3e:	e7f2      	b.n	1b26 <cbvprintf+0x752>
				OUTC('0');
    1b40:	9b02      	ldr	r3, [sp, #8]
    1b42:	4659      	mov	r1, fp
    1b44:	2030      	movs	r0, #48	; 0x30
    1b46:	4798      	blx	r3
    1b48:	2800      	cmp	r0, #0
    1b4a:	dbaf      	blt.n	1aac <cbvprintf+0x6d8>
    1b4c:	3501      	adds	r5, #1
    1b4e:	e7dd      	b.n	1b0c <cbvprintf+0x738>
    1b50:	00008772 	.word	0x00008772

00001b54 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1b54:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1b56:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    1b58:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    1b5a:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    1b5e:	2c03      	cmp	r4, #3
{
    1b60:	4605      	mov	r5, r0
	switch (method) {
    1b62:	d002      	beq.n	1b6a <sys_notify_finalize+0x16>
    1b64:	b12c      	cbz	r4, 1b72 <sys_notify_finalize+0x1e>
    1b66:	2000      	movs	r0, #0
    1b68:	e000      	b.n	1b6c <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1b6a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1b6c:	2300      	movs	r3, #0
    1b6e:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1b70:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    1b72:	4a05      	ldr	r2, [pc, #20]	; (1b88 <sys_notify_finalize+0x34>)
    1b74:	4905      	ldr	r1, [pc, #20]	; (1b8c <sys_notify_finalize+0x38>)
    1b76:	4806      	ldr	r0, [pc, #24]	; (1b90 <sys_notify_finalize+0x3c>)
    1b78:	2345      	movs	r3, #69	; 0x45
    1b7a:	f005 fe6c 	bl	7856 <printk>
    1b7e:	4802      	ldr	r0, [pc, #8]	; (1b88 <sys_notify_finalize+0x34>)
    1b80:	2145      	movs	r1, #69	; 0x45
    1b82:	f005 fd94 	bl	76ae <assert_post_action>
    1b86:	e7ee      	b.n	1b66 <sys_notify_finalize+0x12>
    1b88:	00008773 	.word	0x00008773
    1b8c:	00008874 	.word	0x00008874
    1b90:	00008224 	.word	0x00008224

00001b94 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1b94:	4801      	ldr	r0, [pc, #4]	; (1b9c <nrf_cc3xx_platform_abort_init+0x8>)
    1b96:	f005 bbdd 	b.w	7354 <nrf_cc3xx_platform_set_abort>
    1b9a:	bf00      	nop
    1b9c:	00007ff8 	.word	0x00007ff8

00001ba0 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ba0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1ba2:	b1d0      	cbz	r0, 1bda <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1ba4:	6843      	ldr	r3, [r0, #4]
    1ba6:	2b04      	cmp	r3, #4
    1ba8:	d111      	bne.n	1bce <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1baa:	2200      	movs	r2, #0
    1bac:	6803      	ldr	r3, [r0, #0]
    1bae:	f3bf 8f5b 	dmb	ish
    1bb2:	e853 1f00 	ldrex	r1, [r3]
    1bb6:	2901      	cmp	r1, #1
    1bb8:	d103      	bne.n	1bc2 <mutex_unlock_platform+0x22>
    1bba:	e843 2000 	strex	r0, r2, [r3]
    1bbe:	2800      	cmp	r0, #0
    1bc0:	d1f7      	bne.n	1bb2 <mutex_unlock_platform+0x12>
    1bc2:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1bc6:	4807      	ldr	r0, [pc, #28]	; (1be4 <mutex_unlock_platform+0x44>)
    1bc8:	bf08      	it	eq
    1bca:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1bcc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1bce:	b13b      	cbz	r3, 1be0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1bd0:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1bd2:	f003 fca7 	bl	5524 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1bd6:	2000      	movs	r0, #0
    1bd8:	e7f8      	b.n	1bcc <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1bda:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1bde:	e7f5      	b.n	1bcc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1be0:	4801      	ldr	r0, [pc, #4]	; (1be8 <mutex_unlock_platform+0x48>)
    1be2:	e7f3      	b.n	1bcc <mutex_unlock_platform+0x2c>
    1be4:	ffff8fe9 	.word	0xffff8fe9
    1be8:	ffff8fea 	.word	0xffff8fea

00001bec <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1bec:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1bee:	4604      	mov	r4, r0
    1bf0:	b918      	cbnz	r0, 1bfa <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1bf2:	4b0d      	ldr	r3, [pc, #52]	; (1c28 <mutex_free_platform+0x3c>)
    1bf4:	480d      	ldr	r0, [pc, #52]	; (1c2c <mutex_free_platform+0x40>)
    1bf6:	685b      	ldr	r3, [r3, #4]
    1bf8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1bfa:	6861      	ldr	r1, [r4, #4]
    1bfc:	2908      	cmp	r1, #8
    1bfe:	d00d      	beq.n	1c1c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1c00:	f031 0304 	bics.w	r3, r1, #4
    1c04:	d00a      	beq.n	1c1c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1c06:	f011 0102 	ands.w	r1, r1, #2
    1c0a:	d008      	beq.n	1c1e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1c0c:	4808      	ldr	r0, [pc, #32]	; (1c30 <mutex_free_platform+0x44>)
    1c0e:	4621      	mov	r1, r4
    1c10:	f003 fb24 	bl	525c <k_mem_slab_free>
        mutex->mutex = NULL;
    1c14:	2300      	movs	r3, #0
    1c16:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1c18:	2300      	movs	r3, #0
    1c1a:	6063      	str	r3, [r4, #4]
}
    1c1c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1c1e:	6820      	ldr	r0, [r4, #0]
    1c20:	2214      	movs	r2, #20
    1c22:	f005 fe79 	bl	7918 <memset>
    1c26:	e7f7      	b.n	1c18 <mutex_free_platform+0x2c>
    1c28:	200000dc 	.word	0x200000dc
    1c2c:	00008796 	.word	0x00008796
    1c30:	20000350 	.word	0x20000350

00001c34 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1c34:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1c36:	4604      	mov	r4, r0
    1c38:	b918      	cbnz	r0, 1c42 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1c3a:	4b16      	ldr	r3, [pc, #88]	; (1c94 <mutex_init_platform+0x60>)
    1c3c:	4816      	ldr	r0, [pc, #88]	; (1c98 <mutex_init_platform+0x64>)
    1c3e:	685b      	ldr	r3, [r3, #4]
    1c40:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1c42:	6863      	ldr	r3, [r4, #4]
    1c44:	2b04      	cmp	r3, #4
    1c46:	d023      	beq.n	1c90 <mutex_init_platform+0x5c>
    1c48:	2b08      	cmp	r3, #8
    1c4a:	d021      	beq.n	1c90 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1c4c:	b9cb      	cbnz	r3, 1c82 <mutex_init_platform+0x4e>
    1c4e:	6823      	ldr	r3, [r4, #0]
    1c50:	b9bb      	cbnz	r3, 1c82 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1c52:	4812      	ldr	r0, [pc, #72]	; (1c9c <mutex_init_platform+0x68>)
    1c54:	f04f 32ff 	mov.w	r2, #4294967295
    1c58:	f04f 33ff 	mov.w	r3, #4294967295
    1c5c:	4621      	mov	r1, r4
    1c5e:	f003 fa91 	bl	5184 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1c62:	b908      	cbnz	r0, 1c68 <mutex_init_platform+0x34>
    1c64:	6823      	ldr	r3, [r4, #0]
    1c66:	b91b      	cbnz	r3, 1c70 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1c68:	4b0a      	ldr	r3, [pc, #40]	; (1c94 <mutex_init_platform+0x60>)
    1c6a:	480d      	ldr	r0, [pc, #52]	; (1ca0 <mutex_init_platform+0x6c>)
    1c6c:	685b      	ldr	r3, [r3, #4]
    1c6e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1c70:	6820      	ldr	r0, [r4, #0]
    1c72:	2214      	movs	r2, #20
    1c74:	2100      	movs	r1, #0
    1c76:	f005 fe4f 	bl	7918 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1c7a:	6863      	ldr	r3, [r4, #4]
    1c7c:	f043 0302 	orr.w	r3, r3, #2
    1c80:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1c82:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1c84:	f006 f835 	bl	7cf2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1c88:	6863      	ldr	r3, [r4, #4]
    1c8a:	f043 0301 	orr.w	r3, r3, #1
    1c8e:	6063      	str	r3, [r4, #4]
}
    1c90:	bd10      	pop	{r4, pc}
    1c92:	bf00      	nop
    1c94:	200000dc 	.word	0x200000dc
    1c98:	00008796 	.word	0x00008796
    1c9c:	20000350 	.word	0x20000350
    1ca0:	000087bc 	.word	0x000087bc

00001ca4 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ca4:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    1ca6:	b308      	cbz	r0, 1cec <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    1ca8:	6843      	ldr	r3, [r0, #4]
    1caa:	2b04      	cmp	r3, #4
    1cac:	d110      	bne.n	1cd0 <mutex_lock_platform+0x2c>
    1cae:	2201      	movs	r2, #1
    1cb0:	6803      	ldr	r3, [r0, #0]
    1cb2:	f3bf 8f5b 	dmb	ish
    1cb6:	e853 1f00 	ldrex	r1, [r3]
    1cba:	2900      	cmp	r1, #0
    1cbc:	d103      	bne.n	1cc6 <mutex_lock_platform+0x22>
    1cbe:	e843 2000 	strex	r0, r2, [r3]
    1cc2:	2800      	cmp	r0, #0
    1cc4:	d1f7      	bne.n	1cb6 <mutex_lock_platform+0x12>
    1cc6:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1cca:	d10b      	bne.n	1ce4 <mutex_lock_platform+0x40>
    1ccc:	2000      	movs	r0, #0
}
    1cce:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1cd0:	b153      	cbz	r3, 1ce8 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1cd2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1cd4:	f04f 32ff 	mov.w	r2, #4294967295
    1cd8:	f04f 33ff 	mov.w	r3, #4294967295
    1cdc:	f003 fb22 	bl	5324 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1ce0:	2800      	cmp	r0, #0
    1ce2:	d0f3      	beq.n	1ccc <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1ce4:	4803      	ldr	r0, [pc, #12]	; (1cf4 <mutex_lock_platform+0x50>)
    1ce6:	e7f2      	b.n	1cce <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1ce8:	4803      	ldr	r0, [pc, #12]	; (1cf8 <mutex_lock_platform+0x54>)
    1cea:	e7f0      	b.n	1cce <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1cec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1cf0:	e7ed      	b.n	1cce <mutex_lock_platform+0x2a>
    1cf2:	bf00      	nop
    1cf4:	ffff8fe9 	.word	0xffff8fe9
    1cf8:	ffff8fea 	.word	0xffff8fea

00001cfc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1cfc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1cfe:	4906      	ldr	r1, [pc, #24]	; (1d18 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1d00:	4806      	ldr	r0, [pc, #24]	; (1d1c <nrf_cc3xx_platform_mutex_init+0x20>)
    1d02:	2340      	movs	r3, #64	; 0x40
    1d04:	2214      	movs	r2, #20
    1d06:	f005 ffd8 	bl	7cba <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1d0e:	4904      	ldr	r1, [pc, #16]	; (1d20 <nrf_cc3xx_platform_mutex_init+0x24>)
    1d10:	4804      	ldr	r0, [pc, #16]	; (1d24 <nrf_cc3xx_platform_mutex_init+0x28>)
    1d12:	f005 bb81 	b.w	7418 <nrf_cc3xx_platform_set_mutexes>
    1d16:	bf00      	nop
    1d18:	20000370 	.word	0x20000370
    1d1c:	20000350 	.word	0x20000350
    1d20:	00008010 	.word	0x00008010
    1d24:	00008000 	.word	0x00008000

00001d28 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1d2c:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    1d30:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1d32:	f019 0f08 	tst.w	r9, #8
{
    1d36:	4604      	mov	r4, r0
    1d38:	9203      	str	r2, [sp, #12]
	if (processing) {
    1d3a:	d022      	beq.n	1d82 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    1d3c:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1d3e:	bf0c      	ite	eq
    1d40:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1d44:	f049 0920 	orrne.w	r9, r9, #32
    1d48:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1d4c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1d4e:	4620      	mov	r0, r4
    1d50:	f004 ff4e 	bl	6bf0 <z_spin_unlock_valid>
    1d54:	b968      	cbnz	r0, 1d72 <process_event+0x4a>
    1d56:	4a9f      	ldr	r2, [pc, #636]	; (1fd4 <process_event+0x2ac>)
    1d58:	499f      	ldr	r1, [pc, #636]	; (1fd8 <process_event+0x2b0>)
    1d5a:	48a0      	ldr	r0, [pc, #640]	; (1fdc <process_event+0x2b4>)
    1d5c:	23ac      	movs	r3, #172	; 0xac
    1d5e:	f005 fd7a 	bl	7856 <printk>
    1d62:	489f      	ldr	r0, [pc, #636]	; (1fe0 <process_event+0x2b8>)
    1d64:	4621      	mov	r1, r4
    1d66:	f005 fd76 	bl	7856 <printk>
    1d6a:	489a      	ldr	r0, [pc, #616]	; (1fd4 <process_event+0x2ac>)
    1d6c:	21ac      	movs	r1, #172	; 0xac
    1d6e:	f005 fc9e 	bl	76ae <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1d72:	9b03      	ldr	r3, [sp, #12]
    1d74:	f383 8811 	msr	BASEPRI, r3
    1d78:	f3bf 8f6f 	isb	sy
}
    1d7c:	b005      	add	sp, #20
    1d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    1d82:	4f98      	ldr	r7, [pc, #608]	; (1fe4 <process_event+0x2bc>)
    1d84:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1fdc <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1d88:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1d8c:	2902      	cmp	r1, #2
    1d8e:	d106      	bne.n	1d9e <process_event+0x76>
			evt = process_recheck(mgr);
    1d90:	4620      	mov	r0, r4
    1d92:	f005 fd0a 	bl	77aa <process_recheck>
		if (evt == EVT_NOP) {
    1d96:	2800      	cmp	r0, #0
    1d98:	d0d8      	beq.n	1d4c <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    1d9a:	2801      	cmp	r0, #1
    1d9c:	d168      	bne.n	1e70 <process_event+0x148>
			res = mgr->last_res;
    1d9e:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1da2:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1da4:	f1bb 0f00 	cmp.w	fp, #0
    1da8:	da0a      	bge.n	1dc0 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1daa:	2600      	movs	r6, #0
		*clients = mgr->clients;
    1dac:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1dae:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    1db2:	e9c4 6600 	strd	r6, r6, [r4]
    1db6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1dba:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1dbc:	9601      	str	r6, [sp, #4]
    1dbe:	e027      	b.n	1e10 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1dc0:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1dc4:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1dc6:	2901      	cmp	r1, #1
    1dc8:	d834      	bhi.n	1e34 <process_event+0x10c>
	list->head = NULL;
    1dca:	2100      	movs	r1, #0
    1dcc:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    1dd0:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    1dd2:	6825      	ldr	r5, [r4, #0]
    1dd4:	b29b      	uxth	r3, r3
	list->tail = NULL;
    1dd6:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1dda:	d10c      	bne.n	1df6 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1ddc:	428d      	cmp	r5, r1
    1dde:	462a      	mov	r2, r5
    1de0:	bf38      	it	cc
    1de2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1de4:	b12a      	cbz	r2, 1df2 <process_event+0xca>
				mgr->refs += 1U;
    1de6:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1de8:	6812      	ldr	r2, [r2, #0]
    1dea:	3101      	adds	r1, #1
    1dec:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1dee:	2a00      	cmp	r2, #0
    1df0:	d1f8      	bne.n	1de4 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1df2:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1df6:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1df8:	4620      	mov	r0, r4
    1dfa:	f005 fcd6 	bl	77aa <process_recheck>
    1dfe:	4606      	mov	r6, r0
    1e00:	2800      	cmp	r0, #0
    1e02:	d0db      	beq.n	1dbc <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1e04:	8ba3      	ldrh	r3, [r4, #28]
    1e06:	f043 0320 	orr.w	r3, r3, #32
    1e0a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1e0c:	2300      	movs	r3, #0
    1e0e:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e10:	8ba3      	ldrh	r3, [r4, #28]
    1e12:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1e16:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e18:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    1e1a:	d003      	beq.n	1e24 <process_event+0xfc>
		if (do_monitors
    1e1c:	68a2      	ldr	r2, [r4, #8]
    1e1e:	2a00      	cmp	r2, #0
    1e20:	f040 80f0 	bne.w	2004 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    1e24:	b91d      	cbnz	r5, 1e2e <process_event+0x106>
		    || (transit != NULL)) {
    1e26:	9a01      	ldr	r2, [sp, #4]
    1e28:	2a00      	cmp	r2, #0
    1e2a:	f000 8136 	beq.w	209a <process_event+0x372>
    1e2e:	f04f 0900 	mov.w	r9, #0
    1e32:	e0e9      	b.n	2008 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1e34:	2a04      	cmp	r2, #4
    1e36:	d10e      	bne.n	1e56 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e38:	f023 0307 	bic.w	r3, r3, #7
    1e3c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e3e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1e40:	4620      	mov	r0, r4
    1e42:	f005 fcb2 	bl	77aa <process_recheck>
    1e46:	4605      	mov	r5, r0
    1e48:	b118      	cbz	r0, 1e52 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1e4a:	f042 0220 	orr.w	r2, r2, #32
    1e4e:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1e50:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1e52:	9501      	str	r5, [sp, #4]
    1e54:	e7dc      	b.n	1e10 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    1e56:	4640      	mov	r0, r8
    1e58:	4963      	ldr	r1, [pc, #396]	; (1fe8 <process_event+0x2c0>)
    1e5a:	f240 131b 	movw	r3, #283	; 0x11b
    1e5e:	463a      	mov	r2, r7
    1e60:	f005 fcf9 	bl	7856 <printk>
    1e64:	f240 111b 	movw	r1, #283	; 0x11b
    1e68:	4638      	mov	r0, r7
    1e6a:	f005 fc20 	bl	76ae <assert_post_action>
    1e6e:	e7ef      	b.n	1e50 <process_event+0x128>
		} else if (evt == EVT_START) {
    1e70:	2803      	cmp	r0, #3
    1e72:	d135      	bne.n	1ee0 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1e74:	f1b9 0f00 	cmp.w	r9, #0
    1e78:	d00b      	beq.n	1e92 <process_event+0x16a>
    1e7a:	495c      	ldr	r1, [pc, #368]	; (1fec <process_event+0x2c4>)
    1e7c:	4640      	mov	r0, r8
    1e7e:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1e82:	463a      	mov	r2, r7
    1e84:	f005 fce7 	bl	7856 <printk>
    1e88:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1e8c:	4638      	mov	r0, r7
    1e8e:	f005 fc0e 	bl	76ae <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1e92:	6823      	ldr	r3, [r4, #0]
    1e94:	b95b      	cbnz	r3, 1eae <process_event+0x186>
    1e96:	4956      	ldr	r1, [pc, #344]	; (1ff0 <process_event+0x2c8>)
    1e98:	4640      	mov	r0, r8
    1e9a:	f240 1357 	movw	r3, #343	; 0x157
    1e9e:	463a      	mov	r2, r7
    1ea0:	f005 fcd9 	bl	7856 <printk>
    1ea4:	f240 1157 	movw	r1, #343	; 0x157
    1ea8:	4638      	mov	r0, r7
    1eaa:	f005 fc00 	bl	76ae <assert_post_action>
			transit = mgr->transitions->start;
    1eae:	6923      	ldr	r3, [r4, #16]
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1eb4:	b95b      	cbnz	r3, 1ece <process_event+0x1a6>
    1eb6:	494f      	ldr	r1, [pc, #316]	; (1ff4 <process_event+0x2cc>)
    1eb8:	4640      	mov	r0, r8
    1eba:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1ebe:	463a      	mov	r2, r7
    1ec0:	f005 fcc9 	bl	7856 <printk>
    1ec4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1ec8:	4638      	mov	r0, r7
    1eca:	f005 fbf0 	bl	76ae <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ece:	8ba3      	ldrh	r3, [r4, #28]
    1ed0:	f023 0307 	bic.w	r3, r3, #7
    1ed4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ed8:	83a3      	strh	r3, [r4, #28]
}
    1eda:	2500      	movs	r5, #0
		res = 0;
    1edc:	46ab      	mov	fp, r5
}
    1ede:	e797      	b.n	1e10 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    1ee0:	2804      	cmp	r0, #4
    1ee2:	d132      	bne.n	1f4a <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1ee4:	f1b9 0f02 	cmp.w	r9, #2
    1ee8:	d00b      	beq.n	1f02 <process_event+0x1da>
    1eea:	4943      	ldr	r1, [pc, #268]	; (1ff8 <process_event+0x2d0>)
    1eec:	4640      	mov	r0, r8
    1eee:	f240 135d 	movw	r3, #349	; 0x15d
    1ef2:	463a      	mov	r2, r7
    1ef4:	f005 fcaf 	bl	7856 <printk>
    1ef8:	f240 115d 	movw	r1, #349	; 0x15d
    1efc:	4638      	mov	r0, r7
    1efe:	f005 fbd6 	bl	76ae <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1f02:	8be3      	ldrh	r3, [r4, #30]
    1f04:	b15b      	cbz	r3, 1f1e <process_event+0x1f6>
    1f06:	493d      	ldr	r1, [pc, #244]	; (1ffc <process_event+0x2d4>)
    1f08:	4640      	mov	r0, r8
    1f0a:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1f0e:	463a      	mov	r2, r7
    1f10:	f005 fca1 	bl	7856 <printk>
    1f14:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1f18:	4638      	mov	r0, r7
    1f1a:	f005 fbc8 	bl	76ae <assert_post_action>
			transit = mgr->transitions->stop;
    1f1e:	6923      	ldr	r3, [r4, #16]
    1f20:	685b      	ldr	r3, [r3, #4]
    1f22:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1f24:	b95b      	cbnz	r3, 1f3e <process_event+0x216>
    1f26:	4933      	ldr	r1, [pc, #204]	; (1ff4 <process_event+0x2cc>)
    1f28:	4640      	mov	r0, r8
    1f2a:	f240 1361 	movw	r3, #353	; 0x161
    1f2e:	463a      	mov	r2, r7
    1f30:	f005 fc91 	bl	7856 <printk>
    1f34:	f240 1161 	movw	r1, #353	; 0x161
    1f38:	4638      	mov	r0, r7
    1f3a:	f005 fbb8 	bl	76ae <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f3e:	8ba3      	ldrh	r3, [r4, #28]
    1f40:	f023 0307 	bic.w	r3, r3, #7
    1f44:	f043 0304 	orr.w	r3, r3, #4
    1f48:	e7c6      	b.n	1ed8 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    1f4a:	2805      	cmp	r0, #5
    1f4c:	d132      	bne.n	1fb4 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1f4e:	f1b9 0f01 	cmp.w	r9, #1
    1f52:	d00b      	beq.n	1f6c <process_event+0x244>
    1f54:	492a      	ldr	r1, [pc, #168]	; (2000 <process_event+0x2d8>)
    1f56:	4640      	mov	r0, r8
    1f58:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1f5c:	463a      	mov	r2, r7
    1f5e:	f005 fc7a 	bl	7856 <printk>
    1f62:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1f66:	4638      	mov	r0, r7
    1f68:	f005 fba1 	bl	76ae <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1f6c:	6823      	ldr	r3, [r4, #0]
    1f6e:	b95b      	cbnz	r3, 1f88 <process_event+0x260>
    1f70:	491f      	ldr	r1, [pc, #124]	; (1ff0 <process_event+0x2c8>)
    1f72:	4640      	mov	r0, r8
    1f74:	f240 1365 	movw	r3, #357	; 0x165
    1f78:	463a      	mov	r2, r7
    1f7a:	f005 fc6c 	bl	7856 <printk>
    1f7e:	f240 1165 	movw	r1, #357	; 0x165
    1f82:	4638      	mov	r0, r7
    1f84:	f005 fb93 	bl	76ae <assert_post_action>
			transit = mgr->transitions->reset;
    1f88:	6923      	ldr	r3, [r4, #16]
    1f8a:	689b      	ldr	r3, [r3, #8]
    1f8c:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1f8e:	b95b      	cbnz	r3, 1fa8 <process_event+0x280>
    1f90:	4918      	ldr	r1, [pc, #96]	; (1ff4 <process_event+0x2cc>)
    1f92:	4640      	mov	r0, r8
    1f94:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1f98:	463a      	mov	r2, r7
    1f9a:	f005 fc5c 	bl	7856 <printk>
    1f9e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1fa2:	4638      	mov	r0, r7
    1fa4:	f005 fb83 	bl	76ae <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1fa8:	8ba3      	ldrh	r3, [r4, #28]
    1faa:	f023 0307 	bic.w	r3, r3, #7
    1fae:	f043 0305 	orr.w	r3, r3, #5
    1fb2:	e791      	b.n	1ed8 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    1fb4:	490c      	ldr	r1, [pc, #48]	; (1fe8 <process_event+0x2c0>)
    1fb6:	f240 136b 	movw	r3, #363	; 0x16b
    1fba:	463a      	mov	r2, r7
    1fbc:	4640      	mov	r0, r8
    1fbe:	f005 fc4a 	bl	7856 <printk>
    1fc2:	2500      	movs	r5, #0
    1fc4:	f240 116b 	movw	r1, #363	; 0x16b
    1fc8:	4638      	mov	r0, r7
    1fca:	f005 fb70 	bl	76ae <assert_post_action>
		onoff_transition_fn transit = NULL;
    1fce:	9501      	str	r5, [sp, #4]
    1fd0:	e784      	b.n	1edc <process_event+0x1b4>
    1fd2:	bf00      	nop
    1fd4:	0000888c 	.word	0x0000888c
    1fd8:	000088b2 	.word	0x000088b2
    1fdc:	00008224 	.word	0x00008224
    1fe0:	000088c9 	.word	0x000088c9
    1fe4:	000087e9 	.word	0x000087e9
    1fe8:	00008874 	.word	0x00008874
    1fec:	0000880b 	.word	0x0000880b
    1ff0:	00008817 	.word	0x00008817
    1ff4:	0000883a 	.word	0x0000883a
    1ff8:	00008851 	.word	0x00008851
    1ffc:	00008867 	.word	0x00008867
    2000:	00008876 	.word	0x00008876
				   && !sys_slist_is_empty(&mgr->monitors);
    2004:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2008:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    200c:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    2010:	83a3      	strh	r3, [r4, #28]
    2012:	4650      	mov	r0, sl
    2014:	f004 fdec 	bl	6bf0 <z_spin_unlock_valid>
    2018:	b968      	cbnz	r0, 2036 <process_event+0x30e>
    201a:	4a3a      	ldr	r2, [pc, #232]	; (2104 <process_event+0x3dc>)
    201c:	493a      	ldr	r1, [pc, #232]	; (2108 <process_event+0x3e0>)
    201e:	23ac      	movs	r3, #172	; 0xac
    2020:	4640      	mov	r0, r8
    2022:	f005 fc18 	bl	7856 <printk>
    2026:	4839      	ldr	r0, [pc, #228]	; (210c <process_event+0x3e4>)
    2028:	4651      	mov	r1, sl
    202a:	f005 fc14 	bl	7856 <printk>
    202e:	4835      	ldr	r0, [pc, #212]	; (2104 <process_event+0x3dc>)
    2030:	21ac      	movs	r1, #172	; 0xac
    2032:	f005 fb3c 	bl	76ae <assert_post_action>
    2036:	9b03      	ldr	r3, [sp, #12]
    2038:	f383 8811 	msr	BASEPRI, r3
    203c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2040:	f1b9 0f00 	cmp.w	r9, #0
    2044:	d138      	bne.n	20b8 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    2046:	2d00      	cmp	r5, #0
    2048:	d14b      	bne.n	20e2 <process_event+0x3ba>
			if (transit != NULL) {
    204a:	9b01      	ldr	r3, [sp, #4]
    204c:	b113      	cbz	r3, 2054 <process_event+0x32c>
				transit(mgr, transition_complete);
    204e:	4930      	ldr	r1, [pc, #192]	; (2110 <process_event+0x3e8>)
    2050:	4620      	mov	r0, r4
    2052:	4798      	blx	r3
	__asm__ volatile(
    2054:	f04f 0320 	mov.w	r3, #32
    2058:	f3ef 8b11 	mrs	fp, BASEPRI
    205c:	f383 8812 	msr	BASEPRI_MAX, r3
    2060:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2064:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    2066:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    206a:	f004 fdb3 	bl	6bd4 <z_spin_lock_valid>
    206e:	b968      	cbnz	r0, 208c <process_event+0x364>
    2070:	4a24      	ldr	r2, [pc, #144]	; (2104 <process_event+0x3dc>)
    2072:	4928      	ldr	r1, [pc, #160]	; (2114 <process_event+0x3ec>)
    2074:	2381      	movs	r3, #129	; 0x81
    2076:	4640      	mov	r0, r8
    2078:	f005 fbed 	bl	7856 <printk>
    207c:	4826      	ldr	r0, [pc, #152]	; (2118 <process_event+0x3f0>)
    207e:	4651      	mov	r1, sl
    2080:	f005 fbe9 	bl	7856 <printk>
    2084:	481f      	ldr	r0, [pc, #124]	; (2104 <process_event+0x3dc>)
    2086:	2181      	movs	r1, #129	; 0x81
    2088:	f005 fb11 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    208c:	4650      	mov	r0, sl
    208e:	f004 fdbf 	bl	6c10 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2092:	8ba3      	ldrh	r3, [r4, #28]
    2094:	f023 0308 	bic.w	r3, r3, #8
    2098:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    209a:	8ba3      	ldrh	r3, [r4, #28]
    209c:	06da      	lsls	r2, r3, #27
    209e:	d528      	bpl.n	20f2 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    20a0:	f023 0310 	bic.w	r3, r3, #16
    20a4:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    20a6:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    20a8:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    20ac:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    20b0:	2900      	cmp	r1, #0
    20b2:	f47f ae6b 	bne.w	1d8c <process_event+0x64>
out:
    20b6:	e649      	b.n	1d4c <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    20b8:	68a1      	ldr	r1, [r4, #8]
    20ba:	2900      	cmp	r1, #0
    20bc:	d0c3      	beq.n	2046 <process_event+0x31e>
	return node->next;
    20be:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    20c0:	9a02      	ldr	r2, [sp, #8]
    20c2:	2b00      	cmp	r3, #0
    20c4:	bf38      	it	cc
    20c6:	2300      	movcc	r3, #0
    20c8:	4699      	mov	r9, r3
    20ca:	684b      	ldr	r3, [r1, #4]
    20cc:	4620      	mov	r0, r4
    20ce:	461e      	mov	r6, r3
    20d0:	465b      	mov	r3, fp
    20d2:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    20d4:	f1b9 0f00 	cmp.w	r9, #0
    20d8:	d0b5      	beq.n	2046 <process_event+0x31e>
    20da:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    20de:	4649      	mov	r1, r9
    20e0:	e7ee      	b.n	20c0 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    20e2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    20e4:	9a02      	ldr	r2, [sp, #8]
    20e6:	682d      	ldr	r5, [r5, #0]
    20e8:	465b      	mov	r3, fp
    20ea:	4620      	mov	r0, r4
    20ec:	f005 fb79 	bl	77e2 <notify_one>
    20f0:	e7a9      	b.n	2046 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    20f2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    20f6:	bf1e      	ittt	ne
    20f8:	f023 0320 	bicne.w	r3, r3, #32
    20fc:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    20fe:	2102      	movne	r1, #2
    2100:	e7d2      	b.n	20a8 <process_event+0x380>
    2102:	bf00      	nop
    2104:	0000888c 	.word	0x0000888c
    2108:	000088b2 	.word	0x000088b2
    210c:	000088c9 	.word	0x000088c9
    2110:	0000211d 	.word	0x0000211d
    2114:	000088de 	.word	0x000088de
    2118:	000088f3 	.word	0x000088f3

0000211c <transition_complete>:
{
    211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    211e:	4604      	mov	r4, r0
    2120:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2122:	f100 0614 	add.w	r6, r0, #20
    2126:	f04f 0320 	mov.w	r3, #32
    212a:	f3ef 8711 	mrs	r7, BASEPRI
    212e:	f383 8812 	msr	BASEPRI_MAX, r3
    2132:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2136:	4630      	mov	r0, r6
    2138:	f004 fd4c 	bl	6bd4 <z_spin_lock_valid>
    213c:	b968      	cbnz	r0, 215a <transition_complete+0x3e>
    213e:	4a0c      	ldr	r2, [pc, #48]	; (2170 <transition_complete+0x54>)
    2140:	490c      	ldr	r1, [pc, #48]	; (2174 <transition_complete+0x58>)
    2142:	480d      	ldr	r0, [pc, #52]	; (2178 <transition_complete+0x5c>)
    2144:	2381      	movs	r3, #129	; 0x81
    2146:	f005 fb86 	bl	7856 <printk>
    214a:	480c      	ldr	r0, [pc, #48]	; (217c <transition_complete+0x60>)
    214c:	4631      	mov	r1, r6
    214e:	f005 fb82 	bl	7856 <printk>
    2152:	4807      	ldr	r0, [pc, #28]	; (2170 <transition_complete+0x54>)
    2154:	2181      	movs	r1, #129	; 0x81
    2156:	f005 faaa 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    215a:	4630      	mov	r0, r6
    215c:	f004 fd58 	bl	6c10 <z_spin_lock_set_owner>
	mgr->last_res = res;
    2160:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    2162:	463a      	mov	r2, r7
    2164:	4620      	mov	r0, r4
    2166:	2101      	movs	r1, #1
}
    2168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    216c:	f7ff bddc 	b.w	1d28 <process_event>
    2170:	0000888c 	.word	0x0000888c
    2174:	000088de 	.word	0x000088de
    2178:	00008224 	.word	0x00008224
    217c:	000088f3 	.word	0x000088f3

00002180 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2184:	4604      	mov	r4, r0
    2186:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2188:	f005 fb41 	bl	780e <validate_args>

	if (rv < 0) {
    218c:	1e05      	subs	r5, r0, #0
    218e:	db5e      	blt.n	224e <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2190:	f104 0914 	add.w	r9, r4, #20
    2194:	f04f 0320 	mov.w	r3, #32
    2198:	f3ef 8a11 	mrs	sl, BASEPRI
    219c:	f383 8812 	msr	BASEPRI_MAX, r3
    21a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    21a4:	4648      	mov	r0, r9
    21a6:	f004 fd15 	bl	6bd4 <z_spin_lock_valid>
    21aa:	b968      	cbnz	r0, 21c8 <onoff_request+0x48>
    21ac:	4a38      	ldr	r2, [pc, #224]	; (2290 <onoff_request+0x110>)
    21ae:	4939      	ldr	r1, [pc, #228]	; (2294 <onoff_request+0x114>)
    21b0:	4839      	ldr	r0, [pc, #228]	; (2298 <onoff_request+0x118>)
    21b2:	2381      	movs	r3, #129	; 0x81
    21b4:	f005 fb4f 	bl	7856 <printk>
    21b8:	4838      	ldr	r0, [pc, #224]	; (229c <onoff_request+0x11c>)
    21ba:	4649      	mov	r1, r9
    21bc:	f005 fb4b 	bl	7856 <printk>
    21c0:	4833      	ldr	r0, [pc, #204]	; (2290 <onoff_request+0x110>)
    21c2:	2181      	movs	r1, #129	; 0x81
    21c4:	f005 fa73 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    21c8:	4648      	mov	r0, r9
    21ca:	f004 fd21 	bl	6c10 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    21ce:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    21d0:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    21d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    21d6:	428b      	cmp	r3, r1
    21d8:	f002 0607 	and.w	r6, r2, #7
    21dc:	d050      	beq.n	2280 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    21de:	2e02      	cmp	r6, #2
    21e0:	d124      	bne.n	222c <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    21e2:	3301      	adds	r3, #1
    21e4:	83e3      	strh	r3, [r4, #30]
	rv = state;
    21e6:	4635      	mov	r5, r6
		notify = true;
    21e8:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    21ec:	4648      	mov	r0, r9
    21ee:	f004 fcff 	bl	6bf0 <z_spin_unlock_valid>
    21f2:	b968      	cbnz	r0, 2210 <onoff_request+0x90>
    21f4:	4a26      	ldr	r2, [pc, #152]	; (2290 <onoff_request+0x110>)
    21f6:	492a      	ldr	r1, [pc, #168]	; (22a0 <onoff_request+0x120>)
    21f8:	4827      	ldr	r0, [pc, #156]	; (2298 <onoff_request+0x118>)
    21fa:	23ac      	movs	r3, #172	; 0xac
    21fc:	f005 fb2b 	bl	7856 <printk>
    2200:	4828      	ldr	r0, [pc, #160]	; (22a4 <onoff_request+0x124>)
    2202:	4649      	mov	r1, r9
    2204:	f005 fb27 	bl	7856 <printk>
    2208:	4821      	ldr	r0, [pc, #132]	; (2290 <onoff_request+0x110>)
    220a:	21ac      	movs	r1, #172	; 0xac
    220c:	f005 fa4f 	bl	76ae <assert_post_action>
	__asm__ volatile(
    2210:	f38a 8811 	msr	BASEPRI, sl
    2214:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    2218:	f1b8 0f00 	cmp.w	r8, #0
    221c:	d017      	beq.n	224e <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    221e:	2300      	movs	r3, #0
    2220:	4632      	mov	r2, r6
    2222:	4639      	mov	r1, r7
    2224:	4620      	mov	r0, r4
    2226:	f005 fadc 	bl	77e2 <notify_one>
    222a:	e010      	b.n	224e <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    222c:	0793      	lsls	r3, r2, #30
    222e:	d001      	beq.n	2234 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    2230:	2e06      	cmp	r6, #6
    2232:	d10f      	bne.n	2254 <onoff_request+0xd4>
	parent->next = child;
    2234:	2300      	movs	r3, #0
    2236:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    2238:	6863      	ldr	r3, [r4, #4]
    223a:	b9f3      	cbnz	r3, 227a <onoff_request+0xfa>
	list->head = node;
    223c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    2240:	4635      	mov	r5, r6
    2242:	b9fe      	cbnz	r6, 2284 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    2244:	4652      	mov	r2, sl
    2246:	2102      	movs	r1, #2
    2248:	4620      	mov	r0, r4
    224a:	f7ff fd6d 	bl	1d28 <process_event>
		}
	}

	return rv;
}
    224e:	4628      	mov	r0, r5
    2250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    2254:	2e05      	cmp	r6, #5
    2256:	d018      	beq.n	228a <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2258:	2e01      	cmp	r6, #1
    225a:	d00b      	beq.n	2274 <onoff_request+0xf4>
    225c:	4912      	ldr	r1, [pc, #72]	; (22a8 <onoff_request+0x128>)
    225e:	480e      	ldr	r0, [pc, #56]	; (2298 <onoff_request+0x118>)
    2260:	4a12      	ldr	r2, [pc, #72]	; (22ac <onoff_request+0x12c>)
    2262:	f240 13c9 	movw	r3, #457	; 0x1c9
    2266:	f005 faf6 	bl	7856 <printk>
    226a:	4810      	ldr	r0, [pc, #64]	; (22ac <onoff_request+0x12c>)
    226c:	f240 11c9 	movw	r1, #457	; 0x1c9
    2270:	f005 fa1d 	bl	76ae <assert_post_action>
		rv = -EIO;
    2274:	f06f 0504 	mvn.w	r5, #4
    2278:	e004      	b.n	2284 <onoff_request+0x104>
	parent->next = child;
    227a:	601f      	str	r7, [r3, #0]
	list->tail = node;
    227c:	6067      	str	r7, [r4, #4]
}
    227e:	e7df      	b.n	2240 <onoff_request+0xc0>
		rv = -EAGAIN;
    2280:	f06f 050a 	mvn.w	r5, #10
    2284:	f04f 0800 	mov.w	r8, #0
    2288:	e7b0      	b.n	21ec <onoff_request+0x6c>
		rv = -ENOTSUP;
    228a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    228e:	e7f9      	b.n	2284 <onoff_request+0x104>
    2290:	0000888c 	.word	0x0000888c
    2294:	000088de 	.word	0x000088de
    2298:	00008224 	.word	0x00008224
    229c:	000088f3 	.word	0x000088f3
    22a0:	000088b2 	.word	0x000088b2
    22a4:	000088c9 	.word	0x000088c9
    22a8:	00008876 	.word	0x00008876
    22ac:	000087e9 	.word	0x000087e9

000022b0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    22b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    22b4:	4605      	mov	r5, r0
	__asm__ volatile(
    22b6:	f04f 0320 	mov.w	r3, #32
    22ba:	f3ef 8611 	mrs	r6, BASEPRI
    22be:	f383 8812 	msr	BASEPRI_MAX, r3
    22c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    22c6:	4823      	ldr	r0, [pc, #140]	; (2354 <pm_state_notify+0xa4>)
    22c8:	f004 fc84 	bl	6bd4 <z_spin_lock_valid>
    22cc:	b968      	cbnz	r0, 22ea <pm_state_notify+0x3a>
    22ce:	4a22      	ldr	r2, [pc, #136]	; (2358 <pm_state_notify+0xa8>)
    22d0:	4922      	ldr	r1, [pc, #136]	; (235c <pm_state_notify+0xac>)
    22d2:	4823      	ldr	r0, [pc, #140]	; (2360 <pm_state_notify+0xb0>)
    22d4:	2381      	movs	r3, #129	; 0x81
    22d6:	f005 fabe 	bl	7856 <printk>
    22da:	491e      	ldr	r1, [pc, #120]	; (2354 <pm_state_notify+0xa4>)
    22dc:	4821      	ldr	r0, [pc, #132]	; (2364 <pm_state_notify+0xb4>)
    22de:	f005 faba 	bl	7856 <printk>
    22e2:	481d      	ldr	r0, [pc, #116]	; (2358 <pm_state_notify+0xa8>)
    22e4:	2181      	movs	r1, #129	; 0x81
    22e6:	f005 f9e2 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    22ea:	481a      	ldr	r0, [pc, #104]	; (2354 <pm_state_notify+0xa4>)
    22ec:	f004 fc90 	bl	6c10 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    22f0:	4b1d      	ldr	r3, [pc, #116]	; (2368 <pm_state_notify+0xb8>)
    22f2:	681c      	ldr	r4, [r3, #0]
    22f4:	2c00      	cmp	r4, #0
    22f6:	bf38      	it	cc
    22f8:	2400      	movcc	r4, #0
    22fa:	b19c      	cbz	r4, 2324 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    22fc:	4f1b      	ldr	r7, [pc, #108]	; (236c <pm_state_notify+0xbc>)
    22fe:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2378 <pm_state_notify+0xc8>
    2302:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2306:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    230a:	2d00      	cmp	r5, #0
    230c:	bf08      	it	eq
    230e:	4613      	moveq	r3, r2
		if (callback) {
    2310:	b12b      	cbz	r3, 231e <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    2312:	f898 2014 	ldrb.w	r2, [r8, #20]
    2316:	fb09 f202 	mul.w	r2, r9, r2
    231a:	5cb8      	ldrb	r0, [r7, r2]
    231c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    231e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2320:	2c00      	cmp	r4, #0
    2322:	d1f0      	bne.n	2306 <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2324:	480b      	ldr	r0, [pc, #44]	; (2354 <pm_state_notify+0xa4>)
    2326:	f004 fc63 	bl	6bf0 <z_spin_unlock_valid>
    232a:	b968      	cbnz	r0, 2348 <pm_state_notify+0x98>
    232c:	4a0a      	ldr	r2, [pc, #40]	; (2358 <pm_state_notify+0xa8>)
    232e:	4910      	ldr	r1, [pc, #64]	; (2370 <pm_state_notify+0xc0>)
    2330:	480b      	ldr	r0, [pc, #44]	; (2360 <pm_state_notify+0xb0>)
    2332:	23ac      	movs	r3, #172	; 0xac
    2334:	f005 fa8f 	bl	7856 <printk>
    2338:	4906      	ldr	r1, [pc, #24]	; (2354 <pm_state_notify+0xa4>)
    233a:	480e      	ldr	r0, [pc, #56]	; (2374 <pm_state_notify+0xc4>)
    233c:	f005 fa8b 	bl	7856 <printk>
    2340:	4805      	ldr	r0, [pc, #20]	; (2358 <pm_state_notify+0xa8>)
    2342:	21ac      	movs	r1, #172	; 0xac
    2344:	f005 f9b3 	bl	76ae <assert_post_action>
	__asm__ volatile(
    2348:	f386 8811 	msr	BASEPRI, r6
    234c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2354:	20000870 	.word	0x20000870
    2358:	0000888c 	.word	0x0000888c
    235c:	000088de 	.word	0x000088de
    2360:	00008224 	.word	0x00008224
    2364:	000088f3 	.word	0x000088f3
    2368:	20000874 	.word	0x20000874
    236c:	20000880 	.word	0x20000880
    2370:	000088b2 	.word	0x000088b2
    2374:	000088c9 	.word	0x000088c9
    2378:	200009e4 	.word	0x200009e4

0000237c <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    237c:	f000 031f 	and.w	r3, r0, #31
    2380:	2201      	movs	r2, #1
    2382:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2384:	4b0a      	ldr	r3, [pc, #40]	; (23b0 <atomic_test_and_set_bit.constprop.0+0x34>)
    2386:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    238a:	0940      	lsrs	r0, r0, #5
    238c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2390:	e850 3f00 	ldrex	r3, [r0]
    2394:	ea43 0102 	orr.w	r1, r3, r2
    2398:	e840 1c00 	strex	ip, r1, [r0]
    239c:	f1bc 0f00 	cmp.w	ip, #0
    23a0:	d1f6      	bne.n	2390 <atomic_test_and_set_bit.constprop.0+0x14>
    23a2:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    23a6:	421a      	tst	r2, r3
}
    23a8:	bf14      	ite	ne
    23aa:	2001      	movne	r0, #1
    23ac:	2000      	moveq	r0, #0
    23ae:	4770      	bx	lr
    23b0:	2000088c 	.word	0x2000088c

000023b4 <pm_system_resume>:

void pm_system_resume(void)
{
    23b4:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    23b6:	4b1d      	ldr	r3, [pc, #116]	; (242c <pm_system_resume+0x78>)
    23b8:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23ba:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    23be:	f005 031f 	and.w	r3, r5, #31
    23c2:	2201      	movs	r2, #1
    23c4:	409a      	lsls	r2, r3
    23c6:	4b1a      	ldr	r3, [pc, #104]	; (2430 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    23c8:	0969      	lsrs	r1, r5, #5
{
    23ca:	b085      	sub	sp, #20
    23cc:	43d0      	mvns	r0, r2
    23ce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    23d2:	e853 1f00 	ldrex	r1, [r3]
    23d6:	ea01 0400 	and.w	r4, r1, r0
    23da:	e843 4c00 	strex	ip, r4, [r3]
    23de:	f1bc 0f00 	cmp.w	ip, #0
    23e2:	d1f6      	bne.n	23d2 <pm_system_resume+0x1e>
    23e4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    23e8:	4211      	tst	r1, r2
    23ea:	d017      	beq.n	241c <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    23ec:	4c11      	ldr	r4, [pc, #68]	; (2434 <pm_system_resume+0x80>)
    23ee:	220c      	movs	r2, #12
    23f0:	fb02 4205 	mla	r2, r2, r5, r4
    23f4:	ca07      	ldmia	r2, {r0, r1, r2}
    23f6:	ab01      	add	r3, sp, #4
    23f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    23fc:	4a0e      	ldr	r2, [pc, #56]	; (2438 <pm_system_resume+0x84>)
    23fe:	b17a      	cbz	r2, 2420 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    2400:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2404:	f005 faa4 	bl	7950 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2408:	2000      	movs	r0, #0
    240a:	f7ff ff51 	bl	22b0 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    240e:	230c      	movs	r3, #12
    2410:	436b      	muls	r3, r5
    2412:	2200      	movs	r2, #0
    2414:	18e1      	adds	r1, r4, r3
    2416:	50e2      	str	r2, [r4, r3]
    2418:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    241c:	b005      	add	sp, #20
    241e:	bd30      	pop	{r4, r5, pc}
    2420:	f382 8811 	msr	BASEPRI, r2
    2424:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2428:	e7ee      	b.n	2408 <pm_system_resume+0x54>
    242a:	bf00      	nop
    242c:	200009e4 	.word	0x200009e4
    2430:	2000087c 	.word	0x2000087c
    2434:	20000880 	.word	0x20000880
    2438:	00007951 	.word	0x00007951

0000243c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    243c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2440:	4b37      	ldr	r3, [pc, #220]	; (2520 <pm_system_suspend+0xe4>)
    2442:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2538 <pm_system_suspend+0xfc>
    2446:	7d1c      	ldrb	r4, [r3, #20]
{
    2448:	b088      	sub	sp, #32
    244a:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    244c:	4620      	mov	r0, r4
    244e:	f7ff ff95 	bl	237c <atomic_test_and_set_bit.constprop.0>
    2452:	b960      	cbnz	r0, 246e <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2454:	466e      	mov	r6, sp
    2456:	463a      	mov	r2, r7
    2458:	4621      	mov	r1, r4
    245a:	4630      	mov	r0, r6
    245c:	f005 fa08 	bl	7870 <pm_policy_next_state>
    2460:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2464:	250c      	movs	r5, #12
    2466:	fb05 8504 	mla	r5, r5, r4, r8
    246a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    246e:	230c      	movs	r3, #12
    2470:	4363      	muls	r3, r4
    2472:	eb08 0203 	add.w	r2, r8, r3
    2476:	f818 0003 	ldrb.w	r0, [r8, r3]
    247a:	0965      	lsrs	r5, r4, #5
    247c:	f004 061f 	and.w	r6, r4, #31
    2480:	b3c8      	cbz	r0, 24f6 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2482:	1c7b      	adds	r3, r7, #1
    2484:	d00f      	beq.n	24a6 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2486:	f8d2 e008 	ldr.w	lr, [r2, #8]
    248a:	4826      	ldr	r0, [pc, #152]	; (2524 <pm_system_suspend+0xe8>)
    248c:	4a26      	ldr	r2, [pc, #152]	; (2528 <pm_system_suspend+0xec>)
    248e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    2492:	2100      	movs	r1, #0
    2494:	2300      	movs	r3, #0
    2496:	fbec 010e 	umlal	r0, r1, ip, lr
    249a:	f7fe faaf 	bl	9fc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    249e:	2101      	movs	r1, #1
    24a0:	1a38      	subs	r0, r7, r0
    24a2:	f004 fd77 	bl	6f94 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    24a6:	f003 f9c5 	bl	5834 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    24aa:	2001      	movs	r0, #1
    24ac:	f7ff ff00 	bl	22b0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    24b0:	f3bf 8f5b 	dmb	ish
    24b4:	4b1d      	ldr	r3, [pc, #116]	; (252c <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    24b6:	2201      	movs	r2, #1
    24b8:	40b2      	lsls	r2, r6
    24ba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    24be:	e853 1f00 	ldrex	r1, [r3]
    24c2:	4311      	orrs	r1, r2
    24c4:	e843 1000 	strex	r0, r1, [r3]
    24c8:	2800      	cmp	r0, #0
    24ca:	d1f8      	bne.n	24be <pm_system_suspend+0x82>
    24cc:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    24d0:	230c      	movs	r3, #12
    24d2:	fb03 8404 	mla	r4, r3, r4, r8
    24d6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    24da:	ab05      	add	r3, sp, #20
    24dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    24e0:	4a13      	ldr	r2, [pc, #76]	; (2530 <pm_system_suspend+0xf4>)
    24e2:	b11a      	cbz	r2, 24ec <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    24e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    24e8:	f005 fa1f 	bl	792a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    24ec:	f7ff ff62 	bl	23b4 <pm_system_resume>
	k_sched_unlock();
    24f0:	f003 fe98 	bl	6224 <k_sched_unlock>
	bool ret = true;
    24f4:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    24f6:	4a0f      	ldr	r2, [pc, #60]	; (2534 <pm_system_suspend+0xf8>)
    24f8:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    24fc:	2301      	movs	r3, #1
    24fe:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2500:	43db      	mvns	r3, r3
    2502:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2506:	e855 2f00 	ldrex	r2, [r5]
    250a:	401a      	ands	r2, r3
    250c:	e845 2100 	strex	r1, r2, [r5]
    2510:	2900      	cmp	r1, #0
    2512:	d1f8      	bne.n	2506 <pm_system_suspend+0xca>
    2514:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    2518:	b008      	add	sp, #32
    251a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    251e:	bf00      	nop
    2520:	200009e4 	.word	0x200009e4
    2524:	000f423f 	.word	0x000f423f
    2528:	000f4240 	.word	0x000f4240
    252c:	2000087c 	.word	0x2000087c
    2530:	0000792b 	.word	0x0000792b
    2534:	2000088c 	.word	0x2000088c
    2538:	20000880 	.word	0x20000880

0000253c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    253c:	680b      	ldr	r3, [r1, #0]
    253e:	3301      	adds	r3, #1
    2540:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2542:	4b01      	ldr	r3, [pc, #4]	; (2548 <char_out+0xc>)
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	4718      	bx	r3
    2548:	20000020 	.word	0x20000020

0000254c <__printk_hook_install>:
	_char_out = fn;
    254c:	4b01      	ldr	r3, [pc, #4]	; (2554 <__printk_hook_install+0x8>)
    254e:	6018      	str	r0, [r3, #0]
}
    2550:	4770      	bx	lr
    2552:	bf00      	nop
    2554:	20000020 	.word	0x20000020

00002558 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2558:	b507      	push	{r0, r1, r2, lr}
    255a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    255c:	2100      	movs	r1, #0
{
    255e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    2560:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2562:	4803      	ldr	r0, [pc, #12]	; (2570 <vprintk+0x18>)
    2564:	a901      	add	r1, sp, #4
    2566:	f7fe ff35 	bl	13d4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    256a:	b003      	add	sp, #12
    256c:	f85d fb04 	ldr.w	pc, [sp], #4
    2570:	0000253d 	.word	0x0000253d

00002574 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2574:	b508      	push	{r3, lr}
	__asm__ volatile(
    2576:	f04f 0220 	mov.w	r2, #32
    257a:	f3ef 8311 	mrs	r3, BASEPRI
    257e:	f382 8812 	msr	BASEPRI_MAX, r2
    2582:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2586:	f000 fca1 	bl	2ecc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    258a:	4803      	ldr	r0, [pc, #12]	; (2598 <sys_reboot+0x24>)
    258c:	f005 f963 	bl	7856 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2590:	f000 f80a 	bl	25a8 <arch_cpu_idle>
    2594:	e7fc      	b.n	2590 <sys_reboot+0x1c>
    2596:	bf00      	nop
    2598:	0000890b 	.word	0x0000890b

0000259c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    259c:	4901      	ldr	r1, [pc, #4]	; (25a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    259e:	2210      	movs	r2, #16
	str	r2, [r1]
    25a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    25a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    25a4:	e000ed10 	.word	0xe000ed10

000025a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    25a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    25aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    25ac:	f380 8811 	msr	BASEPRI, r0
	isb
    25b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    25b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    25b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    25ba:	b662      	cpsie	i
	isb
    25bc:	f3bf 8f6f 	isb	sy

	bx	lr
    25c0:	4770      	bx	lr
    25c2:	bf00      	nop

000025c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    25c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    25c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    25c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    25cc:	bf20      	wfe

	msr	BASEPRI, r0
    25ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    25d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    25d4:	4770      	bx	lr
    25d6:	bf00      	nop

000025d8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    25d8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    25da:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    25dc:	4a0b      	ldr	r2, [pc, #44]	; (260c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    25de:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    25e0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    25e2:	bf1e      	ittt	ne
	movne	r1, #0
    25e4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    25e6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    25e8:	f005 fb60 	blne	7cac <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    25ec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    25ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    25f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    25f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    25fa:	4905      	ldr	r1, [pc, #20]	; (2610 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    25fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    25fe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2600:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2602:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2606:	4903      	ldr	r1, [pc, #12]	; (2614 <_isr_wrapper+0x3c>)
	bx r1
    2608:	4708      	bx	r1
    260a:	0000      	.short	0x0000
	ldr r2, =_kernel
    260c:	200009e4 	.word	0x200009e4
	ldr r1, =_sw_isr_table
    2610:	00007e44 	.word	0x00007e44
	ldr r1, =z_arm_int_exit
    2614:	0000283d 	.word	0x0000283d

00002618 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2618:	bf30      	wfi
    b z_SysNmiOnReset
    261a:	f7ff bffd 	b.w	2618 <z_SysNmiOnReset>
    261e:	bf00      	nop

00002620 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2620:	4912      	ldr	r1, [pc, #72]	; (266c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2622:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2624:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2628:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    262a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    262e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2632:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2634:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2638:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    263c:	4f0c      	ldr	r7, [pc, #48]	; (2670 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    263e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2642:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2644:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2646:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2648:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    264a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    264c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    264e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2652:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2654:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2656:	f000 fae7 	bl	2c28 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    265a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    265e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2662:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2666:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    266a:	4770      	bx	lr
    ldr r1, =_kernel
    266c:	200009e4 	.word	0x200009e4
    ldr v4, =_SCS_ICSR
    2670:	e000ed04 	.word	0xe000ed04

00002674 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2674:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2678:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    267a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    267e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2682:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2684:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2688:	2902      	cmp	r1, #2
    beq _oops
    268a:	d0ff      	beq.n	268c <_oops>

0000268c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    268c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    268e:	f005 f900 	bl	7892 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2692:	bd01      	pop	{r0, pc}

00002694 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2694:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2696:	2b00      	cmp	r3, #0
    2698:	db08      	blt.n	26ac <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    269a:	2201      	movs	r2, #1
    269c:	f000 001f 	and.w	r0, r0, #31
    26a0:	fa02 f000 	lsl.w	r0, r2, r0
    26a4:	095b      	lsrs	r3, r3, #5
    26a6:	4a02      	ldr	r2, [pc, #8]	; (26b0 <arch_irq_enable+0x1c>)
    26a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    26ac:	4770      	bx	lr
    26ae:	bf00      	nop
    26b0:	e000e100 	.word	0xe000e100

000026b4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    26b4:	4b05      	ldr	r3, [pc, #20]	; (26cc <arch_irq_is_enabled+0x18>)
    26b6:	0942      	lsrs	r2, r0, #5
    26b8:	f000 001f 	and.w	r0, r0, #31
    26bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    26c0:	2301      	movs	r3, #1
    26c2:	fa03 f000 	lsl.w	r0, r3, r0
}
    26c6:	4010      	ands	r0, r2
    26c8:	4770      	bx	lr
    26ca:	bf00      	nop
    26cc:	e000e100 	.word	0xe000e100

000026d0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    26d0:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    26d2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    26d4:	2c07      	cmp	r4, #7
{
    26d6:	4605      	mov	r5, r0
    26d8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    26da:	d90f      	bls.n	26fc <z_arm_irq_priority_set+0x2c>
    26dc:	4a11      	ldr	r2, [pc, #68]	; (2724 <z_arm_irq_priority_set+0x54>)
    26de:	4912      	ldr	r1, [pc, #72]	; (2728 <z_arm_irq_priority_set+0x58>)
    26e0:	4812      	ldr	r0, [pc, #72]	; (272c <z_arm_irq_priority_set+0x5c>)
    26e2:	2359      	movs	r3, #89	; 0x59
    26e4:	f005 f8b7 	bl	7856 <printk>
    26e8:	4811      	ldr	r0, [pc, #68]	; (2730 <z_arm_irq_priority_set+0x60>)
    26ea:	4631      	mov	r1, r6
    26ec:	2307      	movs	r3, #7
    26ee:	462a      	mov	r2, r5
    26f0:	f005 f8b1 	bl	7856 <printk>
    26f4:	480b      	ldr	r0, [pc, #44]	; (2724 <z_arm_irq_priority_set+0x54>)
    26f6:	2159      	movs	r1, #89	; 0x59
    26f8:	f004 ffd9 	bl	76ae <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    26fc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    26fe:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2700:	bfac      	ite	ge
    2702:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2706:	4b0b      	ldrlt	r3, [pc, #44]	; (2734 <z_arm_irq_priority_set+0x64>)
    2708:	ea4f 1444 	mov.w	r4, r4, lsl #5
    270c:	bfb8      	it	lt
    270e:	f005 050f 	andlt.w	r5, r5, #15
    2712:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2714:	bfaa      	itet	ge
    2716:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    271a:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    271c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    2720:	bd70      	pop	{r4, r5, r6, pc}
    2722:	bf00      	nop
    2724:	00008934 	.word	0x00008934
    2728:	0000896a 	.word	0x0000896a
    272c:	00008224 	.word	0x00008224
    2730:	00008985 	.word	0x00008985
    2734:	e000ed14 	.word	0xe000ed14

00002738 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2738:	4a0b      	ldr	r2, [pc, #44]	; (2768 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    273a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    273c:	4b0b      	ldr	r3, [pc, #44]	; (276c <z_arm_prep_c+0x34>)
    273e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2742:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2744:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2748:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    274c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2750:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2758:	f002 fc5c 	bl	5014 <z_bss_zero>
	z_data_copy();
    275c:	f004 fd86 	bl	726c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2760:	f000 f9f6 	bl	2b50 <z_arm_interrupt_init>
	z_cstart();
    2764:	f002 fc60 	bl	5028 <z_cstart>
    2768:	00000000 	.word	0x00000000
    276c:	e000ed00 	.word	0xe000ed00

00002770 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2770:	4a09      	ldr	r2, [pc, #36]	; (2798 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2772:	490a      	ldr	r1, [pc, #40]	; (279c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2774:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2776:	6809      	ldr	r1, [r1, #0]
    2778:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    277a:	4909      	ldr	r1, [pc, #36]	; (27a0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    277c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    277e:	684b      	ldr	r3, [r1, #4]
    2780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2784:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2786:	2300      	movs	r3, #0
    2788:	f383 8811 	msr	BASEPRI, r3
    278c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2790:	6893      	ldr	r3, [r2, #8]
}
    2792:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2794:	4770      	bx	lr
    2796:	bf00      	nop
    2798:	200009e4 	.word	0x200009e4
    279c:	00008130 	.word	0x00008130
    27a0:	e000ed00 	.word	0xe000ed00

000027a4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    27a4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    27a8:	9b00      	ldr	r3, [sp, #0]
    27aa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    27ae:	490a      	ldr	r1, [pc, #40]	; (27d8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    27b0:	9b01      	ldr	r3, [sp, #4]
    27b2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    27b6:	9b02      	ldr	r3, [sp, #8]
    27b8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    27bc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    27c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    27c4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    27c8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    27cc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    27ce:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    27d0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    27d2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    27d4:	4770      	bx	lr
    27d6:	bf00      	nop
    27d8:	0000787b 	.word	0x0000787b

000027dc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    27dc:	4a0b      	ldr	r2, [pc, #44]	; (280c <z_check_thread_stack_fail+0x30>)
{
    27de:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    27e0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    27e2:	b190      	cbz	r0, 280a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    27e4:	f113 0f16 	cmn.w	r3, #22
    27e8:	6e40      	ldr	r0, [r0, #100]	; 0x64
    27ea:	d005      	beq.n	27f8 <z_check_thread_stack_fail+0x1c>
    27ec:	f1a0 0220 	sub.w	r2, r0, #32
    27f0:	429a      	cmp	r2, r3
    27f2:	d806      	bhi.n	2802 <z_check_thread_stack_fail+0x26>
    27f4:	4283      	cmp	r3, r0
    27f6:	d204      	bcs.n	2802 <z_check_thread_stack_fail+0x26>
    27f8:	4281      	cmp	r1, r0
    27fa:	bf2c      	ite	cs
    27fc:	2100      	movcs	r1, #0
    27fe:	2101      	movcc	r1, #1
    2800:	e000      	b.n	2804 <z_check_thread_stack_fail+0x28>
    2802:	2100      	movs	r1, #0
    2804:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2806:	bf08      	it	eq
    2808:	2000      	moveq	r0, #0
}
    280a:	4770      	bx	lr
    280c:	200009e4 	.word	0x200009e4

00002810 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2810:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2812:	4b09      	ldr	r3, [pc, #36]	; (2838 <arch_switch_to_main_thread+0x28>)
    2814:	6098      	str	r0, [r3, #8]
{
    2816:	460d      	mov	r5, r1
    2818:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    281a:	f000 fa05 	bl	2c28 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    281e:	4620      	mov	r0, r4
    2820:	f385 8809 	msr	PSP, r5
    2824:	2100      	movs	r1, #0
    2826:	b663      	cpsie	if
    2828:	f381 8811 	msr	BASEPRI, r1
    282c:	f3bf 8f6f 	isb	sy
    2830:	2200      	movs	r2, #0
    2832:	2300      	movs	r3, #0
    2834:	f005 f821 	bl	787a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2838:	200009e4 	.word	0x200009e4

0000283c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    283c:	4b04      	ldr	r3, [pc, #16]	; (2850 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    283e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2840:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2842:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2844:	d003      	beq.n	284e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2846:	4903      	ldr	r1, [pc, #12]	; (2854 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    284c:	600a      	str	r2, [r1, #0]

0000284e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    284e:	4770      	bx	lr
	ldr r3, =_kernel
    2850:	200009e4 	.word	0x200009e4
	ldr r1, =_SCS_ICSR
    2854:	e000ed04 	.word	0xe000ed04

00002858 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2858:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    285c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2860:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2862:	4672      	mov	r2, lr
	bl z_arm_fault
    2864:	f000 f8ae 	bl	29c4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2868:	bd01      	pop	{r0, pc}
    286a:	bf00      	nop

0000286c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    286c:	2000      	movs	r0, #0
    msr CONTROL, r0
    286e:	f380 8814 	msr	CONTROL, r0
    isb
    2872:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2876:	f005 fa73 	bl	7d60 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    287a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    287c:	490d      	ldr	r1, [pc, #52]	; (28b4 <__start+0x48>)
    str r0, [r1]
    287e:	6008      	str	r0, [r1, #0]
    dsb
    2880:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2884:	480c      	ldr	r0, [pc, #48]	; (28b8 <__start+0x4c>)
    msr msp, r0
    2886:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    288a:	f000 f97d 	bl	2b88 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    288e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2890:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2894:	4809      	ldr	r0, [pc, #36]	; (28bc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2896:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    289a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    289c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    28a0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    28a4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    28a6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    28a8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    28ac:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    28b0:	f7ff ff42 	bl	2738 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    28b4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    28b8:	20001420 	.word	0x20001420
    ldr r0, =z_interrupt_stacks
    28bc:	200015a0 	.word	0x200015a0

000028c0 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    28c0:	4b23      	ldr	r3, [pc, #140]	; (2950 <mem_manage_fault+0x90>)
{
    28c2:	b570      	push	{r4, r5, r6, lr}
    28c4:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    28c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    28c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    28ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    28cc:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    28ce:	0790      	lsls	r0, r2, #30
    28d0:	d51a      	bpl.n	2908 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    28d2:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    28d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    28d6:	0612      	lsls	r2, r2, #24
    28d8:	d516      	bpl.n	2908 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    28da:	b119      	cbz	r1, 28e4 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    28dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    28de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    28e2:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    28e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    28e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    28e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    28ea:	06d6      	lsls	r6, r2, #27
    28ec:	d40f      	bmi.n	290e <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    28ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    28f0:	0799      	lsls	r1, r3, #30
    28f2:	d40c      	bmi.n	290e <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    28f4:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    28f6:	4a16      	ldr	r2, [pc, #88]	; (2950 <mem_manage_fault+0x90>)
    28f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    28fa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    28fe:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2900:	2300      	movs	r3, #0
    2902:	702b      	strb	r3, [r5, #0]

	return reason;
}
    2904:	4620      	mov	r0, r4
    2906:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    2908:	f06f 0015 	mvn.w	r0, #21
    290c:	e7ea      	b.n	28e4 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    290e:	4e10      	ldr	r6, [pc, #64]	; (2950 <mem_manage_fault+0x90>)
    2910:	6873      	ldr	r3, [r6, #4]
    2912:	051a      	lsls	r2, r3, #20
    2914:	d5ee      	bpl.n	28f4 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2916:	4621      	mov	r1, r4
    2918:	f7ff ff60 	bl	27dc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    291c:	4604      	mov	r4, r0
    291e:	b118      	cbz	r0, 2928 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2920:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2924:	2402      	movs	r4, #2
    2926:	e7e6      	b.n	28f6 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    2928:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    292a:	06db      	lsls	r3, r3, #27
    292c:	d5e2      	bpl.n	28f4 <mem_manage_fault+0x34>
    292e:	4a09      	ldr	r2, [pc, #36]	; (2954 <mem_manage_fault+0x94>)
    2930:	4909      	ldr	r1, [pc, #36]	; (2958 <mem_manage_fault+0x98>)
    2932:	480a      	ldr	r0, [pc, #40]	; (295c <mem_manage_fault+0x9c>)
    2934:	f240 1349 	movw	r3, #329	; 0x149
    2938:	f004 ff8d 	bl	7856 <printk>
    293c:	4808      	ldr	r0, [pc, #32]	; (2960 <mem_manage_fault+0xa0>)
    293e:	f004 ff8a 	bl	7856 <printk>
    2942:	4804      	ldr	r0, [pc, #16]	; (2954 <mem_manage_fault+0x94>)
    2944:	f240 1149 	movw	r1, #329	; 0x149
    2948:	f004 feb1 	bl	76ae <assert_post_action>
    294c:	e7d3      	b.n	28f6 <mem_manage_fault+0x36>
    294e:	bf00      	nop
    2950:	e000ed00 	.word	0xe000ed00
    2954:	000089c5 	.word	0x000089c5
    2958:	000089ff 	.word	0x000089ff
    295c:	00008224 	.word	0x00008224
    2960:	00008a49 	.word	0x00008a49

00002964 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2964:	4b0d      	ldr	r3, [pc, #52]	; (299c <bus_fault.isra.0+0x38>)
    2966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    296a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    296c:	0592      	lsls	r2, r2, #22
    296e:	d508      	bpl.n	2982 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2970:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2974:	0412      	lsls	r2, r2, #16
    2976:	d504      	bpl.n	2982 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2978:	b118      	cbz	r0, 2982 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    297a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    297c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2980:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2982:	4b06      	ldr	r3, [pc, #24]	; (299c <bus_fault.isra.0+0x38>)
    2984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2988:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    298a:	bf58      	it	pl
    298c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    298e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2990:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2992:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    2996:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2998:	7008      	strb	r0, [r1, #0]

	return reason;
}
    299a:	4770      	bx	lr
    299c:	e000ed00 	.word	0xe000ed00

000029a0 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    29a0:	4b07      	ldr	r3, [pc, #28]	; (29c0 <usage_fault.isra.0+0x20>)
    29a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    29a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    29a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    29a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    29aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    29ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    29ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    29b0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    29b4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    29b8:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    29ba:	2000      	movs	r0, #0
    29bc:	4770      	bx	lr
    29be:	bf00      	nop
    29c0:	e000ed00 	.word	0xe000ed00

000029c4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    29c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    29c6:	4b54      	ldr	r3, [pc, #336]	; (2b18 <z_arm_fault+0x154>)
    29c8:	685c      	ldr	r4, [r3, #4]
{
    29ca:	b08a      	sub	sp, #40	; 0x28
    29cc:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    29ce:	f3c4 0408 	ubfx	r4, r4, #0, #9
    29d2:	2600      	movs	r6, #0
    29d4:	f386 8811 	msr	BASEPRI, r6
    29d8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    29dc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    29e0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    29e4:	d108      	bne.n	29f8 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    29e6:	f002 030c 	and.w	r3, r2, #12
    29ea:	2b08      	cmp	r3, #8
    29ec:	d004      	beq.n	29f8 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    29ee:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    29f0:	bf5c      	itt	pl
    29f2:	4605      	movpl	r5, r0
			*nested_exc = true;
    29f4:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    29f6:	b97d      	cbnz	r5, 2a18 <z_arm_fault+0x54>
    29f8:	4a48      	ldr	r2, [pc, #288]	; (2b1c <z_arm_fault+0x158>)
    29fa:	4949      	ldr	r1, [pc, #292]	; (2b20 <z_arm_fault+0x15c>)
    29fc:	4849      	ldr	r0, [pc, #292]	; (2b24 <z_arm_fault+0x160>)
    29fe:	f240 33f2 	movw	r3, #1010	; 0x3f2
    2a02:	f004 ff28 	bl	7856 <printk>
    2a06:	4848      	ldr	r0, [pc, #288]	; (2b28 <z_arm_fault+0x164>)
    2a08:	f004 ff25 	bl	7856 <printk>
    2a0c:	4843      	ldr	r0, [pc, #268]	; (2b1c <z_arm_fault+0x158>)
    2a0e:	f240 31f2 	movw	r1, #1010	; 0x3f2
    2a12:	f004 fe4c 	bl	76ae <assert_post_action>
    2a16:	2500      	movs	r5, #0
	*recoverable = false;
    2a18:	2300      	movs	r3, #0
    2a1a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2a1e:	1ee3      	subs	r3, r4, #3
    2a20:	2b03      	cmp	r3, #3
    2a22:	d872      	bhi.n	2b0a <z_arm_fault+0x146>
    2a24:	e8df f003 	tbb	[pc, r3]
    2a28:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2a2c:	4b3a      	ldr	r3, [pc, #232]	; (2b18 <z_arm_fault+0x154>)
    2a2e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2a30:	f014 0402 	ands.w	r4, r4, #2
    2a34:	d169      	bne.n	2b0a <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2a38:	2a00      	cmp	r2, #0
    2a3a:	db18      	blt.n	2a6e <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a3e:	005b      	lsls	r3, r3, #1
    2a40:	d54e      	bpl.n	2ae0 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    2a42:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2a44:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2a48:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2a4c:	429a      	cmp	r2, r3
    2a4e:	d00d      	beq.n	2a6c <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    2a50:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2a54:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2a58:	781b      	ldrb	r3, [r3, #0]
    2a5a:	b30b      	cbz	r3, 2aa0 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2a5c:	f10d 0207 	add.w	r2, sp, #7
    2a60:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2a62:	4628      	mov	r0, r5
    2a64:	f7ff ff2c 	bl	28c0 <mem_manage_fault>
		reason = usage_fault(esf);
    2a68:	4604      	mov	r4, r0
		break;
    2a6a:	e000      	b.n	2a6e <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    2a6c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2a6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2a72:	b99b      	cbnz	r3, 2a9c <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2a74:	2220      	movs	r2, #32
    2a76:	4629      	mov	r1, r5
    2a78:	a802      	add	r0, sp, #8
    2a7a:	f004 ff42 	bl	7902 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a80:	2e00      	cmp	r6, #0
    2a82:	d044      	beq.n	2b0e <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2a88:	b922      	cbnz	r2, 2a94 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2a8a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2a8e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2a92:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2a94:	a902      	add	r1, sp, #8
    2a96:	4620      	mov	r0, r4
    2a98:	f004 fef9 	bl	788e <z_arm_fatal_error>
}
    2a9c:	b00a      	add	sp, #40	; 0x28
    2a9e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2aa0:	4b22      	ldr	r3, [pc, #136]	; (2b2c <z_arm_fault+0x168>)
    2aa2:	781b      	ldrb	r3, [r3, #0]
    2aa4:	b12b      	cbz	r3, 2ab2 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    2aa6:	f10d 0107 	add.w	r1, sp, #7
    2aaa:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2aac:	f7ff ff5a 	bl	2964 <bus_fault.isra.0>
    2ab0:	e7da      	b.n	2a68 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    2ab2:	4b1f      	ldr	r3, [pc, #124]	; (2b30 <z_arm_fault+0x16c>)
    2ab4:	881b      	ldrh	r3, [r3, #0]
    2ab6:	b29b      	uxth	r3, r3
    2ab8:	b113      	cbz	r3, 2ac0 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    2aba:	f7ff ff71 	bl	29a0 <usage_fault.isra.0>
    2abe:	e7d3      	b.n	2a68 <z_arm_fault+0xa4>
			__ASSERT(0,
    2ac0:	491c      	ldr	r1, [pc, #112]	; (2b34 <z_arm_fault+0x170>)
    2ac2:	4a16      	ldr	r2, [pc, #88]	; (2b1c <z_arm_fault+0x158>)
    2ac4:	4817      	ldr	r0, [pc, #92]	; (2b24 <z_arm_fault+0x160>)
    2ac6:	f240 23c3 	movw	r3, #707	; 0x2c3
    2aca:	f004 fec4 	bl	7856 <printk>
    2ace:	481a      	ldr	r0, [pc, #104]	; (2b38 <z_arm_fault+0x174>)
    2ad0:	f004 fec1 	bl	7856 <printk>
    2ad4:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    2ad8:	4810      	ldr	r0, [pc, #64]	; (2b1c <z_arm_fault+0x158>)
    2ada:	f004 fde8 	bl	76ae <assert_post_action>
    2ade:	e7c6      	b.n	2a6e <z_arm_fault+0xaa>
    2ae0:	4914      	ldr	r1, [pc, #80]	; (2b34 <z_arm_fault+0x170>)
    2ae2:	4a0e      	ldr	r2, [pc, #56]	; (2b1c <z_arm_fault+0x158>)
    2ae4:	480f      	ldr	r0, [pc, #60]	; (2b24 <z_arm_fault+0x160>)
    2ae6:	f240 23c7 	movw	r3, #711	; 0x2c7
    2aea:	f004 feb4 	bl	7856 <printk>
    2aee:	4813      	ldr	r0, [pc, #76]	; (2b3c <z_arm_fault+0x178>)
    2af0:	f004 feb1 	bl	7856 <printk>
    2af4:	f240 21c7 	movw	r1, #711	; 0x2c7
    2af8:	e7ee      	b.n	2ad8 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    2afa:	f10d 0207 	add.w	r2, sp, #7
    2afe:	2100      	movs	r1, #0
    2b00:	e7af      	b.n	2a62 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    2b02:	f10d 0107 	add.w	r1, sp, #7
    2b06:	2000      	movs	r0, #0
    2b08:	e7d0      	b.n	2aac <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2b0a:	2400      	movs	r4, #0
    2b0c:	e7af      	b.n	2a6e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2b0e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2b12:	f023 0301 	bic.w	r3, r3, #1
    2b16:	e7bc      	b.n	2a92 <z_arm_fault+0xce>
    2b18:	e000ed00 	.word	0xe000ed00
    2b1c:	000089c5 	.word	0x000089c5
    2b20:	00008a6c 	.word	0x00008a6c
    2b24:	00008224 	.word	0x00008224
    2b28:	00008a7f 	.word	0x00008a7f
    2b2c:	e000ed29 	.word	0xe000ed29
    2b30:	e000ed2a 	.word	0xe000ed2a
    2b34:	00008874 	.word	0x00008874
    2b38:	00008abd 	.word	0x00008abd
    2b3c:	00008ae1 	.word	0x00008ae1

00002b40 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2b40:	4a02      	ldr	r2, [pc, #8]	; (2b4c <z_arm_fault_init+0xc>)
    2b42:	6953      	ldr	r3, [r2, #20]
    2b44:	f043 0310 	orr.w	r3, r3, #16
    2b48:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2b4a:	4770      	bx	lr
    2b4c:	e000ed00 	.word	0xe000ed00

00002b50 <z_arm_interrupt_init>:
    2b50:	4804      	ldr	r0, [pc, #16]	; (2b64 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2b52:	2300      	movs	r3, #0
    2b54:	2120      	movs	r1, #32
    2b56:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2b58:	3301      	adds	r3, #1
    2b5a:	2b30      	cmp	r3, #48	; 0x30
    2b5c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2b60:	d1f9      	bne.n	2b56 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2b62:	4770      	bx	lr
    2b64:	e000e100 	.word	0xe000e100

00002b68 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2b68:	4a06      	ldr	r2, [pc, #24]	; (2b84 <z_arm_clear_arm_mpu_config+0x1c>)
    2b6a:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2b6c:	2300      	movs	r3, #0
	int num_regions =
    2b6e:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2b72:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2b74:	428b      	cmp	r3, r1
    2b76:	d100      	bne.n	2b7a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2b78:	4770      	bx	lr
  MPU->RNR = rnr;
    2b7a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2b7c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2b7e:	3301      	adds	r3, #1
    2b80:	e7f8      	b.n	2b74 <z_arm_clear_arm_mpu_config+0xc>
    2b82:	bf00      	nop
    2b84:	e000ed90 	.word	0xe000ed90

00002b88 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2b88:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2b8a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2b8c:	2300      	movs	r3, #0
    2b8e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2b92:	f7ff ffe9 	bl	2b68 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2b96:	4b14      	ldr	r3, [pc, #80]	; (2be8 <z_arm_init_arch_hw_at_boot+0x60>)
    2b98:	f04f 32ff 	mov.w	r2, #4294967295
    2b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2bac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2bb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2bb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2bb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2bbc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2bc0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2bc4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2bc8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2bcc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2bd0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2bd4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2bd8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2bdc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2bde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2be2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2be6:	bd08      	pop	{r3, pc}
    2be8:	e000e100 	.word	0xe000e100

00002bec <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2bec:	4b06      	ldr	r3, [pc, #24]	; (2c08 <z_impl_k_thread_abort+0x1c>)
    2bee:	689b      	ldr	r3, [r3, #8]
    2bf0:	4283      	cmp	r3, r0
    2bf2:	d107      	bne.n	2c04 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2bf4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2bf8:	b123      	cbz	r3, 2c04 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2bfa:	4a04      	ldr	r2, [pc, #16]	; (2c0c <z_impl_k_thread_abort+0x20>)
    2bfc:	6853      	ldr	r3, [r2, #4]
    2bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2c02:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2c04:	f003 bd76 	b.w	66f4 <z_thread_abort>
    2c08:	200009e4 	.word	0x200009e4
    2c0c:	e000ed00 	.word	0xe000ed00

00002c10 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2c10:	4b02      	ldr	r3, [pc, #8]	; (2c1c <z_arm_configure_static_mpu_regions+0xc>)
    2c12:	4a03      	ldr	r2, [pc, #12]	; (2c20 <z_arm_configure_static_mpu_regions+0x10>)
    2c14:	4803      	ldr	r0, [pc, #12]	; (2c24 <z_arm_configure_static_mpu_regions+0x14>)
    2c16:	2101      	movs	r1, #1
    2c18:	f000 b868 	b.w	2cec <arm_core_mpu_configure_static_mpu_regions>
    2c1c:	20040000 	.word	0x20040000
    2c20:	20000000 	.word	0x20000000
    2c24:	00008024 	.word	0x00008024

00002c28 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2c28:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2c2a:	4b05      	ldr	r3, [pc, #20]	; (2c40 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2c2c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2c2e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2c30:	4a04      	ldr	r2, [pc, #16]	; (2c44 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2c32:	2120      	movs	r1, #32
    2c34:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2c38:	4618      	mov	r0, r3
    2c3a:	2101      	movs	r1, #1
    2c3c:	f000 b87e 	b.w	2d3c <arm_core_mpu_configure_dynamic_mpu_regions>
    2c40:	20000890 	.word	0x20000890
    2c44:	150b0000 	.word	0x150b0000

00002c48 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2c48:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2c4a:	4f1e      	ldr	r7, [pc, #120]	; (2cc4 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2c4c:	2600      	movs	r6, #0
    2c4e:	428e      	cmp	r6, r1
    2c50:	db01      	blt.n	2c56 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2c52:	4610      	mov	r0, r2
    2c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    2c56:	6844      	ldr	r4, [r0, #4]
    2c58:	b384      	cbz	r4, 2cbc <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    2c5a:	b153      	cbz	r3, 2c72 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2c5c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2c60:	ea14 0f0c 	tst.w	r4, ip
    2c64:	d118      	bne.n	2c98 <mpu_configure_regions+0x50>
		&&
    2c66:	2c1f      	cmp	r4, #31
    2c68:	d916      	bls.n	2c98 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    2c6a:	6805      	ldr	r5, [r0, #0]
		&&
    2c6c:	ea1c 0f05 	tst.w	ip, r5
    2c70:	d112      	bne.n	2c98 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2c72:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2c74:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2c76:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2c7a:	b2d2      	uxtb	r2, r2
    2c7c:	d90f      	bls.n	2c9e <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    2c7e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2c82:	d80e      	bhi.n	2ca2 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2c84:	3c01      	subs	r4, #1
    2c86:	fab4 f484 	clz	r4, r4
    2c8a:	f1c4 041f 	rsb	r4, r4, #31
    2c8e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2c90:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2c92:	ea4c 0404 	orr.w	r4, ip, r4
    2c96:	d906      	bls.n	2ca6 <mpu_configure_regions+0x5e>
			return -EINVAL;
    2c98:	f06f 0215 	mvn.w	r2, #21
    2c9c:	e7d9      	b.n	2c52 <mpu_configure_regions+0xa>
		return REGION_32B;
    2c9e:	2408      	movs	r4, #8
    2ca0:	e7f6      	b.n	2c90 <mpu_configure_regions+0x48>
		return REGION_4G;
    2ca2:	243e      	movs	r4, #62	; 0x3e
    2ca4:	e7f4      	b.n	2c90 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2ca6:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2caa:	4315      	orrs	r5, r2
    2cac:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2cb0:	f044 0401 	orr.w	r4, r4, #1
    2cb4:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2cb6:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2cb8:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2cba:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2cbc:	3601      	adds	r6, #1
    2cbe:	300c      	adds	r0, #12
    2cc0:	e7c5      	b.n	2c4e <mpu_configure_regions+0x6>
    2cc2:	bf00      	nop
    2cc4:	e000ed90 	.word	0xe000ed90

00002cc8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2cc8:	4b03      	ldr	r3, [pc, #12]	; (2cd8 <arm_core_mpu_enable+0x10>)
    2cca:	2205      	movs	r2, #5
    2ccc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2cce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cd2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2cd6:	4770      	bx	lr
    2cd8:	e000ed90 	.word	0xe000ed90

00002cdc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2cdc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2ce0:	4b01      	ldr	r3, [pc, #4]	; (2ce8 <arm_core_mpu_disable+0xc>)
    2ce2:	2200      	movs	r2, #0
    2ce4:	605a      	str	r2, [r3, #4]
}
    2ce6:	4770      	bx	lr
    2ce8:	e000ed90 	.word	0xe000ed90

00002cec <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2cec:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2cee:	4d0e      	ldr	r5, [pc, #56]	; (2d28 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2cf0:	2301      	movs	r3, #1
    2cf2:	782a      	ldrb	r2, [r5, #0]
    2cf4:	460c      	mov	r4, r1
    2cf6:	f7ff ffa7 	bl	2c48 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2cfa:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2cfc:	3016      	adds	r0, #22
    2cfe:	d111      	bne.n	2d24 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2d00:	f240 1311 	movw	r3, #273	; 0x111
    2d04:	4a09      	ldr	r2, [pc, #36]	; (2d2c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2d06:	490a      	ldr	r1, [pc, #40]	; (2d30 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2d08:	480a      	ldr	r0, [pc, #40]	; (2d34 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2d0a:	f004 fda4 	bl	7856 <printk>
    2d0e:	4621      	mov	r1, r4
    2d10:	4809      	ldr	r0, [pc, #36]	; (2d38 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    2d12:	f004 fda0 	bl	7856 <printk>
			regions_num);
	}
}
    2d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2d1a:	4804      	ldr	r0, [pc, #16]	; (2d2c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2d1c:	f240 1111 	movw	r1, #273	; 0x111
    2d20:	f004 bcc5 	b.w	76ae <assert_post_action>
}
    2d24:	bd38      	pop	{r3, r4, r5, pc}
    2d26:	bf00      	nop
    2d28:	20000a44 	.word	0x20000a44
    2d2c:	00008b11 	.word	0x00008b11
    2d30:	00008874 	.word	0x00008874
    2d34:	00008224 	.word	0x00008224
    2d38:	00008b48 	.word	0x00008b48

00002d3c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2d3c:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2d3e:	4a12      	ldr	r2, [pc, #72]	; (2d88 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2d40:	2300      	movs	r3, #0
    2d42:	7812      	ldrb	r2, [r2, #0]
    2d44:	460c      	mov	r4, r1
    2d46:	f7ff ff7f 	bl	2c48 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2d4a:	f110 0f16 	cmn.w	r0, #22
    2d4e:	d008      	beq.n	2d62 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    2d50:	4b0e      	ldr	r3, [pc, #56]	; (2d8c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    2d52:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2d54:	2807      	cmp	r0, #7
    2d56:	dd00      	ble.n	2d5a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2d58:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    2d5a:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2d5c:	611a      	str	r2, [r3, #16]
    2d5e:	3001      	adds	r0, #1
    2d60:	e7f8      	b.n	2d54 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2d62:	4a0b      	ldr	r2, [pc, #44]	; (2d90 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2d64:	490b      	ldr	r1, [pc, #44]	; (2d94 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2d66:	480c      	ldr	r0, [pc, #48]	; (2d98 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2d68:	f44f 7398 	mov.w	r3, #304	; 0x130
    2d6c:	f004 fd73 	bl	7856 <printk>
    2d70:	4621      	mov	r1, r4
    2d72:	480a      	ldr	r0, [pc, #40]	; (2d9c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2d74:	f004 fd6f 	bl	7856 <printk>
}
    2d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2d7c:	4804      	ldr	r0, [pc, #16]	; (2d90 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2d7e:	f44f 7198 	mov.w	r1, #304	; 0x130
    2d82:	f004 bc94 	b.w	76ae <assert_post_action>
    2d86:	bf00      	nop
    2d88:	20000a44 	.word	0x20000a44
    2d8c:	e000ed90 	.word	0xe000ed90
    2d90:	00008b11 	.word	0x00008b11
    2d94:	00008874 	.word	0x00008874
    2d98:	00008224 	.word	0x00008224
    2d9c:	00008b74 	.word	0x00008b74

00002da0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2da0:	4925      	ldr	r1, [pc, #148]	; (2e38 <z_arm_mpu_init+0x98>)
{
    2da2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2da4:	680c      	ldr	r4, [r1, #0]
    2da6:	2c08      	cmp	r4, #8
    2da8:	d913      	bls.n	2dd2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2daa:	f44f 73a4 	mov.w	r3, #328	; 0x148
    2dae:	4a23      	ldr	r2, [pc, #140]	; (2e3c <z_arm_mpu_init+0x9c>)
    2db0:	4923      	ldr	r1, [pc, #140]	; (2e40 <z_arm_mpu_init+0xa0>)
    2db2:	4824      	ldr	r0, [pc, #144]	; (2e44 <z_arm_mpu_init+0xa4>)
    2db4:	f004 fd4f 	bl	7856 <printk>
    2db8:	4823      	ldr	r0, [pc, #140]	; (2e48 <z_arm_mpu_init+0xa8>)
    2dba:	2208      	movs	r2, #8
    2dbc:	4621      	mov	r1, r4
    2dbe:	f004 fd4a 	bl	7856 <printk>
    2dc2:	481e      	ldr	r0, [pc, #120]	; (2e3c <z_arm_mpu_init+0x9c>)
    2dc4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2dc8:	f004 fc71 	bl	76ae <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2dcc:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2dd0:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    2dd2:	f7ff ff83 	bl	2cdc <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2dd6:	6848      	ldr	r0, [r1, #4]
    2dd8:	491c      	ldr	r1, [pc, #112]	; (2e4c <z_arm_mpu_init+0xac>)
    2dda:	2200      	movs	r2, #0
    2ddc:	4294      	cmp	r4, r2
    2dde:	f100 000c 	add.w	r0, r0, #12
    2de2:	d119      	bne.n	2e18 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    2de4:	4b1a      	ldr	r3, [pc, #104]	; (2e50 <z_arm_mpu_init+0xb0>)
    2de6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2de8:	f7ff ff6e 	bl	2cc8 <arm_core_mpu_enable>
	__ASSERT(
    2dec:	680b      	ldr	r3, [r1, #0]
    2dee:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2df2:	2b08      	cmp	r3, #8
    2df4:	d00e      	beq.n	2e14 <z_arm_mpu_init+0x74>
    2df6:	4917      	ldr	r1, [pc, #92]	; (2e54 <z_arm_mpu_init+0xb4>)
    2df8:	4a10      	ldr	r2, [pc, #64]	; (2e3c <z_arm_mpu_init+0x9c>)
    2dfa:	4812      	ldr	r0, [pc, #72]	; (2e44 <z_arm_mpu_init+0xa4>)
    2dfc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2e00:	f004 fd29 	bl	7856 <printk>
    2e04:	4814      	ldr	r0, [pc, #80]	; (2e58 <z_arm_mpu_init+0xb8>)
    2e06:	f004 fd26 	bl	7856 <printk>
    2e0a:	480c      	ldr	r0, [pc, #48]	; (2e3c <z_arm_mpu_init+0x9c>)
    2e0c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2e10:	f004 fc4d 	bl	76ae <assert_post_action>
	return 0;
    2e14:	2000      	movs	r0, #0
    2e16:	e7db      	b.n	2dd0 <z_arm_mpu_init+0x30>
    2e18:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2e1a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2e1e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2e22:	4313      	orrs	r3, r2
    2e24:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2e28:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2e2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2e2e:	f043 0301 	orr.w	r3, r3, #1
    2e32:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2e34:	3201      	adds	r2, #1
    2e36:	e7d1      	b.n	2ddc <z_arm_mpu_init+0x3c>
    2e38:	00008030 	.word	0x00008030
    2e3c:	00008b11 	.word	0x00008b11
    2e40:	00008874 	.word	0x00008874
    2e44:	00008224 	.word	0x00008224
    2e48:	00008ba1 	.word	0x00008ba1
    2e4c:	e000ed90 	.word	0xe000ed90
    2e50:	20000a44 	.word	0x20000a44
    2e54:	00008bd5 	.word	0x00008bd5
    2e58:	00008c25 	.word	0x00008c25

00002e5c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2e5c:	4b01      	ldr	r3, [pc, #4]	; (2e64 <__stdout_hook_install+0x8>)
    2e5e:	6018      	str	r0, [r3, #0]
}
    2e60:	4770      	bx	lr
    2e62:	bf00      	nop
    2e64:	20000024 	.word	0x20000024

00002e68 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2e68:	f04f 0320 	mov.w	r3, #32
    2e6c:	f3ef 8111 	mrs	r1, BASEPRI
    2e70:	f383 8812 	msr	BASEPRI_MAX, r3
    2e74:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2e78:	4a0f      	ldr	r2, [pc, #60]	; (2eb8 <nordicsemi_nrf52_init+0x50>)
    2e7a:	2301      	movs	r3, #1
    2e7c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e84:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2e88:	4a0c      	ldr	r2, [pc, #48]	; (2ebc <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2e8a:	6812      	ldr	r2, [r2, #0]
    2e8c:	2a08      	cmp	r2, #8
    2e8e:	d108      	bne.n	2ea2 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2e90:	4a0b      	ldr	r2, [pc, #44]	; (2ec0 <nordicsemi_nrf52_init+0x58>)
    2e92:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2e94:	2a05      	cmp	r2, #5
    2e96:	d804      	bhi.n	2ea2 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2e98:	480a      	ldr	r0, [pc, #40]	; (2ec4 <nordicsemi_nrf52_init+0x5c>)
    2e9a:	5c82      	ldrb	r2, [r0, r2]
    2e9c:	b10a      	cbz	r2, 2ea2 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2e9e:	4a0a      	ldr	r2, [pc, #40]	; (2ec8 <nordicsemi_nrf52_init+0x60>)
    2ea0:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ea6:	2201      	movs	r2, #1
    2ea8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2eac:	f381 8811 	msr	BASEPRI, r1
    2eb0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2eb4:	2000      	movs	r0, #0
    2eb6:	4770      	bx	lr
    2eb8:	4001e000 	.word	0x4001e000
    2ebc:	10000130 	.word	0x10000130
    2ec0:	10000134 	.word	0x10000134
    2ec4:	00008c55 	.word	0x00008c55
    2ec8:	40000638 	.word	0x40000638

00002ecc <sys_arch_reboot>:
    *p_gpregret = val;
    2ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ed0:	b2c0      	uxtb	r0, r0
    2ed2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2ed6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2eda:	4905      	ldr	r1, [pc, #20]	; (2ef0 <sys_arch_reboot+0x24>)
    2edc:	4b05      	ldr	r3, [pc, #20]	; (2ef4 <sys_arch_reboot+0x28>)
    2ede:	68ca      	ldr	r2, [r1, #12]
    2ee0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2ee4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2ee6:	60cb      	str	r3, [r1, #12]
    2ee8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2eec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2eee:	e7fd      	b.n	2eec <sys_arch_reboot+0x20>
    2ef0:	e000ed00 	.word	0xe000ed00
    2ef4:	05fa0004 	.word	0x05fa0004

00002ef8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2ef8:	b120      	cbz	r0, 2f04 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2efa:	4b03      	ldr	r3, [pc, #12]	; (2f08 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2efc:	0180      	lsls	r0, r0, #6
    2efe:	f043 0301 	orr.w	r3, r3, #1
    2f02:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2f04:	4770      	bx	lr
    2f06:	bf00      	nop
    2f08:	00007ff0 	.word	0x00007ff0

00002f0c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2f10:	4c10      	ldr	r4, [pc, #64]	; (2f54 <onoff_start+0x48>)
    2f12:	1b07      	subs	r7, r0, r4
    2f14:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    2f18:	f04f 080c 	mov.w	r8, #12
    2f1c:	fb08 f807 	mul.w	r8, r8, r7
{
    2f20:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    2f22:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    2f26:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    2f28:	4420      	add	r0, r4
    2f2a:	2140      	movs	r1, #64	; 0x40
    2f2c:	f004 fd1b 	bl	7966 <set_starting_state>
	if (err < 0) {
    2f30:	1e01      	subs	r1, r0, #0
    2f32:	db09      	blt.n	2f48 <onoff_start+0x3c>
	subdata->cb = cb;
    2f34:	4b08      	ldr	r3, [pc, #32]	; (2f58 <onoff_start+0x4c>)
    2f36:	4444      	add	r4, r8
	subdata->user_data = user_data;
    2f38:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2f3c:	4b07      	ldr	r3, [pc, #28]	; (2f5c <onoff_start+0x50>)
    2f3e:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2f46:	4718      	bx	r3
		notify(mgr, err);
    2f48:	4630      	mov	r0, r6
    2f4a:	462b      	mov	r3, r5
}
    2f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2f50:	4718      	bx	r3
    2f52:	bf00      	nop
    2f54:	200008ac 	.word	0x200008ac
    2f58:	000079c9 	.word	0x000079c9
    2f5c:	00008068 	.word	0x00008068

00002f60 <get_status>:
{
    2f60:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2f62:	b2cc      	uxtb	r4, r1
    2f64:	2c01      	cmp	r4, #1
{
    2f66:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2f68:	d909      	bls.n	2f7e <get_status+0x1e>
    2f6a:	4909      	ldr	r1, [pc, #36]	; (2f90 <get_status+0x30>)
    2f6c:	4809      	ldr	r0, [pc, #36]	; (2f94 <get_status+0x34>)
    2f6e:	4a0a      	ldr	r2, [pc, #40]	; (2f98 <get_status+0x38>)
    2f70:	2379      	movs	r3, #121	; 0x79
    2f72:	f004 fc70 	bl	7856 <printk>
    2f76:	4808      	ldr	r0, [pc, #32]	; (2f98 <get_status+0x38>)
    2f78:	2179      	movs	r1, #121	; 0x79
    2f7a:	f004 fb98 	bl	76ae <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2f7e:	692b      	ldr	r3, [r5, #16]
    2f80:	210c      	movs	r1, #12
    2f82:	fb04 3401 	mla	r4, r4, r1, r3
    2f86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2f88:	f000 0007 	and.w	r0, r0, #7
    2f8c:	bd38      	pop	{r3, r4, r5, pc}
    2f8e:	bf00      	nop
    2f90:	00008c98 	.word	0x00008c98
    2f94:	00008224 	.word	0x00008224
    2f98:	00008c5b 	.word	0x00008c5b

00002f9c <stop>:
{
    2f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f9e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2fa0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2fa2:	6907      	ldr	r7, [r0, #16]
{
    2fa4:	4605      	mov	r5, r0
    2fa6:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2fa8:	d90b      	bls.n	2fc2 <stop+0x26>
    2faa:	4918      	ldr	r1, [pc, #96]	; (300c <stop+0x70>)
    2fac:	4818      	ldr	r0, [pc, #96]	; (3010 <stop+0x74>)
    2fae:	4a19      	ldr	r2, [pc, #100]	; (3014 <stop+0x78>)
    2fb0:	f240 134d 	movw	r3, #333	; 0x14d
    2fb4:	f004 fc4f 	bl	7856 <printk>
    2fb8:	4816      	ldr	r0, [pc, #88]	; (3014 <stop+0x78>)
    2fba:	f240 114d 	movw	r1, #333	; 0x14d
    2fbe:	f004 fb76 	bl	76ae <assert_post_action>
	__asm__ volatile(
    2fc2:	f04f 0320 	mov.w	r3, #32
    2fc6:	f3ef 8211 	mrs	r2, BASEPRI
    2fca:	f383 8812 	msr	BASEPRI_MAX, r3
    2fce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2fd2:	230c      	movs	r3, #12
    2fd4:	fb03 7104 	mla	r1, r3, r4, r7
    2fd8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    2fda:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    2fde:	d001      	beq.n	2fe4 <stop+0x48>
    2fe0:	428e      	cmp	r6, r1
    2fe2:	d110      	bne.n	3006 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2fe4:	fb03 7304 	mla	r3, r3, r4, r7
    2fe8:	2101      	movs	r1, #1
    2fea:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    2fec:	2000      	movs	r0, #0
	__asm__ volatile(
    2fee:	f382 8811 	msr	BASEPRI, r2
    2ff2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2ff6:	b928      	cbnz	r0, 3004 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2ff8:	6869      	ldr	r1, [r5, #4]
    2ffa:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    2ffe:	6863      	ldr	r3, [r4, #4]
    3000:	4798      	blx	r3
	return 0;
    3002:	2000      	movs	r0, #0
}
    3004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    3006:	f04f 30ff 	mov.w	r0, #4294967295
    300a:	e7f0      	b.n	2fee <stop+0x52>
    300c:	00008c98 	.word	0x00008c98
    3010:	00008224 	.word	0x00008224
    3014:	00008c5b 	.word	0x00008c5b

00003018 <onoff_stop>:
{
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    301c:	4906      	ldr	r1, [pc, #24]	; (3038 <onoff_stop+0x20>)
    301e:	1a41      	subs	r1, r0, r1
{
    3020:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3022:	1149      	asrs	r1, r1, #5
    3024:	4805      	ldr	r0, [pc, #20]	; (303c <onoff_stop+0x24>)
    3026:	2240      	movs	r2, #64	; 0x40
    3028:	f7ff ffb8 	bl	2f9c <stop>
	notify(mgr, res);
    302c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    302e:	4601      	mov	r1, r0
	notify(mgr, res);
    3030:	4620      	mov	r0, r4
}
    3032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3036:	4718      	bx	r3
    3038:	200008ac 	.word	0x200008ac
    303c:	00007dcc 	.word	0x00007dcc

00003040 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3040:	2200      	movs	r2, #0
{
    3042:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3044:	2101      	movs	r1, #1
{
    3046:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3048:	4610      	mov	r0, r2
    304a:	f7ff fb41 	bl	26d0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    304e:	2000      	movs	r0, #0
    3050:	f7ff fb20 	bl	2694 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3054:	480f      	ldr	r0, [pc, #60]	; (3094 <clk_init+0x54>)
    3056:	f001 f853 	bl	4100 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    305a:	4b0f      	ldr	r3, [pc, #60]	; (3098 <clk_init+0x58>)
    305c:	4298      	cmp	r0, r3
    305e:	d115      	bne.n	308c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3060:	f001 f872 	bl	4148 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3064:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3066:	490d      	ldr	r1, [pc, #52]	; (309c <clk_init+0x5c>)
    3068:	4630      	mov	r0, r6
    306a:	f004 fbdf 	bl	782c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    306e:	2800      	cmp	r0, #0
    3070:	db0b      	blt.n	308a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3072:	2501      	movs	r5, #1
    3074:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    3076:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3078:	4908      	ldr	r1, [pc, #32]	; (309c <clk_init+0x5c>)
    307a:	f104 0020 	add.w	r0, r4, #32
    307e:	f004 fbd5 	bl	782c <onoff_manager_init>
		if (err < 0) {
    3082:	2800      	cmp	r0, #0
    3084:	db01      	blt.n	308a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3086:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3088:	2000      	movs	r0, #0
}
    308a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    308c:	f06f 0004 	mvn.w	r0, #4
    3090:	e7fb      	b.n	308a <clk_init+0x4a>
    3092:	bf00      	nop
    3094:	000030d5 	.word	0x000030d5
    3098:	0bad0000 	.word	0x0bad0000
    309c:	00008078 	.word	0x00008078

000030a0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    30a0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    30a2:	230c      	movs	r3, #12
    30a4:	4809      	ldr	r0, [pc, #36]	; (30cc <clkstarted_handle.constprop.0+0x2c>)
    30a6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    30a8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    30aa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    30ac:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    30b0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    30b2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    30b4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    30b6:	4418      	add	r0, r3
    30b8:	f004 fc73 	bl	79a2 <set_on_state>
	if (callback) {
    30bc:	b12d      	cbz	r5, 30ca <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    30be:	4632      	mov	r2, r6
    30c0:	462b      	mov	r3, r5
    30c2:	4803      	ldr	r0, [pc, #12]	; (30d0 <clkstarted_handle.constprop.0+0x30>)
}
    30c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    30c8:	4718      	bx	r3
}
    30ca:	bd70      	pop	{r4, r5, r6, pc}
    30cc:	200008ac 	.word	0x200008ac
    30d0:	00007dcc 	.word	0x00007dcc

000030d4 <clock_event_handler>:
	switch (event) {
    30d4:	2801      	cmp	r0, #1
{
    30d6:	b508      	push	{r3, lr}
	switch (event) {
    30d8:	d006      	beq.n	30e8 <clock_event_handler+0x14>
    30da:	2803      	cmp	r0, #3
    30dc:	d008      	beq.n	30f0 <clock_event_handler+0x1c>
    30de:	b9a8      	cbnz	r0, 310c <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    30e0:	4b10      	ldr	r3, [pc, #64]	; (3124 <clock_event_handler+0x50>)
    30e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    30e4:	075b      	lsls	r3, r3, #29
    30e6:	d11b      	bne.n	3120 <clock_event_handler+0x4c>
}
    30e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    30ec:	f7ff bfd8 	b.w	30a0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    30f0:	490d      	ldr	r1, [pc, #52]	; (3128 <clock_event_handler+0x54>)
    30f2:	4a0e      	ldr	r2, [pc, #56]	; (312c <clock_event_handler+0x58>)
    30f4:	480e      	ldr	r0, [pc, #56]	; (3130 <clock_event_handler+0x5c>)
    30f6:	f240 235e 	movw	r3, #606	; 0x25e
    30fa:	f004 fbac 	bl	7856 <printk>
    30fe:	f240 215e 	movw	r1, #606	; 0x25e
}
    3102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    3106:	4809      	ldr	r0, [pc, #36]	; (312c <clock_event_handler+0x58>)
    3108:	f004 bad1 	b.w	76ae <assert_post_action>
    310c:	4906      	ldr	r1, [pc, #24]	; (3128 <clock_event_handler+0x54>)
    310e:	4a07      	ldr	r2, [pc, #28]	; (312c <clock_event_handler+0x58>)
    3110:	4807      	ldr	r0, [pc, #28]	; (3130 <clock_event_handler+0x5c>)
    3112:	f240 2362 	movw	r3, #610	; 0x262
    3116:	f004 fb9e 	bl	7856 <printk>
    311a:	f240 2162 	movw	r1, #610	; 0x262
    311e:	e7f0      	b.n	3102 <clock_event_handler+0x2e>
}
    3120:	bd08      	pop	{r3, pc}
    3122:	bf00      	nop
    3124:	200008ac 	.word	0x200008ac
    3128:	00008874 	.word	0x00008874
    312c:	00008c5b 	.word	0x00008c5b
    3130:	00008224 	.word	0x00008224

00003134 <generic_hfclk_start>:
{
    3134:	b508      	push	{r3, lr}
	__asm__ volatile(
    3136:	f04f 0320 	mov.w	r3, #32
    313a:	f3ef 8111 	mrs	r1, BASEPRI
    313e:	f383 8812 	msr	BASEPRI_MAX, r3
    3142:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3146:	4a12      	ldr	r2, [pc, #72]	; (3190 <generic_hfclk_start+0x5c>)
    3148:	6813      	ldr	r3, [r2, #0]
    314a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    314e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3152:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3154:	d00c      	beq.n	3170 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    315a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    315e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3162:	f013 0301 	ands.w	r3, r3, #1
    3166:	d003      	beq.n	3170 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3168:	480a      	ldr	r0, [pc, #40]	; (3194 <generic_hfclk_start+0x60>)
    316a:	f004 fc1a 	bl	79a2 <set_on_state>
			already_started = true;
    316e:	2301      	movs	r3, #1
	__asm__ volatile(
    3170:	f381 8811 	msr	BASEPRI, r1
    3174:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3178:	b123      	cbz	r3, 3184 <generic_hfclk_start+0x50>
}
    317a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    317e:	2000      	movs	r0, #0
    3180:	f7ff bf8e 	b.w	30a0 <clkstarted_handle.constprop.0>
}
    3184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3188:	2001      	movs	r0, #1
    318a:	f000 bffd 	b.w	4188 <nrfx_clock_start>
    318e:	bf00      	nop
    3190:	20000904 	.word	0x20000904
    3194:	200008f4 	.word	0x200008f4

00003198 <generic_hfclk_stop>:
    3198:	4b09      	ldr	r3, [pc, #36]	; (31c0 <generic_hfclk_stop+0x28>)
    319a:	f3bf 8f5b 	dmb	ish
    319e:	e853 2f00 	ldrex	r2, [r3]
    31a2:	f022 0102 	bic.w	r1, r2, #2
    31a6:	e843 1000 	strex	r0, r1, [r3]
    31aa:	2800      	cmp	r0, #0
    31ac:	d1f7      	bne.n	319e <generic_hfclk_stop+0x6>
    31ae:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    31b2:	07d3      	lsls	r3, r2, #31
    31b4:	d402      	bmi.n	31bc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    31b6:	2001      	movs	r0, #1
    31b8:	f001 b83a 	b.w	4230 <nrfx_clock_stop>
}
    31bc:	4770      	bx	lr
    31be:	bf00      	nop
    31c0:	20000904 	.word	0x20000904

000031c4 <api_blocking_start>:
{
    31c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    31c6:	2200      	movs	r2, #0
    31c8:	2301      	movs	r3, #1
    31ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    31ce:	4a09      	ldr	r2, [pc, #36]	; (31f4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    31d0:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    31d4:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    31d6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    31da:	f004 fc07 	bl	79ec <api_start>
	if (err < 0) {
    31de:	2800      	cmp	r0, #0
    31e0:	db05      	blt.n	31ee <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    31e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    31e6:	2300      	movs	r3, #0
    31e8:	4668      	mov	r0, sp
    31ea:	f003 fb75 	bl	68d8 <z_impl_k_sem_take>
}
    31ee:	b005      	add	sp, #20
    31f0:	f85d fb04 	ldr.w	pc, [sp], #4
    31f4:	000079e7 	.word	0x000079e7

000031f8 <z_nrf_clock_control_lf_on>:
{
    31f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    31fc:	4949      	ldr	r1, [pc, #292]	; (3324 <z_nrf_clock_control_lf_on+0x12c>)
    31fe:	f3bf 8f5b 	dmb	ish
    3202:	4605      	mov	r5, r0
    3204:	2201      	movs	r2, #1
    3206:	e851 3f00 	ldrex	r3, [r1]
    320a:	e841 2000 	strex	r0, r2, [r1]
    320e:	2800      	cmp	r0, #0
    3210:	d1f9      	bne.n	3206 <z_nrf_clock_control_lf_on+0xe>
    3212:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3216:	b9a3      	cbnz	r3, 3242 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3218:	4943      	ldr	r1, [pc, #268]	; (3328 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    321a:	4844      	ldr	r0, [pc, #272]	; (332c <z_nrf_clock_control_lf_on+0x134>)
    321c:	604b      	str	r3, [r1, #4]
    321e:	60cb      	str	r3, [r1, #12]
    3220:	608a      	str	r2, [r1, #8]
    3222:	f7fe ffad 	bl	2180 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3226:	2800      	cmp	r0, #0
    3228:	da0b      	bge.n	3242 <z_nrf_clock_control_lf_on+0x4a>
    322a:	4941      	ldr	r1, [pc, #260]	; (3330 <z_nrf_clock_control_lf_on+0x138>)
    322c:	4841      	ldr	r0, [pc, #260]	; (3334 <z_nrf_clock_control_lf_on+0x13c>)
    322e:	4a42      	ldr	r2, [pc, #264]	; (3338 <z_nrf_clock_control_lf_on+0x140>)
    3230:	f44f 7308 	mov.w	r3, #544	; 0x220
    3234:	f004 fb0f 	bl	7856 <printk>
    3238:	483f      	ldr	r0, [pc, #252]	; (3338 <z_nrf_clock_control_lf_on+0x140>)
    323a:	f44f 7108 	mov.w	r1, #544	; 0x220
    323e:	f004 fa36 	bl	76ae <assert_post_action>
	switch (start_mode) {
    3242:	b3ad      	cbz	r5, 32b0 <z_nrf_clock_control_lf_on+0xb8>
    3244:	1e6b      	subs	r3, r5, #1
    3246:	2b01      	cmp	r3, #1
    3248:	d856      	bhi.n	32f8 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    324a:	2d01      	cmp	r5, #1
    324c:	d107      	bne.n	325e <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    324e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3252:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3256:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    325a:	2b01      	cmp	r3, #1
    325c:	d028      	beq.n	32b0 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    325e:	f004 fd6f 	bl	7d40 <k_is_in_isr>
    3262:	4604      	mov	r4, r0
    3264:	b918      	cbnz	r0, 326e <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    3266:	4b35      	ldr	r3, [pc, #212]	; (333c <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    3268:	781b      	ldrb	r3, [r3, #0]
    326a:	2b00      	cmp	r3, #0
    326c:	d152      	bne.n	3314 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    326e:	f04f 0320 	mov.w	r3, #32
    3272:	f3ef 8611 	mrs	r6, BASEPRI
    3276:	f383 8812 	msr	BASEPRI_MAX, r3
    327a:	f3bf 8f6f 	isb	sy
    327e:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3280:	4f2f      	ldr	r7, [pc, #188]	; (3340 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3282:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 3348 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3286:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 334c <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    328a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    328e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3292:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3296:	03d2      	lsls	r2, r2, #15
    3298:	d50c      	bpl.n	32b4 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    329a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    329e:	2b01      	cmp	r3, #1
    32a0:	d001      	beq.n	32a6 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    32a2:	2d01      	cmp	r5, #1
    32a4:	d106      	bne.n	32b4 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    32a6:	b30c      	cbz	r4, 32ec <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    32a8:	f386 8811 	msr	BASEPRI, r6
    32ac:	f3bf 8f6f 	isb	sy
}
    32b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    32b4:	b1ac      	cbz	r4, 32e2 <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    32b6:	4630      	mov	r0, r6
    32b8:	f7ff f984 	bl	25c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    32bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    32c0:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    32c4:	2b00      	cmp	r3, #0
    32c6:	d1e0      	bne.n	328a <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    32c8:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    32ca:	2900      	cmp	r1, #0
    32cc:	d0dd      	beq.n	328a <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32ce:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    32d0:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    32d2:	2301      	movs	r3, #1
    32d4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    32d8:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32dc:	f8c9 3000 	str.w	r3, [r9]
}
    32e0:	e7d3      	b.n	328a <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    32e2:	2100      	movs	r1, #0
    32e4:	2021      	movs	r0, #33	; 0x21
    32e6:	f003 f9c7 	bl	6678 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    32ea:	e7e7      	b.n	32bc <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    32ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32f0:	2202      	movs	r2, #2
    32f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    32f6:	e7db      	b.n	32b0 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    32f8:	4912      	ldr	r1, [pc, #72]	; (3344 <z_nrf_clock_control_lf_on+0x14c>)
    32fa:	480e      	ldr	r0, [pc, #56]	; (3334 <z_nrf_clock_control_lf_on+0x13c>)
    32fc:	4a0e      	ldr	r2, [pc, #56]	; (3338 <z_nrf_clock_control_lf_on+0x140>)
    32fe:	f240 2332 	movw	r3, #562	; 0x232
    3302:	f004 faa8 	bl	7856 <printk>
}
    3306:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    330a:	480b      	ldr	r0, [pc, #44]	; (3338 <z_nrf_clock_control_lf_on+0x140>)
    330c:	f240 2132 	movw	r1, #562	; 0x232
    3310:	f004 b9cd 	b.w	76ae <assert_post_action>
    p_reg->INTENCLR = mask;
    3314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3318:	2202      	movs	r2, #2
    331a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    331e:	4606      	mov	r6, r0
}
    3320:	e7ae      	b.n	3280 <z_nrf_clock_control_lf_on+0x88>
    3322:	bf00      	nop
    3324:	20000908 	.word	0x20000908
    3328:	2000089c 	.word	0x2000089c
    332c:	200008cc 	.word	0x200008cc
    3330:	00008cbc 	.word	0x00008cbc
    3334:	00008224 	.word	0x00008224
    3338:	00008c5b 	.word	0x00008c5b
    333c:	20000e55 	.word	0x20000e55
    3340:	40000104 	.word	0x40000104
    3344:	00008874 	.word	0x00008874
    3348:	e000e100 	.word	0xe000e100
    334c:	40000008 	.word	0x40000008

00003350 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3350:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3352:	4b08      	ldr	r3, [pc, #32]	; (3374 <uart_console_init+0x24>)
    3354:	4808      	ldr	r0, [pc, #32]	; (3378 <uart_console_init+0x28>)
    3356:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3358:	f004 fc9e 	bl	7c98 <z_device_ready>
    335c:	b138      	cbz	r0, 336e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    335e:	4807      	ldr	r0, [pc, #28]	; (337c <uart_console_init+0x2c>)
    3360:	f7ff fd7c 	bl	2e5c <__stdout_hook_install>
	__printk_hook_install(console_out);
    3364:	4805      	ldr	r0, [pc, #20]	; (337c <uart_console_init+0x2c>)
    3366:	f7ff f8f1 	bl	254c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    336a:	2000      	movs	r0, #0
}
    336c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    336e:	f06f 0012 	mvn.w	r0, #18
    3372:	e7fb      	b.n	336c <uart_console_init+0x1c>
    3374:	2000090c 	.word	0x2000090c
    3378:	00007e2c 	.word	0x00007e2c
    337c:	00003381 	.word	0x00003381

00003380 <console_out>:
	if ('\n' == c) {
    3380:	280a      	cmp	r0, #10
{
    3382:	b538      	push	{r3, r4, r5, lr}
    3384:	4d07      	ldr	r5, [pc, #28]	; (33a4 <console_out+0x24>)
    3386:	4604      	mov	r4, r0
	if ('\n' == c) {
    3388:	d104      	bne.n	3394 <console_out+0x14>
    338a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    338c:	6883      	ldr	r3, [r0, #8]
    338e:	210d      	movs	r1, #13
    3390:	685b      	ldr	r3, [r3, #4]
    3392:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3394:	6828      	ldr	r0, [r5, #0]
    3396:	6883      	ldr	r3, [r0, #8]
    3398:	b2e1      	uxtb	r1, r4
    339a:	685b      	ldr	r3, [r3, #4]
    339c:	4798      	blx	r3
}
    339e:	4620      	mov	r0, r4
    33a0:	bd38      	pop	{r3, r4, r5, pc}
    33a2:	bf00      	nop
    33a4:	2000090c 	.word	0x2000090c

000033a8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    33a8:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    33aa:	6905      	ldr	r5, [r0, #16]
{
    33ac:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    33ae:	460c      	mov	r4, r1
    33b0:	b961      	cbnz	r1, 33cc <gpio_nrfx_manage_callback+0x24>
    33b2:	4922      	ldr	r1, [pc, #136]	; (343c <gpio_nrfx_manage_callback+0x94>)
    33b4:	4a22      	ldr	r2, [pc, #136]	; (3440 <gpio_nrfx_manage_callback+0x98>)
    33b6:	4823      	ldr	r0, [pc, #140]	; (3444 <gpio_nrfx_manage_callback+0x9c>)
    33b8:	2324      	movs	r3, #36	; 0x24
    33ba:	f004 fa4c 	bl	7856 <printk>
    33be:	4822      	ldr	r0, [pc, #136]	; (3448 <gpio_nrfx_manage_callback+0xa0>)
    33c0:	f004 fa49 	bl	7856 <printk>
    33c4:	481e      	ldr	r0, [pc, #120]	; (3440 <gpio_nrfx_manage_callback+0x98>)
    33c6:	2124      	movs	r1, #36	; 0x24
    33c8:	f004 f971 	bl	76ae <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    33cc:	6863      	ldr	r3, [r4, #4]
    33ce:	b963      	cbnz	r3, 33ea <gpio_nrfx_manage_callback+0x42>
    33d0:	491e      	ldr	r1, [pc, #120]	; (344c <gpio_nrfx_manage_callback+0xa4>)
    33d2:	4a1b      	ldr	r2, [pc, #108]	; (3440 <gpio_nrfx_manage_callback+0x98>)
    33d4:	481b      	ldr	r0, [pc, #108]	; (3444 <gpio_nrfx_manage_callback+0x9c>)
    33d6:	2325      	movs	r3, #37	; 0x25
    33d8:	f004 fa3d 	bl	7856 <printk>
    33dc:	481c      	ldr	r0, [pc, #112]	; (3450 <gpio_nrfx_manage_callback+0xa8>)
    33de:	f004 fa3a 	bl	7856 <printk>
    33e2:	4817      	ldr	r0, [pc, #92]	; (3440 <gpio_nrfx_manage_callback+0x98>)
    33e4:	2125      	movs	r1, #37	; 0x25
    33e6:	f004 f962 	bl	76ae <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    33ea:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    33ec:	b15b      	cbz	r3, 3406 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    33ee:	2200      	movs	r2, #0
    33f0:	429c      	cmp	r4, r3
    33f2:	d113      	bne.n	341c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    33f4:	6823      	ldr	r3, [r4, #0]
    33f6:	b95a      	cbnz	r2, 3410 <gpio_nrfx_manage_callback+0x68>
    33f8:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    33fa:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    33fc:	4294      	cmp	r4, r2
    33fe:	d100      	bne.n	3402 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    3400:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    3402:	2300      	movs	r3, #0
    3404:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    3406:	b976      	cbnz	r6, 3426 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    3408:	2000      	movs	r0, #0
				     callback, set);
}
    340a:	bd70      	pop	{r4, r5, r6, pc}
    340c:	460b      	mov	r3, r1
    340e:	e7ef      	b.n	33f0 <gpio_nrfx_manage_callback+0x48>
    3410:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    3412:	68ab      	ldr	r3, [r5, #8]
    3414:	429c      	cmp	r4, r3
	list->tail = node;
    3416:	bf08      	it	eq
    3418:	60aa      	streq	r2, [r5, #8]
}
    341a:	e7f2      	b.n	3402 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    341c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    341e:	461a      	mov	r2, r3
    3420:	2900      	cmp	r1, #0
    3422:	d1f3      	bne.n	340c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    3424:	b13e      	cbz	r6, 3436 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    3426:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    3428:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    342a:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    342c:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    342e:	2800      	cmp	r0, #0
    3430:	d1ea      	bne.n	3408 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    3432:	60ac      	str	r4, [r5, #8]
}
    3434:	e7e9      	b.n	340a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    3436:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    343a:	e7e6      	b.n	340a <gpio_nrfx_manage_callback+0x62>
    343c:	00008cf8 	.word	0x00008cf8
    3440:	00008ccb 	.word	0x00008ccb
    3444:	00008224 	.word	0x00008224
    3448:	00008d01 	.word	0x00008d01
    344c:	00008d10 	.word	0x00008d10
    3450:	00008d22 	.word	0x00008d22

00003454 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3454:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    3456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    345a:	d003      	beq.n	3464 <nrfx_gpio_handler+0x10>
    345c:	2b01      	cmp	r3, #1
    345e:	d036      	beq.n	34ce <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    3460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3464:	4f1b      	ldr	r7, [pc, #108]	; (34d4 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3466:	693b      	ldr	r3, [r7, #16]
    3468:	685c      	ldr	r4, [r3, #4]
    346a:	2c00      	cmp	r4, #0
    346c:	d0f8      	beq.n	3460 <nrfx_gpio_handler+0xc>
    346e:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    3470:	f8df 806c 	ldr.w	r8, [pc, #108]	; 34e0 <nrfx_gpio_handler+0x8c>
    3474:	f8df 906c 	ldr.w	r9, [pc, #108]	; 34e4 <nrfx_gpio_handler+0x90>
    3478:	f8df a06c 	ldr.w	sl, [pc, #108]	; 34e8 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    347c:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    3480:	2601      	movs	r6, #1
    3482:	2d00      	cmp	r5, #0
    3484:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    3488:	bf38      	it	cc
    348a:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    348c:	68a3      	ldr	r3, [r4, #8]
    348e:	421e      	tst	r6, r3
    3490:	d014      	beq.n	34bc <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    3492:	6863      	ldr	r3, [r4, #4]
    3494:	b963      	cbnz	r3, 34b0 <nrfx_gpio_handler+0x5c>
    3496:	4649      	mov	r1, r9
    3498:	2345      	movs	r3, #69	; 0x45
    349a:	4642      	mov	r2, r8
    349c:	4650      	mov	r0, sl
    349e:	f004 f9da 	bl	7856 <printk>
    34a2:	480d      	ldr	r0, [pc, #52]	; (34d8 <nrfx_gpio_handler+0x84>)
    34a4:	f004 f9d7 	bl	7856 <printk>
    34a8:	2145      	movs	r1, #69	; 0x45
    34aa:	4640      	mov	r0, r8
    34ac:	f004 f8ff 	bl	76ae <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    34b0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    34b4:	4621      	mov	r1, r4
    34b6:	4032      	ands	r2, r6
    34b8:	4638      	mov	r0, r7
    34ba:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    34bc:	2d00      	cmp	r5, #0
    34be:	d0cf      	beq.n	3460 <nrfx_gpio_handler+0xc>
    34c0:	682b      	ldr	r3, [r5, #0]
    34c2:	2b00      	cmp	r3, #0
    34c4:	bf38      	it	cc
    34c6:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    34c8:	462c      	mov	r4, r5
    34ca:	461d      	mov	r5, r3
    34cc:	e7de      	b.n	348c <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    34ce:	4f03      	ldr	r7, [pc, #12]	; (34dc <nrfx_gpio_handler+0x88>)
    34d0:	e7c9      	b.n	3466 <nrfx_gpio_handler+0x12>
    34d2:	bf00      	nop
    34d4:	00007de4 	.word	0x00007de4
    34d8:	00008d22 	.word	0x00008d22
    34dc:	00007dfc 	.word	0x00007dfc
    34e0:	00008ccb 	.word	0x00008ccb
    34e4:	00008d39 	.word	0x00008d39
    34e8:	00008224 	.word	0x00008224

000034ec <gpio_nrfx_pin_interrupt_configure>:
{
    34ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    34ee:	6840      	ldr	r0, [r0, #4]
    34f0:	7b05      	ldrb	r5, [r0, #12]
    34f2:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    34f6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    34fa:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    34fe:	f04f 0500 	mov.w	r5, #0
    3502:	d104      	bne.n	350e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3504:	4620      	mov	r0, r4
    3506:	f001 fa2b 	bl	4960 <nrfx_gpiote_trigger_disable>
	return 0;
    350a:	2000      	movs	r0, #0
    350c:	e054      	b.n	35b8 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    350e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3512:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3516:	d151      	bne.n	35bc <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    351c:	bf0c      	ite	eq
    351e:	2304      	moveq	r3, #4
    3520:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3522:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3526:	6883      	ldr	r3, [r0, #8]
    3528:	fa23 f101 	lsr.w	r1, r3, r1
    352c:	f011 0101 	ands.w	r1, r1, #1
    3530:	d155      	bne.n	35de <gpio_nrfx_pin_interrupt_configure+0xf2>
    3532:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3536:	d152      	bne.n	35de <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    3538:	0966      	lsrs	r6, r4, #5
    353a:	d04a      	beq.n	35d2 <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    353c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3540:	2e01      	cmp	r6, #1
    3542:	bf08      	it	eq
    3544:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    3546:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    354a:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    354c:	07ca      	lsls	r2, r1, #31
    354e:	d40b      	bmi.n	3568 <gpio_nrfx_pin_interrupt_configure+0x7c>
    3550:	492b      	ldr	r1, [pc, #172]	; (3600 <gpio_nrfx_pin_interrupt_configure+0x114>)
    3552:	482c      	ldr	r0, [pc, #176]	; (3604 <gpio_nrfx_pin_interrupt_configure+0x118>)
    3554:	4a2c      	ldr	r2, [pc, #176]	; (3608 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3556:	f240 2329 	movw	r3, #553	; 0x229
    355a:	f004 f97c 	bl	7856 <printk>
    355e:	482a      	ldr	r0, [pc, #168]	; (3608 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3560:	f240 2129 	movw	r1, #553	; 0x229
    3564:	f004 f8a3 	bl	76ae <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3568:	b16e      	cbz	r6, 3586 <gpio_nrfx_pin_interrupt_configure+0x9a>
    356a:	2e01      	cmp	r6, #1
    356c:	d034      	beq.n	35d8 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    356e:	4927      	ldr	r1, [pc, #156]	; (360c <gpio_nrfx_pin_interrupt_configure+0x120>)
    3570:	4824      	ldr	r0, [pc, #144]	; (3604 <gpio_nrfx_pin_interrupt_configure+0x118>)
    3572:	4a25      	ldr	r2, [pc, #148]	; (3608 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3574:	f240 232e 	movw	r3, #558	; 0x22e
    3578:	f004 f96d 	bl	7856 <printk>
    357c:	4822      	ldr	r0, [pc, #136]	; (3608 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    357e:	f240 212e 	movw	r1, #558	; 0x22e
    3582:	f004 f894 	bl	76ae <assert_post_action>
        case 0: return NRF_P0;
    3586:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    358a:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    358e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3592:	07db      	lsls	r3, r3, #31
    3594:	d423      	bmi.n	35de <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3596:	f10d 0507 	add.w	r5, sp, #7
    359a:	4629      	mov	r1, r5
    359c:	4620      	mov	r0, r4
    359e:	f001 f909 	bl	47b4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    35a2:	4b1b      	ldr	r3, [pc, #108]	; (3610 <gpio_nrfx_pin_interrupt_configure+0x124>)
    35a4:	4298      	cmp	r0, r3
    35a6:	d119      	bne.n	35dc <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    35a8:	4628      	mov	r0, r5
    35aa:	f001 f963 	bl	4874 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    35ae:	4b19      	ldr	r3, [pc, #100]	; (3614 <gpio_nrfx_pin_interrupt_configure+0x128>)
    35b0:	4298      	cmp	r0, r3
    35b2:	d013      	beq.n	35dc <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    35b4:	f06f 000b 	mvn.w	r0, #11
}
    35b8:	b004      	add	sp, #16
    35ba:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    35bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    35c0:	d005      	beq.n	35ce <gpio_nrfx_pin_interrupt_configure+0xe2>
    35c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    35c6:	bf0c      	ite	eq
    35c8:	2302      	moveq	r3, #2
    35ca:	2301      	movne	r3, #1
    35cc:	e7a9      	b.n	3522 <gpio_nrfx_pin_interrupt_configure+0x36>
    35ce:	2303      	movs	r3, #3
    35d0:	e7a7      	b.n	3522 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    35d2:	f04f 31ff 	mov.w	r1, #4294967295
    35d6:	e7b6      	b.n	3546 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    35d8:	4b0f      	ldr	r3, [pc, #60]	; (3618 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    35da:	e7d6      	b.n	358a <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    35dc:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    35de:	2300      	movs	r3, #0
    35e0:	4619      	mov	r1, r3
    35e2:	aa02      	add	r2, sp, #8
    35e4:	4620      	mov	r0, r4
    35e6:	f000 ffc7 	bl	4578 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    35ea:	4b0a      	ldr	r3, [pc, #40]	; (3614 <gpio_nrfx_pin_interrupt_configure+0x128>)
    35ec:	4298      	cmp	r0, r3
    35ee:	d104      	bne.n	35fa <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    35f0:	2101      	movs	r1, #1
    35f2:	4620      	mov	r0, r4
    35f4:	f001 f944 	bl	4880 <nrfx_gpiote_trigger_enable>
    35f8:	e787      	b.n	350a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    35fa:	f06f 0004 	mvn.w	r0, #4
    35fe:	e7db      	b.n	35b8 <gpio_nrfx_pin_interrupt_configure+0xcc>
    3600:	00008d78 	.word	0x00008d78
    3604:	00008224 	.word	0x00008224
    3608:	00008d45 	.word	0x00008d45
    360c:	00008874 	.word	0x00008874
    3610:	0bad0004 	.word	0x0bad0004
    3614:	0bad0000 	.word	0x0bad0000
    3618:	50000300 	.word	0x50000300

0000361c <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    361c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    361e:	f001 f919 	bl	4854 <nrfx_gpiote_is_init>
    3622:	4604      	mov	r4, r0
    3624:	b968      	cbnz	r0, 3642 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3626:	f001 f8ed 	bl	4804 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    362a:	4b08      	ldr	r3, [pc, #32]	; (364c <gpio_nrfx_init+0x30>)
    362c:	4298      	cmp	r0, r3
    362e:	d10a      	bne.n	3646 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3630:	4807      	ldr	r0, [pc, #28]	; (3650 <gpio_nrfx_init+0x34>)
    3632:	4621      	mov	r1, r4
    3634:	f001 f8b8 	bl	47a8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3638:	4622      	mov	r2, r4
    363a:	2105      	movs	r1, #5
    363c:	2006      	movs	r0, #6
    363e:	f7ff f847 	bl	26d0 <z_arm_irq_priority_set>
		return 0;
    3642:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3644:	bd10      	pop	{r4, pc}
		return -EIO;
    3646:	f06f 0004 	mvn.w	r0, #4
    364a:	e7fb      	b.n	3644 <gpio_nrfx_init+0x28>
    364c:	0bad0000 	.word	0x0bad0000
    3650:	00003455 	.word	0x00003455

00003654 <gpio_nrfx_pin_configure>:
{
    3654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3658:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    365a:	7b3b      	ldrb	r3, [r7, #12]
    365c:	f001 051f 	and.w	r5, r1, #31
{
    3660:	b085      	sub	sp, #20
    3662:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3664:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3668:	4614      	mov	r4, r2
    366a:	b9ca      	cbnz	r2, 36a0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    366c:	a902      	add	r1, sp, #8
    366e:	4628      	mov	r0, r5
    3670:	f001 f8a0 	bl	47b4 <nrfx_gpiote_channel_get>
    3674:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    3676:	4628      	mov	r0, r5
    3678:	f001 f994 	bl	49a4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    367c:	4b48      	ldr	r3, [pc, #288]	; (37a0 <gpio_nrfx_pin_configure+0x14c>)
    367e:	4298      	cmp	r0, r3
    3680:	d004      	beq.n	368c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    3682:	f06f 0004 	mvn.w	r0, #4
}
    3686:	b005      	add	sp, #20
    3688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    368c:	4284      	cmp	r4, r0
    368e:	d105      	bne.n	369c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3690:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3694:	f001 f8e8 	bl	4868 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3698:	42a0      	cmp	r0, r4
    369a:	d1f2      	bne.n	3682 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    369c:	2000      	movs	r0, #0
    369e:	e7f2      	b.n	3686 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    36a0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    36a4:	f10d 0103 	add.w	r1, sp, #3
    36a8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    36aa:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    36ae:	f001 f881 	bl	47b4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    36b2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    36b4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    36b6:	aa02      	add	r2, sp, #8
    36b8:	4649      	mov	r1, r9
    36ba:	4628      	mov	r0, r5
    36bc:	f000 ff5c 	bl	4578 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    36c0:	4b37      	ldr	r3, [pc, #220]	; (37a0 <gpio_nrfx_pin_configure+0x14c>)
    36c2:	4298      	cmp	r0, r3
    36c4:	d002      	beq.n	36cc <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    36c6:	f06f 0015 	mvn.w	r0, #21
    36ca:	e7dc      	b.n	3686 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    36cc:	4580      	cmp	r8, r0
    36ce:	d103      	bne.n	36d8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    36d0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    36d4:	f001 f8c8 	bl	4868 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    36d8:	05a3      	lsls	r3, r4, #22
    36da:	d54e      	bpl.n	377a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    36dc:	4b31      	ldr	r3, [pc, #196]	; (37a4 <gpio_nrfx_pin_configure+0x150>)
    36de:	4a32      	ldr	r2, [pc, #200]	; (37a8 <gpio_nrfx_pin_configure+0x154>)
    36e0:	4023      	ands	r3, r4
    36e2:	4293      	cmp	r3, r2
    36e4:	d03a      	beq.n	375c <gpio_nrfx_pin_configure+0x108>
    36e6:	d80c      	bhi.n	3702 <gpio_nrfx_pin_configure+0xae>
    36e8:	2b06      	cmp	r3, #6
    36ea:	d014      	beq.n	3716 <gpio_nrfx_pin_configure+0xc2>
    36ec:	d804      	bhi.n	36f8 <gpio_nrfx_pin_configure+0xa4>
    36ee:	b193      	cbz	r3, 3716 <gpio_nrfx_pin_configure+0xc2>
    36f0:	2b02      	cmp	r3, #2
    36f2:	d1e8      	bne.n	36c6 <gpio_nrfx_pin_configure+0x72>
    36f4:	2304      	movs	r3, #4
    36f6:	e00e      	b.n	3716 <gpio_nrfx_pin_configure+0xc2>
    36f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    36fc:	d1e3      	bne.n	36c6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    36fe:	2301      	movs	r3, #1
    3700:	e009      	b.n	3716 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3702:	4a2a      	ldr	r2, [pc, #168]	; (37ac <gpio_nrfx_pin_configure+0x158>)
    3704:	4293      	cmp	r3, r2
    3706:	d02b      	beq.n	3760 <gpio_nrfx_pin_configure+0x10c>
    3708:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    370c:	d02a      	beq.n	3764 <gpio_nrfx_pin_configure+0x110>
    370e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3712:	d1d8      	bne.n	36c6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3714:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3716:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    371a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    371e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3722:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3724:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3728:	bf54      	ite	pl
    372a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    372e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3730:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    3732:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3736:	d517      	bpl.n	3768 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3738:	687b      	ldr	r3, [r7, #4]
    373a:	2101      	movs	r1, #1
    373c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3740:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3744:	2200      	movs	r2, #0
    3746:	a901      	add	r1, sp, #4
    3748:	4628      	mov	r0, r5
    374a:	f000 ffbd 	bl	46c8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    374e:	4b14      	ldr	r3, [pc, #80]	; (37a0 <gpio_nrfx_pin_configure+0x14c>)
    3750:	4298      	cmp	r0, r3
    3752:	bf14      	ite	ne
    3754:	f06f 0015 	mvnne.w	r0, #21
    3758:	2000      	moveq	r0, #0
    375a:	e794      	b.n	3686 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    375c:	2307      	movs	r3, #7
    375e:	e7da      	b.n	3716 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3760:	2305      	movs	r3, #5
    3762:	e7d8      	b.n	3716 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    3764:	2303      	movs	r3, #3
    3766:	e7d6      	b.n	3716 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3768:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    376a:	bf41      	itttt	mi
    376c:	687b      	ldrmi	r3, [r7, #4]
    376e:	2101      	movmi	r1, #1
    3770:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3774:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3778:	e7e4      	b.n	3744 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    377a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    377c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3780:	bf54      	ite	pl
    3782:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3786:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3788:	461a      	mov	r2, r3
    378a:	a901      	add	r1, sp, #4
    378c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    378e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3792:	f000 fef1 	bl	4578 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3796:	4b02      	ldr	r3, [pc, #8]	; (37a0 <gpio_nrfx_pin_configure+0x14c>)
    3798:	4298      	cmp	r0, r3
    379a:	f43f af7f 	beq.w	369c <gpio_nrfx_pin_configure+0x48>
    379e:	e792      	b.n	36c6 <gpio_nrfx_pin_configure+0x72>
    37a0:	0bad0000 	.word	0x0bad0000
    37a4:	00f00006 	.word	0x00f00006
    37a8:	00100006 	.word	0x00100006
    37ac:	00400002 	.word	0x00400002

000037b0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    37b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    37b2:	794b      	ldrb	r3, [r1, #5]
    37b4:	2b01      	cmp	r3, #1
    37b6:	d026      	beq.n	3806 <uarte_nrfx_configure+0x56>
    37b8:	2b03      	cmp	r3, #3
    37ba:	d121      	bne.n	3800 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    37bc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    37be:	798b      	ldrb	r3, [r1, #6]
    37c0:	2b03      	cmp	r3, #3
    37c2:	d11d      	bne.n	3800 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    37c4:	79cc      	ldrb	r4, [r1, #7]
    37c6:	b10c      	cbz	r4, 37cc <uarte_nrfx_configure+0x1c>
    37c8:	2c01      	cmp	r4, #1
    37ca:	d119      	bne.n	3800 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    37cc:	790a      	ldrb	r2, [r1, #4]
    37ce:	b112      	cbz	r2, 37d6 <uarte_nrfx_configure+0x26>
    37d0:	2a02      	cmp	r2, #2
    37d2:	d115      	bne.n	3800 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    37d4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    37d6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    37d8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    37da:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    37de:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    37e0:	d065      	beq.n	38ae <uarte_nrfx_configure+0xfe>
    37e2:	d82d      	bhi.n	3840 <uarte_nrfx_configure+0x90>
    37e4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    37e8:	d064      	beq.n	38b4 <uarte_nrfx_configure+0x104>
    37ea:	d816      	bhi.n	381a <uarte_nrfx_configure+0x6a>
    37ec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    37f0:	d062      	beq.n	38b8 <uarte_nrfx_configure+0x108>
    37f2:	d80a      	bhi.n	380a <uarte_nrfx_configure+0x5a>
    37f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    37f8:	d061      	beq.n	38be <uarte_nrfx_configure+0x10e>
    37fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    37fe:	d061      	beq.n	38c4 <uarte_nrfx_configure+0x114>
    3800:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3804:	e052      	b.n	38ac <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3806:	2600      	movs	r6, #0
    3808:	e7d9      	b.n	37be <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    380a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    380e:	d05c      	beq.n	38ca <uarte_nrfx_configure+0x11a>
    3810:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3814:	d1f4      	bne.n	3800 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3816:	4b37      	ldr	r3, [pc, #220]	; (38f4 <uarte_nrfx_configure+0x144>)
    3818:	e03c      	b.n	3894 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    381a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    381e:	d057      	beq.n	38d0 <uarte_nrfx_configure+0x120>
    3820:	d807      	bhi.n	3832 <uarte_nrfx_configure+0x82>
    3822:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3826:	d055      	beq.n	38d4 <uarte_nrfx_configure+0x124>
    3828:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    382c:	d1e8      	bne.n	3800 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    382e:	4b32      	ldr	r3, [pc, #200]	; (38f8 <uarte_nrfx_configure+0x148>)
    3830:	e030      	b.n	3894 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3832:	f647 2712 	movw	r7, #31250	; 0x7a12
    3836:	42bb      	cmp	r3, r7
    3838:	d1e2      	bne.n	3800 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    383a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    383e:	e029      	b.n	3894 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3840:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3844:	d048      	beq.n	38d8 <uarte_nrfx_configure+0x128>
    3846:	d813      	bhi.n	3870 <uarte_nrfx_configure+0xc0>
    3848:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    384c:	d047      	beq.n	38de <uarte_nrfx_configure+0x12e>
    384e:	d809      	bhi.n	3864 <uarte_nrfx_configure+0xb4>
    3850:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3854:	42bb      	cmp	r3, r7
    3856:	d044      	beq.n	38e2 <uarte_nrfx_configure+0x132>
    3858:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    385c:	d1d0      	bne.n	3800 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    385e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3862:	e017      	b.n	3894 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3864:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3868:	d1ca      	bne.n	3800 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    386a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    386e:	e011      	b.n	3894 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3870:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3874:	d038      	beq.n	38e8 <uarte_nrfx_configure+0x138>
    3876:	d808      	bhi.n	388a <uarte_nrfx_configure+0xda>
    3878:	4f20      	ldr	r7, [pc, #128]	; (38fc <uarte_nrfx_configure+0x14c>)
    387a:	42bb      	cmp	r3, r7
    387c:	d037      	beq.n	38ee <uarte_nrfx_configure+0x13e>
    387e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3882:	d1bd      	bne.n	3800 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3884:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3888:	e004      	b.n	3894 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    388a:	4f1d      	ldr	r7, [pc, #116]	; (3900 <uarte_nrfx_configure+0x150>)
    388c:	42bb      	cmp	r3, r7
    388e:	d1b7      	bne.n	3800 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3894:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3898:	6903      	ldr	r3, [r0, #16]
    389a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    389c:	4334      	orrs	r4, r6
    389e:	4322      	orrs	r2, r4
    38a0:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    38a2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    38a6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    38aa:	2000      	movs	r0, #0
}
    38ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    38ae:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    38b2:	e7ef      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    38b4:	4b13      	ldr	r3, [pc, #76]	; (3904 <uarte_nrfx_configure+0x154>)
    38b6:	e7ed      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    38b8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    38bc:	e7ea      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    38be:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    38c2:	e7e7      	b.n	3894 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    38c4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    38c8:	e7e4      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    38ca:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    38ce:	e7e1      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    38d0:	4b0d      	ldr	r3, [pc, #52]	; (3908 <uarte_nrfx_configure+0x158>)
    38d2:	e7df      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    38d4:	4b0d      	ldr	r3, [pc, #52]	; (390c <uarte_nrfx_configure+0x15c>)
    38d6:	e7dd      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    38d8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    38dc:	e7da      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    38de:	4b0c      	ldr	r3, [pc, #48]	; (3910 <uarte_nrfx_configure+0x160>)
    38e0:	e7d8      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    38e2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    38e6:	e7d5      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    38e8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    38ec:	e7d2      	b.n	3894 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    38ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    38f2:	e7cf      	b.n	3894 <uarte_nrfx_configure+0xe4>
    38f4:	0013b000 	.word	0x0013b000
    38f8:	004ea000 	.word	0x004ea000
    38fc:	0003d090 	.word	0x0003d090
    3900:	000f4240 	.word	0x000f4240
    3904:	00275000 	.word	0x00275000
    3908:	0075c000 	.word	0x0075c000
    390c:	003af000 	.word	0x003af000
    3910:	013a9000 	.word	0x013a9000

00003914 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3914:	6802      	ldr	r2, [r0, #0]
    switch (port)
    3916:	0953      	lsrs	r3, r2, #5
{
    3918:	b510      	push	{r4, lr}
    391a:	4604      	mov	r4, r0
    switch (port)
    391c:	d02c      	beq.n	3978 <nrf_gpio_pin_port_decode+0x64>
    391e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3920:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3924:	bf18      	it	ne
    3926:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3928:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    392c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    392e:	07db      	lsls	r3, r3, #31
    3930:	d40b      	bmi.n	394a <nrf_gpio_pin_port_decode+0x36>
    3932:	4914      	ldr	r1, [pc, #80]	; (3984 <nrf_gpio_pin_port_decode+0x70>)
    3934:	4814      	ldr	r0, [pc, #80]	; (3988 <nrf_gpio_pin_port_decode+0x74>)
    3936:	4a15      	ldr	r2, [pc, #84]	; (398c <nrf_gpio_pin_port_decode+0x78>)
    3938:	f240 2329 	movw	r3, #553	; 0x229
    393c:	f003 ff8b 	bl	7856 <printk>
    3940:	4812      	ldr	r0, [pc, #72]	; (398c <nrf_gpio_pin_port_decode+0x78>)
    3942:	f240 2129 	movw	r1, #553	; 0x229
    3946:	f003 feb2 	bl	76ae <assert_post_action>
    uint32_t pin_number = *p_pin;
    394a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    394c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3950:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3952:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3954:	d00d      	beq.n	3972 <nrf_gpio_pin_port_decode+0x5e>
    3956:	2b01      	cmp	r3, #1
    3958:	d011      	beq.n	397e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    395a:	490d      	ldr	r1, [pc, #52]	; (3990 <nrf_gpio_pin_port_decode+0x7c>)
    395c:	480a      	ldr	r0, [pc, #40]	; (3988 <nrf_gpio_pin_port_decode+0x74>)
    395e:	4a0b      	ldr	r2, [pc, #44]	; (398c <nrf_gpio_pin_port_decode+0x78>)
    3960:	f240 232e 	movw	r3, #558	; 0x22e
    3964:	f003 ff77 	bl	7856 <printk>
    3968:	4808      	ldr	r0, [pc, #32]	; (398c <nrf_gpio_pin_port_decode+0x78>)
    396a:	f240 212e 	movw	r1, #558	; 0x22e
    396e:	f003 fe9e 	bl	76ae <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3972:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3976:	bd10      	pop	{r4, pc}
    switch (port)
    3978:	f04f 33ff 	mov.w	r3, #4294967295
    397c:	e7d4      	b.n	3928 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    397e:	4805      	ldr	r0, [pc, #20]	; (3994 <nrf_gpio_pin_port_decode+0x80>)
    3980:	e7f9      	b.n	3976 <nrf_gpio_pin_port_decode+0x62>
    3982:	bf00      	nop
    3984:	00008d78 	.word	0x00008d78
    3988:	00008224 	.word	0x00008224
    398c:	00008d45 	.word	0x00008d45
    3990:	00008874 	.word	0x00008874
    3994:	50000300 	.word	0x50000300

00003998 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    399a:	6906      	ldr	r6, [r0, #16]
{
    399c:	4605      	mov	r5, r0
    399e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    39a0:	f004 f9ce 	bl	7d40 <k_is_in_isr>
    39a4:	b910      	cbnz	r0, 39ac <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    39a6:	4b2c      	ldr	r3, [pc, #176]	; (3a58 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    39a8:	781b      	ldrb	r3, [r3, #0]
    39aa:	b983      	cbnz	r3, 39ce <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    39ac:	f04f 0320 	mov.w	r3, #32
    39b0:	f3ef 8411 	mrs	r4, BASEPRI
    39b4:	f383 8812 	msr	BASEPRI_MAX, r3
    39b8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    39bc:	4628      	mov	r0, r5
    39be:	f004 f8a0 	bl	7b02 <is_tx_ready>
    39c2:	bb28      	cbnz	r0, 3a10 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    39c4:	f384 8811 	msr	BASEPRI, r4
    39c8:	f3bf 8f6f 	isb	sy
}
    39cc:	e7ee      	b.n	39ac <uarte_nrfx_poll_out+0x14>
{
    39ce:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    39d0:	4628      	mov	r0, r5
    39d2:	f004 f896 	bl	7b02 <is_tx_ready>
    39d6:	b970      	cbnz	r0, 39f6 <uarte_nrfx_poll_out+0x5e>
    39d8:	2001      	movs	r0, #1
    39da:	f004 f8e4 	bl	7ba6 <nrfx_busy_wait>
    39de:	3c01      	subs	r4, #1
    39e0:	d1f6      	bne.n	39d0 <uarte_nrfx_poll_out+0x38>
    39e2:	2100      	movs	r1, #0
    39e4:	2021      	movs	r0, #33	; 0x21
    39e6:	f002 fe47 	bl	6678 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    39ea:	e7f0      	b.n	39ce <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    39ec:	f384 8811 	msr	BASEPRI, r4
    39f0:	f3bf 8f6f 	isb	sy
}
    39f4:	e7f5      	b.n	39e2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    39f6:	f04f 0320 	mov.w	r3, #32
    39fa:	f3ef 8411 	mrs	r4, BASEPRI
    39fe:	f383 8812 	msr	BASEPRI_MAX, r3
    3a02:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3a06:	4628      	mov	r0, r5
    3a08:	f004 f87b 	bl	7b02 <is_tx_ready>
    3a0c:	2800      	cmp	r0, #0
    3a0e:	d0ed      	beq.n	39ec <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3a10:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3a14:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3a16:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3a18:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3a1a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3a1e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a22:	2200      	movs	r2, #0
    3a24:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3a28:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3a2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3a30:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3a34:	684a      	ldr	r2, [r1, #4]
    3a36:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3a38:	bf41      	itttt	mi
    3a3a:	2208      	movmi	r2, #8
    3a3c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3a40:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3a44:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a48:	2201      	movs	r2, #1
    3a4a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3a4c:	f384 8811 	msr	BASEPRI, r4
    3a50:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    3a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a56:	bf00      	nop
    3a58:	20000e55 	.word	0x20000e55

00003a5c <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3a5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3a60:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3a64:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    3a66:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3a6a:	2300      	movs	r3, #0
    3a6c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3a70:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    3a72:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a74:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    3a76:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3a78:	1c58      	adds	r0, r3, #1
    3a7a:	d013      	beq.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3a7c:	a801      	add	r0, sp, #4
    3a7e:	9301      	str	r3, [sp, #4]
    3a80:	f7ff ff48 	bl	3914 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3a84:	9a01      	ldr	r2, [sp, #4]
    3a86:	2301      	movs	r3, #1
    3a88:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3a8a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3a8e:	68eb      	ldr	r3, [r5, #12]
    3a90:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3a92:	a801      	add	r0, sp, #4
    3a94:	f7ff ff3e 	bl	3914 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3a98:	9b01      	ldr	r3, [sp, #4]
    3a9a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3a9e:	2203      	movs	r2, #3
    3aa0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3aa4:	692b      	ldr	r3, [r5, #16]
    3aa6:	1c59      	adds	r1, r3, #1
    3aa8:	d011      	beq.n	3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
    3aaa:	7f2a      	ldrb	r2, [r5, #28]
    3aac:	9301      	str	r3, [sp, #4]
    3aae:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ab0:	a801      	add	r0, sp, #4
    3ab2:	bf14      	ite	ne
    3ab4:	f04f 0903 	movne.w	r9, #3
    3ab8:	f04f 0900 	moveq.w	r9, #0
    3abc:	f7ff ff2a 	bl	3914 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3ac0:	9b01      	ldr	r3, [sp, #4]
    3ac2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3ac6:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3aca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3ace:	696b      	ldr	r3, [r5, #20]
    3ad0:	1c5a      	adds	r2, r3, #1
    3ad2:	d013      	beq.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ad4:	a801      	add	r0, sp, #4
    3ad6:	9301      	str	r3, [sp, #4]
    3ad8:	f7ff ff1c 	bl	3914 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3adc:	9a01      	ldr	r2, [sp, #4]
    3ade:	2301      	movs	r3, #1
    3ae0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3ae2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3ae6:	696b      	ldr	r3, [r5, #20]
    3ae8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3aea:	a801      	add	r0, sp, #4
    3aec:	f7ff ff12 	bl	3914 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3af0:	9b01      	ldr	r3, [sp, #4]
    3af2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3af6:	2203      	movs	r2, #3
    3af8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3afc:	69ab      	ldr	r3, [r5, #24]
    3afe:	1c58      	adds	r0, r3, #1
    3b00:	d011      	beq.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3b02:	7f6a      	ldrb	r2, [r5, #29]
    3b04:	9301      	str	r3, [sp, #4]
    3b06:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3b08:	a801      	add	r0, sp, #4
    3b0a:	bf14      	ite	ne
    3b0c:	f04f 0903 	movne.w	r9, #3
    3b10:	f04f 0900 	moveq.w	r9, #0
    3b14:	f7ff fefe 	bl	3914 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3b18:	9b01      	ldr	r3, [sp, #4]
    3b1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3b1e:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3b22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3b26:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    3b2a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    3b2c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3b30:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3b34:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    3b38:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3b3c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    3b3e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    3b42:	3104      	adds	r1, #4
    3b44:	4630      	mov	r0, r6
    3b46:	f7ff fe33 	bl	37b0 <uarte_nrfx_configure>
	if (err) {
    3b4a:	4605      	mov	r5, r0
    3b4c:	2800      	cmp	r0, #0
    3b4e:	d146      	bne.n	3bde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x146>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3b50:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3b54:	0799      	lsls	r1, r3, #30
    3b56:	d519      	bpl.n	3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3b58:	f107 0012 	add.w	r0, r7, #18
    3b5c:	f001 f820 	bl	4ba0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3b60:	4b22      	ldr	r3, [pc, #136]	; (3bec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x154>)
    3b62:	4298      	cmp	r0, r3
    3b64:	d13f      	bne.n	3be6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14e>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3b66:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3b68:	00c3      	lsls	r3, r0, #3
    3b6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3b6e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3b72:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3b76:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3b7a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3b7e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3b82:	4a1b      	ldr	r2, [pc, #108]	; (3bf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x158>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3b84:	2301      	movs	r3, #1
    3b86:	4083      	lsls	r3, r0
    3b88:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3b8c:	2308      	movs	r3, #8
    3b8e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    3b92:	f898 3008 	ldrb.w	r3, [r8, #8]
    3b96:	b95b      	cbnz	r3, 3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b98:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3b9c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3ba0:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3ba4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3ba8:	2301      	movs	r3, #1
    3baa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bae:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3bb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3bb4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3bb6:	bf5c      	itt	pl
    3bb8:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3bbc:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3bc0:	06db      	lsls	r3, r3, #27
    3bc2:	bf44      	itt	mi
    3bc4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3bc8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3bcc:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    3bce:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3bd0:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3bd4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bd8:	2301      	movs	r3, #1
    3bda:	60a3      	str	r3, [r4, #8]
    3bdc:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3bde:	4628      	mov	r0, r5
    3be0:	b003      	add	sp, #12
    3be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    3be6:	f06f 0504 	mvn.w	r5, #4
    3bea:	e7f8      	b.n	3bde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x146>
    3bec:	0bad0000 	.word	0x0bad0000
    3bf0:	4001f000 	.word	0x4001f000

00003bf4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3bf4:	4919      	ldr	r1, [pc, #100]	; (3c5c <sys_clock_timeout_handler+0x68>)
{
    3bf6:	b570      	push	{r4, r5, r6, lr}
    3bf8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3bfa:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3bfe:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3c00:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3c04:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3c08:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3c0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3c0e:	f04f 0500 	mov.w	r5, #0
    3c12:	d20a      	bcs.n	3c2a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3c14:	4b12      	ldr	r3, [pc, #72]	; (3c60 <sys_clock_timeout_handler+0x6c>)
    3c16:	6819      	ldr	r1, [r3, #0]
    3c18:	060a      	lsls	r2, r1, #24
    3c1a:	0a0b      	lsrs	r3, r1, #8
    3c1c:	1992      	adds	r2, r2, r6
    3c1e:	4911      	ldr	r1, [pc, #68]	; (3c64 <sys_clock_timeout_handler+0x70>)
    3c20:	f143 0300 	adc.w	r3, r3, #0
    3c24:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3c28:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3c2a:	f003 fa03 	bl	7034 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3c2e:	00a3      	lsls	r3, r4, #2
    3c30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3c34:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3c38:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3c3c:	42b2      	cmp	r2, r6
    3c3e:	d10b      	bne.n	3c58 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3c40:	b91d      	cbnz	r5, 3c4a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    3c42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3c46:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3c4a:	4b07      	ldr	r3, [pc, #28]	; (3c68 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c4c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3c50:	fa00 f404 	lsl.w	r4, r0, r4
    3c54:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3c58:	bd70      	pop	{r4, r5, r6, pc}
    3c5a:	bf00      	nop
    3c5c:	200001b8 	.word	0x200001b8
    3c60:	20000930 	.word	0x20000930
    3c64:	200001a0 	.word	0x200001a0
    3c68:	40011000 	.word	0x40011000

00003c6c <compare_int_lock>:
{
    3c6c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3c6e:	2301      	movs	r3, #1
    3c70:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3c72:	4a11      	ldr	r2, [pc, #68]	; (3cb8 <compare_int_lock+0x4c>)
    3c74:	f3bf 8f5b 	dmb	ish
    3c78:	43dc      	mvns	r4, r3
    3c7a:	e852 1f00 	ldrex	r1, [r2]
    3c7e:	ea01 0c04 	and.w	ip, r1, r4
    3c82:	e842 ce00 	strex	lr, ip, [r2]
    3c86:	f1be 0f00 	cmp.w	lr, #0
    3c8a:	d1f6      	bne.n	3c7a <compare_int_lock+0xe>
    3c8c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3c94:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    3c98:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3c9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3ca0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3ca4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ca8:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    3cac:	420b      	tst	r3, r1
}
    3cae:	bf14      	ite	ne
    3cb0:	2001      	movne	r0, #1
    3cb2:	2000      	moveq	r0, #0
    3cb4:	bd10      	pop	{r4, pc}
    3cb6:	bf00      	nop
    3cb8:	2000092c 	.word	0x2000092c

00003cbc <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    3cbc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3cbe:	4a12      	ldr	r2, [pc, #72]	; (3d08 <compare_int_unlock.part.0+0x4c>)
    3cc0:	f3bf 8f5b 	dmb	ish
    3cc4:	4083      	lsls	r3, r0
    3cc6:	e852 1f00 	ldrex	r1, [r2]
    3cca:	4319      	orrs	r1, r3
    3ccc:	e842 1c00 	strex	ip, r1, [r2]
    3cd0:	f1bc 0f00 	cmp.w	ip, #0
    3cd4:	d1f7      	bne.n	3cc6 <compare_int_unlock.part.0+0xa>
    3cd6:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3cda:	4a0c      	ldr	r2, [pc, #48]	; (3d0c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ce0:	4083      	lsls	r3, r0
    3ce2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3ce6:	4b0a      	ldr	r3, [pc, #40]	; (3d10 <compare_int_unlock.part.0+0x54>)
    3ce8:	f3bf 8f5b 	dmb	ish
    3cec:	681b      	ldr	r3, [r3, #0]
    3cee:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3cf2:	fa23 f000 	lsr.w	r0, r3, r0
    3cf6:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3cf8:	bf42      	ittt	mi
    3cfa:	4b06      	ldrmi	r3, [pc, #24]	; (3d14 <compare_int_unlock.part.0+0x58>)
    3cfc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3d00:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3d04:	4770      	bx	lr
    3d06:	bf00      	nop
    3d08:	2000092c 	.word	0x2000092c
    3d0c:	40011000 	.word	0x40011000
    3d10:	20000928 	.word	0x20000928
    3d14:	e000e100 	.word	0xe000e100

00003d18 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3d18:	4b0d      	ldr	r3, [pc, #52]	; (3d50 <z_nrf_rtc_timer_read+0x38>)
    3d1a:	681b      	ldr	r3, [r3, #0]
    3d1c:	0a19      	lsrs	r1, r3, #8
    3d1e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3d20:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3d24:	4b0b      	ldr	r3, [pc, #44]	; (3d54 <z_nrf_rtc_timer_read+0x3c>)
    3d26:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3d2a:	18c0      	adds	r0, r0, r3
    3d2c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3d34:	d20a      	bcs.n	3d4c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3d36:	4b08      	ldr	r3, [pc, #32]	; (3d58 <z_nrf_rtc_timer_read+0x40>)
    3d38:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d3c:	4299      	cmp	r1, r3
    3d3e:	bf08      	it	eq
    3d40:	4290      	cmpeq	r0, r2
    3d42:	d203      	bcs.n	3d4c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3d44:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3d48:	f141 0100 	adc.w	r1, r1, #0
}
    3d4c:	4770      	bx	lr
    3d4e:	bf00      	nop
    3d50:	20000930 	.word	0x20000930
    3d54:	40011000 	.word	0x40011000
    3d58:	200001a0 	.word	0x200001a0

00003d5c <compare_set>:
{
    3d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d60:	b085      	sub	sp, #20
    3d62:	4616      	mov	r6, r2
    3d64:	461f      	mov	r7, r3
    3d66:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3d68:	f7ff ff80 	bl	3c6c <compare_int_lock>
    3d6c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3d6e:	f7ff ffd3 	bl	3d18 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3d72:	42b9      	cmp	r1, r7
    3d74:	bf08      	it	eq
    3d76:	42b0      	cmpeq	r0, r6
    3d78:	d27f      	bcs.n	3e7a <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    3d7a:	ebb6 0800 	subs.w	r8, r6, r0
    3d7e:	eb67 0901 	sbc.w	r9, r7, r1
    3d82:	2300      	movs	r3, #0
    3d84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3d88:	454b      	cmp	r3, r9
    3d8a:	bf08      	it	eq
    3d8c:	4542      	cmpeq	r2, r8
    3d8e:	f0c0 8085 	bcc.w	3e9c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    3d92:	4b44      	ldr	r3, [pc, #272]	; (3ea4 <compare_set+0x148>)
    3d94:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3d98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3d9c:	429f      	cmp	r7, r3
    3d9e:	bf08      	it	eq
    3da0:	4296      	cmpeq	r6, r2
    3da2:	d054      	beq.n	3e4e <compare_set+0xf2>
    3da4:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3da8:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    3dac:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3db0:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3db4:	fa0b f205 	lsl.w	r2, fp, r5
    3db8:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3dbc:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3dc0:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3dc4:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    3dc6:	4a38      	ldr	r2, [pc, #224]	; (3ea8 <compare_set+0x14c>)
    return p_reg->CC[ch];
    3dc8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    3dcc:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3dd0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3dd4:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3dd8:	461c      	mov	r4, r3
    3dda:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    3ddc:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3de0:	eba0 000a 	sub.w	r0, r0, sl
    3de4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3de8:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3dec:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3dee:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    3df2:	d105      	bne.n	3e00 <compare_set+0xa4>
    3df4:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    3df6:	2013      	movs	r0, #19
    3df8:	f003 ffac 	bl	7d54 <z_impl_k_busy_wait>
    3dfc:	4a2a      	ldr	r2, [pc, #168]	; (3ea8 <compare_set+0x14c>)
    3dfe:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    3e00:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3e02:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3e06:	eba4 000c 	sub.w	r0, r4, ip
    3e0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3e0e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3e12:	bf88      	it	hi
    3e14:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e16:	2000      	movs	r0, #0
    3e18:	f8c8 0000 	str.w	r0, [r8]
    3e1c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    3e20:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3e24:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3e28:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3e2c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3e30:	4582      	cmp	sl, r0
    3e32:	d006      	beq.n	3e42 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3e34:	1a20      	subs	r0, r4, r0
    3e36:	3802      	subs	r0, #2
    3e38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3e3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3e40:	d819      	bhi.n	3e76 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    3e42:	1ae4      	subs	r4, r4, r3
    3e44:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3e48:	1932      	adds	r2, r6, r4
    3e4a:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    3e4e:	4c15      	ldr	r4, [pc, #84]	; (3ea4 <compare_set+0x148>)
    3e50:	0129      	lsls	r1, r5, #4
    3e52:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3e56:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    3e5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    3e5e:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3e60:	6043      	str	r3, [r0, #4]
	return ret;
    3e62:	2400      	movs	r4, #0
	if (key) {
    3e64:	9b01      	ldr	r3, [sp, #4]
    3e66:	b113      	cbz	r3, 3e6e <compare_set+0x112>
    3e68:	4628      	mov	r0, r5
    3e6a:	f7ff ff27 	bl	3cbc <compare_int_unlock.part.0>
}
    3e6e:	4620      	mov	r0, r4
    3e70:	b005      	add	sp, #20
    3e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e76:	4620      	mov	r0, r4
    3e78:	e7b0      	b.n	3ddc <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    3e7a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3e7c:	4a0b      	ldr	r2, [pc, #44]	; (3eac <compare_set+0x150>)
    3e7e:	f3bf 8f5b 	dmb	ish
    3e82:	40ab      	lsls	r3, r5
    3e84:	e852 1f00 	ldrex	r1, [r2]
    3e88:	4319      	orrs	r1, r3
    3e8a:	e842 1000 	strex	r0, r1, [r2]
    3e8e:	2800      	cmp	r0, #0
    3e90:	d1f8      	bne.n	3e84 <compare_set+0x128>
    3e92:	f3bf 8f5b 	dmb	ish
    3e96:	4632      	mov	r2, r6
    3e98:	463b      	mov	r3, r7
    3e9a:	e7d8      	b.n	3e4e <compare_set+0xf2>
			return -EINVAL;
    3e9c:	f06f 0415 	mvn.w	r4, #21
    3ea0:	e7e0      	b.n	3e64 <compare_set+0x108>
    3ea2:	bf00      	nop
    3ea4:	200001a8 	.word	0x200001a8
    3ea8:	40011000 	.word	0x40011000
    3eac:	20000928 	.word	0x20000928

00003eb0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3eb2:	4b19      	ldr	r3, [pc, #100]	; (3f18 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3eb4:	4d19      	ldr	r5, [pc, #100]	; (3f1c <sys_clock_driver_init+0x6c>)
    3eb6:	2400      	movs	r4, #0
    3eb8:	f04f 30ff 	mov.w	r0, #4294967295
    3ebc:	f04f 31ff 	mov.w	r1, #4294967295
    3ec0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3ec4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ecc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ed0:	4b13      	ldr	r3, [pc, #76]	; (3f20 <sys_clock_driver_init+0x70>)
    3ed2:	2602      	movs	r6, #2
    3ed4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3ed8:	2101      	movs	r1, #1
    3eda:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3ede:	2011      	movs	r0, #17
    3ee0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3ee4:	4622      	mov	r2, r4
    3ee6:	f7fe fbf3 	bl	26d0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3eea:	2011      	movs	r0, #17
    3eec:	f7fe fbd2 	bl	2694 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3ef0:	4a0c      	ldr	r2, [pc, #48]	; (3f24 <sys_clock_driver_init+0x74>)
    3ef2:	2301      	movs	r3, #1
    3ef4:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3ef6:	4a0c      	ldr	r2, [pc, #48]	; (3f28 <sys_clock_driver_init+0x78>)
    3ef8:	602b      	str	r3, [r5, #0]
    3efa:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3efc:	4b0b      	ldr	r3, [pc, #44]	; (3f2c <sys_clock_driver_init+0x7c>)
    3efe:	4a0c      	ldr	r2, [pc, #48]	; (3f30 <sys_clock_driver_init+0x80>)
    3f00:	9300      	str	r3, [sp, #0]
    3f02:	9401      	str	r4, [sp, #4]
    3f04:	2300      	movs	r3, #0
    3f06:	4620      	mov	r0, r4
    3f08:	f7ff ff28 	bl	3d5c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3f0c:	4630      	mov	r0, r6
    3f0e:	f7ff f973 	bl	31f8 <z_nrf_clock_control_lf_on>

	return 0;
}
    3f12:	4620      	mov	r0, r4
    3f14:	b002      	add	sp, #8
    3f16:	bd70      	pop	{r4, r5, r6, pc}
    3f18:	200001a8 	.word	0x200001a8
    3f1c:	40011000 	.word	0x40011000
    3f20:	e000e100 	.word	0xe000e100
    3f24:	40011008 	.word	0x40011008
    3f28:	2000092c 	.word	0x2000092c
    3f2c:	00003bf5 	.word	0x00003bf5
    3f30:	007fffff 	.word	0x007fffff

00003f34 <rtc_nrf_isr>:
{
    3f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3f38:	4c34      	ldr	r4, [pc, #208]	; (400c <rtc_nrf_isr+0xd8>)
    3f3a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3f3e:	079a      	lsls	r2, r3, #30
    3f40:	d509      	bpl.n	3f56 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f42:	4b33      	ldr	r3, [pc, #204]	; (4010 <rtc_nrf_isr+0xdc>)
    3f44:	681a      	ldr	r2, [r3, #0]
    3f46:	b132      	cbz	r2, 3f56 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f48:	2200      	movs	r2, #0
    3f4a:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3f4c:	4a31      	ldr	r2, [pc, #196]	; (4014 <rtc_nrf_isr+0xe0>)
    3f4e:	681b      	ldr	r3, [r3, #0]
    3f50:	6813      	ldr	r3, [r2, #0]
    3f52:	3301      	adds	r3, #1
    3f54:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3f56:	f04f 0320 	mov.w	r3, #32
    3f5a:	f3ef 8211 	mrs	r2, BASEPRI
    3f5e:	f383 8812 	msr	BASEPRI_MAX, r3
    3f62:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3f66:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3f6a:	03db      	lsls	r3, r3, #15
    3f6c:	d512      	bpl.n	3f94 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3f6e:	f3bf 8f5b 	dmb	ish
    3f72:	4b29      	ldr	r3, [pc, #164]	; (4018 <rtc_nrf_isr+0xe4>)
    3f74:	e853 1f00 	ldrex	r1, [r3]
    3f78:	f021 0001 	bic.w	r0, r1, #1
    3f7c:	e843 0600 	strex	r6, r0, [r3]
    3f80:	2e00      	cmp	r6, #0
    3f82:	d1f7      	bne.n	3f74 <rtc_nrf_isr+0x40>
    3f84:	f3bf 8f5b 	dmb	ish
    3f88:	4b24      	ldr	r3, [pc, #144]	; (401c <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3f8a:	2900      	cmp	r1, #0
    3f8c:	d136      	bne.n	3ffc <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f8e:	6819      	ldr	r1, [r3, #0]
		if (result) {
    3f90:	2900      	cmp	r1, #0
    3f92:	d133      	bne.n	3ffc <rtc_nrf_isr+0xc8>
{
    3f94:	2300      	movs	r3, #0
	__asm__ volatile(
    3f96:	f382 8811 	msr	BASEPRI, r2
    3f9a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3f9e:	b353      	cbz	r3, 3ff6 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    3fa0:	f7ff feba 	bl	3d18 <z_nrf_rtc_timer_read>
    3fa4:	4606      	mov	r6, r0
	__asm__ volatile(
    3fa6:	f04f 0320 	mov.w	r3, #32
    3faa:	f3ef 8011 	mrs	r0, BASEPRI
    3fae:	f383 8812 	msr	BASEPRI_MAX, r3
    3fb2:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3fb6:	4b1a      	ldr	r3, [pc, #104]	; (4020 <rtc_nrf_isr+0xec>)
    3fb8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3fbc:	4549      	cmp	r1, r9
    3fbe:	bf08      	it	eq
    3fc0:	4546      	cmpeq	r6, r8
    3fc2:	f04f 0200 	mov.w	r2, #0
    3fc6:	d31e      	bcc.n	4006 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3fc8:	f04f 36ff 	mov.w	r6, #4294967295
    3fcc:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    3fd0:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3fd4:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    3fd8:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3fde:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3fe2:	f380 8811 	msr	BASEPRI, r0
    3fe6:	f3bf 8f6f 	isb	sy
		if (handler) {
    3fea:	b121      	cbz	r1, 3ff6 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    3fec:	9500      	str	r5, [sp, #0]
    3fee:	4642      	mov	r2, r8
    3ff0:	464b      	mov	r3, r9
    3ff2:	2000      	movs	r0, #0
    3ff4:	4788      	blx	r1
}
    3ff6:	b003      	add	sp, #12
    3ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ffc:	2100      	movs	r1, #0
    3ffe:	6019      	str	r1, [r3, #0]
    4000:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4002:	2301      	movs	r3, #1
}
    4004:	e7c7      	b.n	3f96 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4006:	4611      	mov	r1, r2
    4008:	e7eb      	b.n	3fe2 <rtc_nrf_isr+0xae>
    400a:	bf00      	nop
    400c:	40011000 	.word	0x40011000
    4010:	40011104 	.word	0x40011104
    4014:	20000930 	.word	0x20000930
    4018:	20000928 	.word	0x20000928
    401c:	40011140 	.word	0x40011140
    4020:	200001a8 	.word	0x200001a8

00004024 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4024:	4b14      	ldr	r3, [pc, #80]	; (4078 <sys_clock_set_timeout+0x54>)
{
    4026:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4028:	f1b0 3fff 	cmp.w	r0, #4294967295
    402c:	bf08      	it	eq
    402e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4030:	1e44      	subs	r4, r0, #1
    4032:	2c00      	cmp	r4, #0
    4034:	dd1e      	ble.n	4074 <sys_clock_set_timeout+0x50>
    4036:	429c      	cmp	r4, r3
    4038:	bfa8      	it	ge
    403a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    403c:	f7ff fe6c 	bl	3d18 <z_nrf_rtc_timer_read>
    4040:	4b0e      	ldr	r3, [pc, #56]	; (407c <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4042:	490f      	ldr	r1, [pc, #60]	; (4080 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4044:	e9d3 2300 	ldrd	r2, r3, [r3]
    4048:	1a80      	subs	r0, r0, r2
		ticks = 0;
    404a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    404e:	bf28      	it	cs
    4050:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4052:	3001      	adds	r0, #1
    4054:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    4056:	4808      	ldr	r0, [pc, #32]	; (4078 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4058:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    405a:	4284      	cmp	r4, r0
    405c:	bf28      	it	cs
    405e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4060:	1912      	adds	r2, r2, r4
    4062:	f04f 0000 	mov.w	r0, #0
    4066:	9001      	str	r0, [sp, #4]
    4068:	f143 0300 	adc.w	r3, r3, #0
    406c:	f7ff fe76 	bl	3d5c <compare_set>
}
    4070:	b002      	add	sp, #8
    4072:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4074:	2400      	movs	r4, #0
    4076:	e7e1      	b.n	403c <sys_clock_set_timeout+0x18>
    4078:	007fffff 	.word	0x007fffff
    407c:	200001b8 	.word	0x200001b8
    4080:	00003bf5 	.word	0x00003bf5

00004084 <sys_clock_elapsed>:
{
    4084:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4086:	f7ff fe47 	bl	3d18 <z_nrf_rtc_timer_read>
    408a:	4b02      	ldr	r3, [pc, #8]	; (4094 <sys_clock_elapsed+0x10>)
    408c:	681b      	ldr	r3, [r3, #0]
}
    408e:	1ac0      	subs	r0, r0, r3
    4090:	bd08      	pop	{r3, pc}
    4092:	bf00      	nop
    4094:	200001b8 	.word	0x200001b8

00004098 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    4098:	b508      	push	{r3, lr}
    switch (domain)
    409a:	b178      	cbz	r0, 40bc <nrf_clock_is_running.constprop.0+0x24>
    409c:	2801      	cmp	r0, #1
    409e:	d01c      	beq.n	40da <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    40a0:	4a14      	ldr	r2, [pc, #80]	; (40f4 <nrf_clock_is_running.constprop.0+0x5c>)
    40a2:	4915      	ldr	r1, [pc, #84]	; (40f8 <nrf_clock_is_running.constprop.0+0x60>)
    40a4:	4815      	ldr	r0, [pc, #84]	; (40fc <nrf_clock_is_running.constprop.0+0x64>)
    40a6:	f44f 734f 	mov.w	r3, #828	; 0x33c
    40aa:	f003 fbd4 	bl	7856 <printk>
    40ae:	4811      	ldr	r0, [pc, #68]	; (40f4 <nrf_clock_is_running.constprop.0+0x5c>)
    40b0:	f44f 714f 	mov.w	r1, #828	; 0x33c
    40b4:	f003 fafb 	bl	76ae <assert_post_action>
            return false;
    40b8:	2000      	movs	r0, #0
    40ba:	e00d      	b.n	40d8 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    40bc:	b131      	cbz	r1, 40cc <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    40be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40c2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    40c6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    40ca:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    40cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40d0:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    40d4:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    40d8:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    40da:	b131      	cbz	r1, 40ea <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    40dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    40e4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    40e8:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    40ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40ee:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    40f2:	e7ef      	b.n	40d4 <nrf_clock_is_running.constprop.0+0x3c>
    40f4:	00008db0 	.word	0x00008db0
    40f8:	00008874 	.word	0x00008874
    40fc:	00008224 	.word	0x00008224

00004100 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    4100:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    4102:	4604      	mov	r4, r0
    4104:	b948      	cbnz	r0, 411a <nrfx_clock_init+0x1a>
    4106:	490a      	ldr	r1, [pc, #40]	; (4130 <nrfx_clock_init+0x30>)
    4108:	480a      	ldr	r0, [pc, #40]	; (4134 <nrfx_clock_init+0x34>)
    410a:	4a0b      	ldr	r2, [pc, #44]	; (4138 <nrfx_clock_init+0x38>)
    410c:	23bd      	movs	r3, #189	; 0xbd
    410e:	f003 fba2 	bl	7856 <printk>
    4112:	4809      	ldr	r0, [pc, #36]	; (4138 <nrfx_clock_init+0x38>)
    4114:	21bd      	movs	r1, #189	; 0xbd
    4116:	f003 faca 	bl	76ae <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    411a:	4b08      	ldr	r3, [pc, #32]	; (413c <nrfx_clock_init+0x3c>)
    411c:	791a      	ldrb	r2, [r3, #4]
    411e:	b922      	cbnz	r2, 412a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4120:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    4122:	4807      	ldr	r0, [pc, #28]	; (4140 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    4124:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    4126:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4128:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    412a:	4806      	ldr	r0, [pc, #24]	; (4144 <nrfx_clock_init+0x44>)
    return err_code;
    412c:	e7fc      	b.n	4128 <nrfx_clock_init+0x28>
    412e:	bf00      	nop
    4130:	00008e21 	.word	0x00008e21
    4134:	00008224 	.word	0x00008224
    4138:	00008de4 	.word	0x00008de4
    413c:	20000934 	.word	0x20000934
    4140:	0bad0000 	.word	0x0bad0000
    4144:	0bad000c 	.word	0x0bad000c

00004148 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    4148:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    414a:	4b0b      	ldr	r3, [pc, #44]	; (4178 <nrfx_clock_enable+0x30>)
    414c:	791b      	ldrb	r3, [r3, #4]
    414e:	b94b      	cbnz	r3, 4164 <nrfx_clock_enable+0x1c>
    4150:	490a      	ldr	r1, [pc, #40]	; (417c <nrfx_clock_enable+0x34>)
    4152:	480b      	ldr	r0, [pc, #44]	; (4180 <nrfx_clock_enable+0x38>)
    4154:	4a0b      	ldr	r2, [pc, #44]	; (4184 <nrfx_clock_enable+0x3c>)
    4156:	23d6      	movs	r3, #214	; 0xd6
    4158:	f003 fb7d 	bl	7856 <printk>
    415c:	4809      	ldr	r0, [pc, #36]	; (4184 <nrfx_clock_enable+0x3c>)
    415e:	21d6      	movs	r1, #214	; 0xd6
    4160:	f003 faa5 	bl	76ae <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4164:	2000      	movs	r0, #0
    4166:	f7fe faa5 	bl	26b4 <arch_irq_is_enabled>
    416a:	b918      	cbnz	r0, 4174 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    416c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4170:	f7fe ba90 	b.w	2694 <arch_irq_enable>
    4174:	bd08      	pop	{r3, pc}
    4176:	bf00      	nop
    4178:	20000934 	.word	0x20000934
    417c:	00008e2f 	.word	0x00008e2f
    4180:	00008224 	.word	0x00008224
    4184:	00008de4 	.word	0x00008de4

00004188 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4188:	4b22      	ldr	r3, [pc, #136]	; (4214 <nrfx_clock_start+0x8c>)
    418a:	791b      	ldrb	r3, [r3, #4]
{
    418c:	b513      	push	{r0, r1, r4, lr}
    418e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4190:	b95b      	cbnz	r3, 41aa <nrfx_clock_start+0x22>
    4192:	4921      	ldr	r1, [pc, #132]	; (4218 <nrfx_clock_start+0x90>)
    4194:	4821      	ldr	r0, [pc, #132]	; (421c <nrfx_clock_start+0x94>)
    4196:	4a22      	ldr	r2, [pc, #136]	; (4220 <nrfx_clock_start+0x98>)
    4198:	f44f 7389 	mov.w	r3, #274	; 0x112
    419c:	f003 fb5b 	bl	7856 <printk>
    41a0:	481f      	ldr	r0, [pc, #124]	; (4220 <nrfx_clock_start+0x98>)
    41a2:	f44f 7189 	mov.w	r1, #274	; 0x112
    41a6:	f003 fa82 	bl	76ae <assert_post_action>
    switch (domain)
    41aa:	b174      	cbz	r4, 41ca <nrfx_clock_start+0x42>
    41ac:	2c01      	cmp	r4, #1
    41ae:	d027      	beq.n	4200 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    41b0:	4a1b      	ldr	r2, [pc, #108]	; (4220 <nrfx_clock_start+0x98>)
    41b2:	491c      	ldr	r1, [pc, #112]	; (4224 <nrfx_clock_start+0x9c>)
    41b4:	4819      	ldr	r0, [pc, #100]	; (421c <nrfx_clock_start+0x94>)
    41b6:	f44f 73a2 	mov.w	r3, #324	; 0x144
    41ba:	f003 fb4c 	bl	7856 <printk>
    41be:	4818      	ldr	r0, [pc, #96]	; (4220 <nrfx_clock_start+0x98>)
    41c0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    41c4:	f003 fa73 	bl	76ae <assert_post_action>
            break;
    }
}
    41c8:	e016      	b.n	41f8 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    41ca:	a901      	add	r1, sp, #4
    41cc:	4620      	mov	r0, r4
    41ce:	f7ff ff63 	bl	4098 <nrf_clock_is_running.constprop.0>
    41d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41d6:	b188      	cbz	r0, 41fc <nrfx_clock_start+0x74>
    41d8:	9a01      	ldr	r2, [sp, #4]
    41da:	2a01      	cmp	r2, #1
    41dc:	d10e      	bne.n	41fc <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    41de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41e2:	4b11      	ldr	r3, [pc, #68]	; (4228 <nrfx_clock_start+0xa0>)
    41e4:	2200      	movs	r2, #0
    41e6:	601a      	str	r2, [r3, #0]
    41e8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    41ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41ee:	2202      	movs	r2, #2
    41f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41f4:	2201      	movs	r2, #1
    41f6:	609a      	str	r2, [r3, #8]
}
    41f8:	b002      	add	sp, #8
    41fa:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    41fc:	2200      	movs	r2, #0
    41fe:	e7ee      	b.n	41de <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4200:	4b0a      	ldr	r3, [pc, #40]	; (422c <nrfx_clock_start+0xa4>)
    4202:	2200      	movs	r2, #0
    4204:	601a      	str	r2, [r3, #0]
    4206:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    420c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4210:	601c      	str	r4, [r3, #0]
}
    4212:	e7f1      	b.n	41f8 <nrfx_clock_start+0x70>
    4214:	20000934 	.word	0x20000934
    4218:	00008e2f 	.word	0x00008e2f
    421c:	00008224 	.word	0x00008224
    4220:	00008de4 	.word	0x00008de4
    4224:	00008874 	.word	0x00008874
    4228:	40000104 	.word	0x40000104
    422c:	40000100 	.word	0x40000100

00004230 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4230:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4232:	4d2f      	ldr	r5, [pc, #188]	; (42f0 <nrfx_clock_stop+0xc0>)
    4234:	792a      	ldrb	r2, [r5, #4]
{
    4236:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4238:	b95a      	cbnz	r2, 4252 <nrfx_clock_stop+0x22>
    423a:	492e      	ldr	r1, [pc, #184]	; (42f4 <nrfx_clock_stop+0xc4>)
    423c:	482e      	ldr	r0, [pc, #184]	; (42f8 <nrfx_clock_stop+0xc8>)
    423e:	4a2f      	ldr	r2, [pc, #188]	; (42fc <nrfx_clock_stop+0xcc>)
    4240:	f240 134b 	movw	r3, #331	; 0x14b
    4244:	f003 fb07 	bl	7856 <printk>
    4248:	482c      	ldr	r0, [pc, #176]	; (42fc <nrfx_clock_stop+0xcc>)
    424a:	f240 114b 	movw	r1, #331	; 0x14b
    424e:	f003 fa2e 	bl	76ae <assert_post_action>
    switch (domain)
    4252:	b17c      	cbz	r4, 4274 <nrfx_clock_stop+0x44>
    4254:	2c01      	cmp	r4, #1
    4256:	d028      	beq.n	42aa <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4258:	4929      	ldr	r1, [pc, #164]	; (4300 <nrfx_clock_stop+0xd0>)
    425a:	4827      	ldr	r0, [pc, #156]	; (42f8 <nrfx_clock_stop+0xc8>)
    425c:	4a27      	ldr	r2, [pc, #156]	; (42fc <nrfx_clock_stop+0xcc>)
    425e:	f240 1367 	movw	r3, #359	; 0x167
    4262:	f003 faf8 	bl	7856 <printk>
    4266:	4825      	ldr	r0, [pc, #148]	; (42fc <nrfx_clock_stop+0xcc>)
    4268:	f240 1167 	movw	r1, #359	; 0x167
    426c:	f003 fa1f 	bl	76ae <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4270:	b003      	add	sp, #12
    4272:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    4274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4278:	2202      	movs	r2, #2
    427a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    427e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    4282:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4286:	2201      	movs	r2, #1
    4288:	681b      	ldr	r3, [r3, #0]
    428a:	4b1e      	ldr	r3, [pc, #120]	; (4304 <nrfx_clock_stop+0xd4>)
    428c:	f242 7410 	movw	r4, #10000	; 0x2710
    4290:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    4292:	2100      	movs	r1, #0
    4294:	4608      	mov	r0, r1
    4296:	f7ff feff 	bl	4098 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    429a:	2800      	cmp	r0, #0
    429c:	d0e8      	beq.n	4270 <nrfx_clock_stop+0x40>
    429e:	2001      	movs	r0, #1
    42a0:	f003 fc81 	bl	7ba6 <nrfx_busy_wait>
    42a4:	3c01      	subs	r4, #1
    42a6:	d1f4      	bne.n	4292 <nrfx_clock_stop+0x62>
    42a8:	e7e2      	b.n	4270 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    42aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42ae:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    42b0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    42b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    42bc:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42be:	4b12      	ldr	r3, [pc, #72]	; (4308 <nrfx_clock_stop+0xd8>)
    42c0:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    42c2:	f88d 4007 	strb.w	r4, [sp, #7]
    42c6:	f242 7410 	movw	r4, #10000	; 0x2710
    42ca:	f10d 0107 	add.w	r1, sp, #7
    42ce:	2001      	movs	r0, #1
    42d0:	f7ff fee2 	bl	4098 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    42d4:	b910      	cbnz	r0, 42dc <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    42d6:	2300      	movs	r3, #0
    42d8:	716b      	strb	r3, [r5, #5]
    42da:	e7c9      	b.n	4270 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    42dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    42e0:	2801      	cmp	r0, #1
    42e2:	d1f8      	bne.n	42d6 <nrfx_clock_stop+0xa6>
    42e4:	f003 fc5f 	bl	7ba6 <nrfx_busy_wait>
    42e8:	3c01      	subs	r4, #1
    42ea:	d1ee      	bne.n	42ca <nrfx_clock_stop+0x9a>
    42ec:	e7f3      	b.n	42d6 <nrfx_clock_stop+0xa6>
    42ee:	bf00      	nop
    42f0:	20000934 	.word	0x20000934
    42f4:	00008e2f 	.word	0x00008e2f
    42f8:	00008224 	.word	0x00008224
    42fc:	00008de4 	.word	0x00008de4
    4300:	00008874 	.word	0x00008874
    4304:	4000000c 	.word	0x4000000c
    4308:	40000004 	.word	0x40000004

0000430c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    430c:	4b16      	ldr	r3, [pc, #88]	; (4368 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    430e:	b507      	push	{r0, r1, r2, lr}
    4310:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4312:	b16a      	cbz	r2, 4330 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4314:	2200      	movs	r2, #0
    4316:	601a      	str	r2, [r3, #0]
    4318:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    431a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    431e:	2201      	movs	r2, #1
    4320:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4324:	4b11      	ldr	r3, [pc, #68]	; (436c <nrfx_power_clock_irq_handler+0x60>)
    4326:	7958      	ldrb	r0, [r3, #5]
    4328:	b910      	cbnz	r0, 4330 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    432a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    432c:	681b      	ldr	r3, [r3, #0]
    432e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4330:	4b0f      	ldr	r3, [pc, #60]	; (4370 <nrfx_power_clock_irq_handler+0x64>)
    4332:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4334:	b16a      	cbz	r2, 4352 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4336:	2000      	movs	r0, #0
    4338:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    433a:	a901      	add	r1, sp, #4
    433c:	681b      	ldr	r3, [r3, #0]
    433e:	f7ff feab 	bl	4098 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4342:	9a01      	ldr	r2, [sp, #4]
    4344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4348:	b932      	cbnz	r2, 4358 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    434a:	2201      	movs	r2, #1
    434c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4350:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4352:	b003      	add	sp, #12
    4354:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    4358:	2202      	movs	r2, #2
    435a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    435e:	4b03      	ldr	r3, [pc, #12]	; (436c <nrfx_power_clock_irq_handler+0x60>)
    4360:	2001      	movs	r0, #1
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	4798      	blx	r3
}
    4366:	e7f4      	b.n	4352 <nrfx_power_clock_irq_handler+0x46>
    4368:	40000100 	.word	0x40000100
    436c:	20000934 	.word	0x20000934
    4370:	40000104 	.word	0x40000104

00004374 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4374:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4376:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4378:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    437a:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    437e:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    4380:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    4384:	d014      	beq.n	43b0 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4386:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    438a:	fa05 f204 	lsl.w	r2, r5, r4
    438e:	ea23 0202 	bic.w	r2, r3, r2
    4392:	e850 6f00 	ldrex	r6, [r0]
    4396:	429e      	cmp	r6, r3
    4398:	d104      	bne.n	43a4 <nrfx_flag32_alloc+0x30>
    439a:	e840 2c00 	strex	ip, r2, [r0]
    439e:	f1bc 0f00 	cmp.w	ip, #0
    43a2:	d1f6      	bne.n	4392 <nrfx_flag32_alloc+0x1e>
    43a4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    43a8:	d1e6      	bne.n	4378 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    43aa:	4802      	ldr	r0, [pc, #8]	; (43b4 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    43ac:	700c      	strb	r4, [r1, #0]
}
    43ae:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    43b0:	4801      	ldr	r0, [pc, #4]	; (43b8 <nrfx_flag32_alloc+0x44>)
    43b2:	e7fc      	b.n	43ae <nrfx_flag32_alloc+0x3a>
    43b4:	0bad0000 	.word	0x0bad0000
    43b8:	0bad0002 	.word	0x0bad0002

000043bc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    43bc:	6803      	ldr	r3, [r0, #0]
    43be:	40cb      	lsrs	r3, r1
    43c0:	07db      	lsls	r3, r3, #31
{
    43c2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    43c4:	d415      	bmi.n	43f2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    43c6:	2301      	movs	r3, #1
    43c8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    43cc:	6803      	ldr	r3, [r0, #0]
    43ce:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    43d2:	ea41 0203 	orr.w	r2, r1, r3
    43d6:	e850 4f00 	ldrex	r4, [r0]
    43da:	429c      	cmp	r4, r3
    43dc:	d104      	bne.n	43e8 <nrfx_flag32_free+0x2c>
    43de:	e840 2c00 	strex	ip, r2, [r0]
    43e2:	f1bc 0f00 	cmp.w	ip, #0
    43e6:	d1f6      	bne.n	43d6 <nrfx_flag32_free+0x1a>
    43e8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    43ec:	d1ee      	bne.n	43cc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    43ee:	4802      	ldr	r0, [pc, #8]	; (43f8 <nrfx_flag32_free+0x3c>)
}
    43f0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    43f2:	4802      	ldr	r0, [pc, #8]	; (43fc <nrfx_flag32_free+0x40>)
    43f4:	e7fc      	b.n	43f0 <nrfx_flag32_free+0x34>
    43f6:	bf00      	nop
    43f8:	0bad0000 	.word	0x0bad0000
    43fc:	0bad0004 	.word	0x0bad0004

00004400 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4400:	4b05      	ldr	r3, [pc, #20]	; (4418 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4402:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4404:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4408:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    440c:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    4410:	4258      	negs	r0, r3
    4412:	4158      	adcs	r0, r3
    4414:	4770      	bx	lr
    4416:	bf00      	nop
    4418:	20000050 	.word	0x20000050

0000441c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    441c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    441e:	f100 0308 	add.w	r3, r0, #8
    4422:	4c0c      	ldr	r4, [pc, #48]	; (4454 <call_handler+0x38>)
    4424:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4428:	05da      	lsls	r2, r3, #23
{
    442a:	4605      	mov	r5, r0
    442c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    442e:	d507      	bpl.n	4440 <call_handler+0x24>
    4430:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4434:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4438:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    443c:	6852      	ldr	r2, [r2, #4]
    443e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4440:	68a3      	ldr	r3, [r4, #8]
    4442:	b12b      	cbz	r3, 4450 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4444:	68e2      	ldr	r2, [r4, #12]
    4446:	4631      	mov	r1, r6
    4448:	4628      	mov	r0, r5
    }
}
    444a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    444e:	4718      	bx	r3
}
    4450:	bd70      	pop	{r4, r5, r6, pc}
    4452:	bf00      	nop
    4454:	20000050 	.word	0x20000050

00004458 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4458:	4b19      	ldr	r3, [pc, #100]	; (44c0 <release_handler+0x68>)
    445a:	3008      	adds	r0, #8
{
    445c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    445e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4462:	05d1      	lsls	r1, r2, #23
    4464:	d51d      	bpl.n	44a2 <release_handler+0x4a>
    4466:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    446a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    446e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4472:	f103 0410 	add.w	r4, r3, #16
    4476:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4478:	f834 2b02 	ldrh.w	r2, [r4], #2
    447c:	f412 7f80 	tst.w	r2, #256	; 0x100
    4480:	d003      	beq.n	448a <release_handler+0x32>
    4482:	f3c2 2243 	ubfx	r2, r2, #9, #4
    4486:	4291      	cmp	r1, r2
    4488:	d00b      	beq.n	44a2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    448a:	3001      	adds	r0, #1
    448c:	2830      	cmp	r0, #48	; 0x30
    448e:	d1f3      	bne.n	4478 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4490:	2200      	movs	r2, #0
    4492:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4496:	480b      	ldr	r0, [pc, #44]	; (44c4 <release_handler+0x6c>)
    4498:	f7ff ff90 	bl	43bc <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    449c:	4b0a      	ldr	r3, [pc, #40]	; (44c8 <release_handler+0x70>)
    449e:	4298      	cmp	r0, r3
    44a0:	d100      	bne.n	44a4 <release_handler+0x4c>
}
    44a2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    44a4:	4909      	ldr	r1, [pc, #36]	; (44cc <release_handler+0x74>)
    44a6:	480a      	ldr	r0, [pc, #40]	; (44d0 <release_handler+0x78>)
    44a8:	4a0a      	ldr	r2, [pc, #40]	; (44d4 <release_handler+0x7c>)
    44aa:	f44f 7399 	mov.w	r3, #306	; 0x132
    44ae:	f003 f9d2 	bl	7856 <printk>
}
    44b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    44b6:	4807      	ldr	r0, [pc, #28]	; (44d4 <release_handler+0x7c>)
    44b8:	f44f 7199 	mov.w	r1, #306	; 0x132
    44bc:	f003 b8f7 	b.w	76ae <assert_post_action>
    44c0:	20000050 	.word	0x20000050
    44c4:	200000c4 	.word	0x200000c4
    44c8:	0bad0000 	.word	0x0bad0000
    44cc:	00008eb1 	.word	0x00008eb1
    44d0:	00008224 	.word	0x00008224
    44d4:	00008e4d 	.word	0x00008e4d

000044d8 <pin_handler_trigger_uninit>:
{
    44d8:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    44da:	4c0a      	ldr	r4, [pc, #40]	; (4504 <pin_handler_trigger_uninit+0x2c>)
    44dc:	f100 0508 	add.w	r5, r0, #8
    44e0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    44e4:	069a      	lsls	r2, r3, #26
    44e6:	d506      	bpl.n	44f6 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    44e8:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    44ea:	4a07      	ldr	r2, [pc, #28]	; (4508 <pin_handler_trigger_uninit+0x30>)
    44ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    44f0:	2100      	movs	r1, #0
    44f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    44f6:	f7ff ffaf 	bl	4458 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    44fa:	2300      	movs	r3, #0
    44fc:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4500:	bd38      	pop	{r3, r4, r5, pc}
    4502:	bf00      	nop
    4504:	20000050 	.word	0x20000050
    4508:	40006000 	.word	0x40006000

0000450c <nrf_gpio_pin_port_decode>:
{
    450c:	b510      	push	{r4, lr}
    450e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4510:	6800      	ldr	r0, [r0, #0]
    4512:	f003 fb4a 	bl	7baa <nrf_gpio_pin_present_check>
    4516:	b958      	cbnz	r0, 4530 <nrf_gpio_pin_port_decode+0x24>
    4518:	4912      	ldr	r1, [pc, #72]	; (4564 <nrf_gpio_pin_port_decode+0x58>)
    451a:	4813      	ldr	r0, [pc, #76]	; (4568 <nrf_gpio_pin_port_decode+0x5c>)
    451c:	4a13      	ldr	r2, [pc, #76]	; (456c <nrf_gpio_pin_port_decode+0x60>)
    451e:	f240 2329 	movw	r3, #553	; 0x229
    4522:	f003 f998 	bl	7856 <printk>
    4526:	4811      	ldr	r0, [pc, #68]	; (456c <nrf_gpio_pin_port_decode+0x60>)
    4528:	f240 2129 	movw	r1, #553	; 0x229
    452c:	f003 f8bf 	bl	76ae <assert_post_action>
    uint32_t pin_number = *p_pin;
    4530:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4532:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4536:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4538:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    453a:	d00d      	beq.n	4558 <nrf_gpio_pin_port_decode+0x4c>
    453c:	2b01      	cmp	r3, #1
    453e:	d00e      	beq.n	455e <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    4540:	490b      	ldr	r1, [pc, #44]	; (4570 <nrf_gpio_pin_port_decode+0x64>)
    4542:	4809      	ldr	r0, [pc, #36]	; (4568 <nrf_gpio_pin_port_decode+0x5c>)
    4544:	4a09      	ldr	r2, [pc, #36]	; (456c <nrf_gpio_pin_port_decode+0x60>)
    4546:	f240 232e 	movw	r3, #558	; 0x22e
    454a:	f003 f984 	bl	7856 <printk>
    454e:	4807      	ldr	r0, [pc, #28]	; (456c <nrf_gpio_pin_port_decode+0x60>)
    4550:	f240 212e 	movw	r1, #558	; 0x22e
    4554:	f003 f8ab 	bl	76ae <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4558:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    455c:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    455e:	4805      	ldr	r0, [pc, #20]	; (4574 <nrf_gpio_pin_port_decode+0x68>)
    4560:	e7fc      	b.n	455c <nrf_gpio_pin_port_decode+0x50>
    4562:	bf00      	nop
    4564:	00008d78 	.word	0x00008d78
    4568:	00008224 	.word	0x00008224
    456c:	00008d45 	.word	0x00008d45
    4570:	00008874 	.word	0x00008874
    4574:	50000300 	.word	0x50000300

00004578 <nrfx_gpiote_input_configure>:
{
    4578:	b5f0      	push	{r4, r5, r6, r7, lr}
    457a:	4604      	mov	r4, r0
    457c:	b085      	sub	sp, #20
    457e:	4617      	mov	r7, r2
    4580:	461d      	mov	r5, r3
    if (p_input_config)
    4582:	b1f1      	cbz	r1, 45c2 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    4584:	f7ff ff3c 	bl	4400 <pin_is_task_output>
    4588:	b110      	cbz	r0, 4590 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    458a:	484a      	ldr	r0, [pc, #296]	; (46b4 <nrfx_gpiote_input_configure+0x13c>)
}
    458c:	b005      	add	sp, #20
    458e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4590:	460b      	mov	r3, r1
    4592:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4596:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    459a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    459e:	f10d 020f 	add.w	r2, sp, #15
    45a2:	f10d 010e 	add.w	r1, sp, #14
    45a6:	4620      	mov	r0, r4
    45a8:	f003 fb14 	bl	7bd4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    45ac:	4a42      	ldr	r2, [pc, #264]	; (46b8 <nrfx_gpiote_input_configure+0x140>)
    45ae:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    45b2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    45b6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    45ba:	f043 0301 	orr.w	r3, r3, #1
    45be:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    45c2:	b197      	cbz	r7, 45ea <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45c4:	4b3c      	ldr	r3, [pc, #240]	; (46b8 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    45c6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    45c8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45ca:	f104 0008 	add.w	r0, r4, #8
    45ce:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    45d2:	078f      	lsls	r7, r1, #30
    45d4:	d50c      	bpl.n	45f0 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    45d6:	2a00      	cmp	r2, #0
    45d8:	d1d7      	bne.n	458a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    45da:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    45de:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    45e2:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    45e6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    45ea:	bbcd      	cbnz	r5, 4660 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    45ec:	4833      	ldr	r0, [pc, #204]	; (46bc <nrfx_gpiote_input_configure+0x144>)
    45ee:	e7cd      	b.n	458c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    45f0:	f021 0120 	bic.w	r1, r1, #32
    45f4:	04c9      	lsls	r1, r1, #19
    45f6:	0cc9      	lsrs	r1, r1, #19
    45f8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    45fc:	2a00      	cmp	r2, #0
    45fe:	d0ec      	beq.n	45da <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    4600:	2e03      	cmp	r6, #3
    4602:	d8c2      	bhi.n	458a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4604:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4606:	b92e      	cbnz	r6, 4614 <nrfx_gpiote_input_configure+0x9c>
    4608:	4a2d      	ldr	r2, [pc, #180]	; (46c0 <nrfx_gpiote_input_configure+0x148>)
    460a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    460e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4612:	e7e2      	b.n	45da <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4614:	00ba      	lsls	r2, r7, #2
    4616:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    461a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    461e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4622:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4626:	f02c 0c03 	bic.w	ip, ip, #3
    462a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    462e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4632:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4636:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    463a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    463e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4642:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4646:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    464a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    464e:	ea4c 0c0e 	orr.w	ip, ip, lr
    4652:	f041 0120 	orr.w	r1, r1, #32
    4656:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    465a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    465e:	e7bc      	b.n	45da <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4660:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4664:	4620      	mov	r0, r4
    4666:	f7ff fef7 	bl	4458 <release_handler>
    if (!handler)
    466a:	2e00      	cmp	r6, #0
    466c:	d0be      	beq.n	45ec <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    466e:	4d12      	ldr	r5, [pc, #72]	; (46b8 <nrfx_gpiote_input_configure+0x140>)
    4670:	682b      	ldr	r3, [r5, #0]
    4672:	429e      	cmp	r6, r3
    4674:	d104      	bne.n	4680 <nrfx_gpiote_input_configure+0x108>
    4676:	686b      	ldr	r3, [r5, #4]
    4678:	429f      	cmp	r7, r3
    467a:	d101      	bne.n	4680 <nrfx_gpiote_input_configure+0x108>
    467c:	2200      	movs	r2, #0
    467e:	e00a      	b.n	4696 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4680:	4810      	ldr	r0, [pc, #64]	; (46c4 <nrfx_gpiote_input_configure+0x14c>)
    4682:	f10d 010f 	add.w	r1, sp, #15
    4686:	f7ff fe75 	bl	4374 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    468a:	4b0c      	ldr	r3, [pc, #48]	; (46bc <nrfx_gpiote_input_configure+0x144>)
    468c:	4298      	cmp	r0, r3
    468e:	f47f af7d 	bne.w	458c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    4692:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4696:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    469a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    469e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    46a0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    46a2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    46a6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    46aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    46ae:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    46b2:	e79b      	b.n	45ec <nrfx_gpiote_input_configure+0x74>
    46b4:	0bad0004 	.word	0x0bad0004
    46b8:	20000050 	.word	0x20000050
    46bc:	0bad0000 	.word	0x0bad0000
    46c0:	40006000 	.word	0x40006000
    46c4:	200000c4 	.word	0x200000c4

000046c8 <nrfx_gpiote_output_configure>:
{
    46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ca:	4604      	mov	r4, r0
    46cc:	b085      	sub	sp, #20
    46ce:	4615      	mov	r5, r2
    if (p_config)
    46d0:	b309      	cbz	r1, 4716 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    46d2:	f100 0708 	add.w	r7, r0, #8
    46d6:	4e31      	ldr	r6, [pc, #196]	; (479c <nrfx_gpiote_output_configure+0xd4>)
    46d8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    46dc:	0798      	lsls	r0, r3, #30
    46de:	d401      	bmi.n	46e4 <nrfx_gpiote_output_configure+0x1c>
    46e0:	069a      	lsls	r2, r3, #26
    46e2:	d458      	bmi.n	4796 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    46e4:	f013 0f1c 	tst.w	r3, #28
    46e8:	d002      	beq.n	46f0 <nrfx_gpiote_output_configure+0x28>
    46ea:	784b      	ldrb	r3, [r1, #1]
    46ec:	2b01      	cmp	r3, #1
    46ee:	d052      	beq.n	4796 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    46f0:	2301      	movs	r3, #1
    46f2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    46f6:	2300      	movs	r3, #0
    46f8:	e9cd 1300 	strd	r1, r3, [sp]
    46fc:	1c4a      	adds	r2, r1, #1
    46fe:	1c8b      	adds	r3, r1, #2
    4700:	4620      	mov	r0, r4
    4702:	f10d 010f 	add.w	r1, sp, #15
    4706:	f003 fa65 	bl	7bd4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    470a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    470e:	f043 0303 	orr.w	r3, r3, #3
    4712:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4716:	b915      	cbnz	r5, 471e <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    4718:	4821      	ldr	r0, [pc, #132]	; (47a0 <nrfx_gpiote_output_configure+0xd8>)
}
    471a:	b005      	add	sp, #20
    471c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    471e:	4e1f      	ldr	r6, [pc, #124]	; (479c <nrfx_gpiote_output_configure+0xd4>)
    4720:	f104 0708 	add.w	r7, r4, #8
    4724:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4728:	0783      	lsls	r3, r0, #30
    472a:	d534      	bpl.n	4796 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    472c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4730:	4661      	mov	r1, ip
    4732:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4734:	f020 0020 	bic.w	r0, r0, #32
    4738:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    473c:	04c0      	lsls	r0, r0, #19
    473e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4742:	0cc0      	lsrs	r0, r0, #19
    4744:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4748:	2300      	movs	r3, #0
    474a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    474e:	786a      	ldrb	r2, [r5, #1]
    4750:	2a00      	cmp	r2, #0
    4752:	d0e1      	beq.n	4718 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4754:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4758:	78ad      	ldrb	r5, [r5, #2]
    475a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    475e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4762:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4766:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    476a:	0223      	lsls	r3, r4, #8
    476c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4770:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4772:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4776:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    477a:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    477c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    477e:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4782:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4786:	432b      	orrs	r3, r5
    4788:	f040 0020 	orr.w	r0, r0, #32
    478c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4790:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4794:	e7c0      	b.n	4718 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    4796:	4803      	ldr	r0, [pc, #12]	; (47a4 <nrfx_gpiote_output_configure+0xdc>)
    4798:	e7bf      	b.n	471a <nrfx_gpiote_output_configure+0x52>
    479a:	bf00      	nop
    479c:	20000050 	.word	0x20000050
    47a0:	0bad0000 	.word	0x0bad0000
    47a4:	0bad0004 	.word	0x0bad0004

000047a8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    47a8:	4b01      	ldr	r3, [pc, #4]	; (47b0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    47aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    47ae:	4770      	bx	lr
    47b0:	20000050 	.word	0x20000050

000047b4 <nrfx_gpiote_channel_get>:
{
    47b4:	b538      	push	{r3, r4, r5, lr}
    47b6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    47b8:	460d      	mov	r5, r1
    47ba:	b959      	cbnz	r1, 47d4 <nrfx_gpiote_channel_get+0x20>
    47bc:	490b      	ldr	r1, [pc, #44]	; (47ec <nrfx_gpiote_channel_get+0x38>)
    47be:	480c      	ldr	r0, [pc, #48]	; (47f0 <nrfx_gpiote_channel_get+0x3c>)
    47c0:	4a0c      	ldr	r2, [pc, #48]	; (47f4 <nrfx_gpiote_channel_get+0x40>)
    47c2:	f240 2335 	movw	r3, #565	; 0x235
    47c6:	f003 f846 	bl	7856 <printk>
    47ca:	480a      	ldr	r0, [pc, #40]	; (47f4 <nrfx_gpiote_channel_get+0x40>)
    47cc:	f240 2135 	movw	r1, #565	; 0x235
    47d0:	f002 ff6d 	bl	76ae <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    47d4:	3408      	adds	r4, #8
    47d6:	4b08      	ldr	r3, [pc, #32]	; (47f8 <nrfx_gpiote_channel_get+0x44>)
    47d8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    47dc:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47de:	bf43      	ittte	mi
    47e0:	0b5b      	lsrmi	r3, r3, #13
    47e2:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    47e4:	4805      	ldrmi	r0, [pc, #20]	; (47fc <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    47e6:	4806      	ldrpl	r0, [pc, #24]	; (4800 <nrfx_gpiote_channel_get+0x4c>)
}
    47e8:	bd38      	pop	{r3, r4, r5, pc}
    47ea:	bf00      	nop
    47ec:	00008ec5 	.word	0x00008ec5
    47f0:	00008224 	.word	0x00008224
    47f4:	00008e4d 	.word	0x00008e4d
    47f8:	20000050 	.word	0x20000050
    47fc:	0bad0000 	.word	0x0bad0000
    4800:	0bad0004 	.word	0x0bad0004

00004804 <nrfx_gpiote_init>:
{
    4804:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4806:	4c0e      	ldr	r4, [pc, #56]	; (4840 <nrfx_gpiote_init+0x3c>)
    4808:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    480c:	b9b5      	cbnz	r5, 483c <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    480e:	2260      	movs	r2, #96	; 0x60
    4810:	4629      	mov	r1, r5
    4812:	f104 0010 	add.w	r0, r4, #16
    4816:	f003 f87f 	bl	7918 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    481a:	2006      	movs	r0, #6
    481c:	f7fd ff3a 	bl	2694 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4820:	4b08      	ldr	r3, [pc, #32]	; (4844 <nrfx_gpiote_init+0x40>)
    return err_code;
    4822:	4809      	ldr	r0, [pc, #36]	; (4848 <nrfx_gpiote_init+0x44>)
    4824:	601d      	str	r5, [r3, #0]
    4826:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4828:	4b08      	ldr	r3, [pc, #32]	; (484c <nrfx_gpiote_init+0x48>)
    482a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    482e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4832:	2301      	movs	r3, #1
    4834:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4838:	6763      	str	r3, [r4, #116]	; 0x74
}
    483a:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    483c:	4804      	ldr	r0, [pc, #16]	; (4850 <nrfx_gpiote_init+0x4c>)
    483e:	e7fc      	b.n	483a <nrfx_gpiote_init+0x36>
    4840:	20000050 	.word	0x20000050
    4844:	4000617c 	.word	0x4000617c
    4848:	0bad0000 	.word	0x0bad0000
    484c:	40006000 	.word	0x40006000
    4850:	0bad0005 	.word	0x0bad0005

00004854 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4854:	4b03      	ldr	r3, [pc, #12]	; (4864 <nrfx_gpiote_is_init+0x10>)
    4856:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    485a:	3800      	subs	r0, #0
    485c:	bf18      	it	ne
    485e:	2001      	movne	r0, #1
    4860:	4770      	bx	lr
    4862:	bf00      	nop
    4864:	20000050 	.word	0x20000050

00004868 <nrfx_gpiote_channel_free>:
{
    4868:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    486a:	4801      	ldr	r0, [pc, #4]	; (4870 <nrfx_gpiote_channel_free+0x8>)
    486c:	f7ff bda6 	b.w	43bc <nrfx_flag32_free>
    4870:	200000c0 	.word	0x200000c0

00004874 <nrfx_gpiote_channel_alloc>:
{
    4874:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4876:	4801      	ldr	r0, [pc, #4]	; (487c <nrfx_gpiote_channel_alloc+0x8>)
    4878:	f7ff bd7c 	b.w	4374 <nrfx_flag32_alloc>
    487c:	200000c0 	.word	0x200000c0

00004880 <nrfx_gpiote_trigger_enable>:
{
    4880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4882:	4d31      	ldr	r5, [pc, #196]	; (4948 <nrfx_gpiote_trigger_enable+0xc8>)
    4884:	f100 0708 	add.w	r7, r0, #8
{
    4888:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    488a:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    488e:	f013 0f1c 	tst.w	r3, #28
{
    4892:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4894:	d10b      	bne.n	48ae <nrfx_gpiote_trigger_enable+0x2e>
    4896:	492d      	ldr	r1, [pc, #180]	; (494c <nrfx_gpiote_trigger_enable+0xcc>)
    4898:	482d      	ldr	r0, [pc, #180]	; (4950 <nrfx_gpiote_trigger_enable+0xd0>)
    489a:	4a2e      	ldr	r2, [pc, #184]	; (4954 <nrfx_gpiote_trigger_enable+0xd4>)
    489c:	f240 33df 	movw	r3, #991	; 0x3df
    48a0:	f002 ffd9 	bl	7856 <printk>
    48a4:	482b      	ldr	r0, [pc, #172]	; (4954 <nrfx_gpiote_trigger_enable+0xd4>)
    48a6:	f240 31df 	movw	r1, #991	; 0x3df
    48aa:	f002 ff00 	bl	76ae <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    48ae:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    48b2:	0683      	lsls	r3, r0, #26
    48b4:	d51f      	bpl.n	48f6 <nrfx_gpiote_trigger_enable+0x76>
    48b6:	f010 0302 	ands.w	r3, r0, #2
    48ba:	d11c      	bne.n	48f6 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    48bc:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    48be:	4608      	mov	r0, r1
    48c0:	f003 f984 	bl	7bcc <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    48c4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    48c8:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    48cc:	6003      	str	r3, [r0, #0]
    48ce:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    48d0:	008b      	lsls	r3, r1, #2
    48d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    48d6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    48da:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    48de:	f042 0201 	orr.w	r2, r2, #1
    48e2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    48e6:	b126      	cbz	r6, 48f2 <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    48e8:	4a1b      	ldr	r2, [pc, #108]	; (4958 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    48ea:	2301      	movs	r3, #1
    48ec:	408b      	lsls	r3, r1
    48ee:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    48f2:	b003      	add	sp, #12
    48f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    48f6:	b95e      	cbnz	r6, 4910 <nrfx_gpiote_trigger_enable+0x90>
    48f8:	4918      	ldr	r1, [pc, #96]	; (495c <nrfx_gpiote_trigger_enable+0xdc>)
    48fa:	4815      	ldr	r0, [pc, #84]	; (4950 <nrfx_gpiote_trigger_enable+0xd0>)
    48fc:	4a15      	ldr	r2, [pc, #84]	; (4954 <nrfx_gpiote_trigger_enable+0xd4>)
    48fe:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4902:	f002 ffa8 	bl	7856 <printk>
    4906:	4813      	ldr	r0, [pc, #76]	; (4954 <nrfx_gpiote_trigger_enable+0xd4>)
    4908:	f240 31ee 	movw	r1, #1006	; 0x3ee
    490c:	f002 fecf 	bl	76ae <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4910:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    4914:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4918:	2b04      	cmp	r3, #4
    491a:	d010      	beq.n	493e <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    491c:	2b05      	cmp	r3, #5
    491e:	d010      	beq.n	4942 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4920:	a801      	add	r0, sp, #4
    4922:	9401      	str	r4, [sp, #4]
    4924:	f7ff fdf2 	bl	450c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4928:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    492a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    492e:	40d9      	lsrs	r1, r3
    4930:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4934:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4936:	4620      	mov	r0, r4
    4938:	f003 f997 	bl	7c6a <nrf_gpio_cfg_sense_set>
}
    493c:	e7d9      	b.n	48f2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    493e:	2103      	movs	r1, #3
    4940:	e7f9      	b.n	4936 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4942:	2102      	movs	r1, #2
    4944:	e7f7      	b.n	4936 <nrfx_gpiote_trigger_enable+0xb6>
    4946:	bf00      	nop
    4948:	20000050 	.word	0x20000050
    494c:	00008ecf 	.word	0x00008ecf
    4950:	00008224 	.word	0x00008224
    4954:	00008e4d 	.word	0x00008e4d
    4958:	40006000 	.word	0x40006000
    495c:	00008ee4 	.word	0x00008ee4

00004960 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4960:	4b0e      	ldr	r3, [pc, #56]	; (499c <nrfx_gpiote_trigger_disable+0x3c>)
    4962:	f100 0208 	add.w	r2, r0, #8
    4966:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    496a:	0699      	lsls	r1, r3, #26
    496c:	d513      	bpl.n	4996 <nrfx_gpiote_trigger_disable+0x36>
    496e:	079a      	lsls	r2, r3, #30
    4970:	d411      	bmi.n	4996 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4972:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4974:	2201      	movs	r2, #1
    4976:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4978:	009b      	lsls	r3, r3, #2
    497a:	4909      	ldr	r1, [pc, #36]	; (49a0 <nrfx_gpiote_trigger_disable+0x40>)
    497c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4980:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4984:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4988:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    498c:	f022 0203 	bic.w	r2, r2, #3
    4990:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4994:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4996:	2100      	movs	r1, #0
    4998:	f003 b967 	b.w	7c6a <nrf_gpio_cfg_sense_set>
    499c:	20000050 	.word	0x20000050
    49a0:	40006000 	.word	0x40006000

000049a4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    49a4:	4b0e      	ldr	r3, [pc, #56]	; (49e0 <nrfx_gpiote_pin_uninit+0x3c>)
    49a6:	f100 0208 	add.w	r2, r0, #8
{
    49aa:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    49ac:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    49b0:	07db      	lsls	r3, r3, #31
{
    49b2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    49b4:	d511      	bpl.n	49da <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    49b6:	f7ff ffd3 	bl	4960 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    49ba:	4620      	mov	r0, r4
    49bc:	f7ff fd8c 	bl	44d8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    49c0:	a801      	add	r0, sp, #4
    49c2:	9401      	str	r4, [sp, #4]
    49c4:	f7ff fda2 	bl	450c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    49c8:	9b01      	ldr	r3, [sp, #4]
    49ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    49ce:	2202      	movs	r2, #2
    49d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    49d4:	4803      	ldr	r0, [pc, #12]	; (49e4 <nrfx_gpiote_pin_uninit+0x40>)
}
    49d6:	b002      	add	sp, #8
    49d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    49da:	4803      	ldr	r0, [pc, #12]	; (49e8 <nrfx_gpiote_pin_uninit+0x44>)
    49dc:	e7fb      	b.n	49d6 <nrfx_gpiote_pin_uninit+0x32>
    49de:	bf00      	nop
    49e0:	20000050 	.word	0x20000050
    49e4:	0bad0000 	.word	0x0bad0000
    49e8:	0bad0004 	.word	0x0bad0004

000049ec <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    49ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49f0:	4b65      	ldr	r3, [pc, #404]	; (4b88 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    49f2:	4866      	ldr	r0, [pc, #408]	; (4b8c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    49f4:	4966      	ldr	r1, [pc, #408]	; (4b90 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    49f6:	2500      	movs	r5, #0
{
    49f8:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    49fa:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    49fc:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49fe:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4a00:	b136      	cbz	r6, 4a10 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4a02:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4a06:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a08:	bf1e      	ittt	ne
    4a0a:	601c      	strne	r4, [r3, #0]
    4a0c:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4a0e:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    4a10:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4a12:	428b      	cmp	r3, r1
        mask <<= 1;
    4a14:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4a18:	d1f1      	bne.n	49fe <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a1a:	4f5e      	ldr	r7, [pc, #376]	; (4b94 <nrfx_gpiote_irq_handler+0x1a8>)
    4a1c:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4a1e:	b37b      	cbz	r3, 4a80 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    4a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4a24:	4e5c      	ldr	r6, [pc, #368]	; (4b98 <nrfx_gpiote_irq_handler+0x1ac>)
    4a26:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4a2a:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4a2c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4a30:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4a34:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4a36:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4a3a:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4a3c:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4a40:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4a44:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    4a48:	f8d9 3000 	ldr.w	r3, [r9]
    4a4c:	b9f3      	cbnz	r3, 4a8c <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4a4e:	f108 0820 	add.w	r8, r8, #32
    4a52:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    4a56:	f109 0904 	add.w	r9, r9, #4
    4a5a:	d1f5      	bne.n	4a48 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a5c:	603b      	str	r3, [r7, #0]
    4a5e:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    4a60:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    4a62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4a66:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4a6a:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4a6c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4a70:	9b01      	ldr	r3, [sp, #4]
    4a72:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    4a76:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4a78:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4a7c:	4313      	orrs	r3, r2
    4a7e:	d1dd      	bne.n	4a3c <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    4a80:	2401      	movs	r4, #1
    while (mask)
    4a82:	2d00      	cmp	r5, #0
    4a84:	d168      	bne.n	4b58 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4a86:	b009      	add	sp, #36	; 0x24
    4a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4a8c:	fa93 f3a3 	rbit	r3, r3
    4a90:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    4a94:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4a98:	f106 0208 	add.w	r2, r6, #8
    4a9c:	4b3f      	ldr	r3, [pc, #252]	; (4b9c <nrfx_gpiote_irq_handler+0x1b0>)
    4a9e:	9605      	str	r6, [sp, #20]
    4aa0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    4aa4:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4aa8:	08f4      	lsrs	r4, r6, #3
    4aaa:	9302      	str	r3, [sp, #8]
    4aac:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    4aae:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    4ab0:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4ab4:	fa0b fc00 	lsl.w	ip, fp, r0
    4ab8:	5d18      	ldrb	r0, [r3, r4]
    4aba:	ea20 000c 	bic.w	r0, r0, ip
    4abe:	5518      	strb	r0, [r3, r4]
    4ac0:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ac2:	a805      	add	r0, sp, #20
    4ac4:	9103      	str	r1, [sp, #12]
    4ac6:	f7ff fd21 	bl	450c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4aca:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    4acc:	9903      	ldr	r1, [sp, #12]
    4ace:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4ad2:	074b      	lsls	r3, r1, #29
    4ad4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4ad8:	f3c4 4401 	ubfx	r4, r4, #16, #2
    4adc:	d523      	bpl.n	4b26 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    4ade:	4651      	mov	r1, sl
    4ae0:	4630      	mov	r0, r6
    4ae2:	f7ff fc9b 	bl	441c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ae6:	a805      	add	r0, sp, #20
    4ae8:	9605      	str	r6, [sp, #20]
    4aea:	f7ff fd0f 	bl	450c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4aee:	9a05      	ldr	r2, [sp, #20]
    4af0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4af4:	b2e4      	uxtb	r4, r4
    4af6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4afa:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4afe:	4294      	cmp	r4, r2
    4b00:	d107      	bne.n	4b12 <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4b02:	2100      	movs	r1, #0
    4b04:	4630      	mov	r0, r6
    4b06:	f003 f8b0 	bl	7c6a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4b0a:	4621      	mov	r1, r4
    4b0c:	4630      	mov	r0, r6
    4b0e:	f003 f8ac 	bl	7c6a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4b12:	a805      	add	r0, sp, #20
    4b14:	9605      	str	r6, [sp, #20]
    4b16:	f7ff fcf9 	bl	450c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4b1a:	9b05      	ldr	r3, [sp, #20]
    4b1c:	fa0b f303 	lsl.w	r3, fp, r3
    4b20:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    4b24:	e790      	b.n	4a48 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4b26:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4b28:	bf0c      	ite	eq
    4b2a:	2103      	moveq	r1, #3
    4b2c:	2102      	movne	r1, #2
    4b2e:	4630      	mov	r0, r6
    4b30:	f003 f89b 	bl	7c6a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4b34:	9b02      	ldr	r3, [sp, #8]
    4b36:	2b03      	cmp	r3, #3
    4b38:	d004      	beq.n	4b44 <nrfx_gpiote_irq_handler+0x158>
    4b3a:	2c02      	cmp	r4, #2
    4b3c:	d107      	bne.n	4b4e <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4b3e:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4b42:	d1e6      	bne.n	4b12 <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    4b44:	4651      	mov	r1, sl
    4b46:	4630      	mov	r0, r6
    4b48:	f7ff fc68 	bl	441c <call_handler>
    4b4c:	e7e1      	b.n	4b12 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4b4e:	2c03      	cmp	r4, #3
    4b50:	d1df      	bne.n	4b12 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4b52:	f1ba 0f02 	cmp.w	sl, #2
    4b56:	e7f4      	b.n	4b42 <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    4b58:	fa95 f3a5 	rbit	r3, r5
    4b5c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4b60:	fa04 f203 	lsl.w	r2, r4, r3
    4b64:	009b      	lsls	r3, r3, #2
    4b66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4b6a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4b6e:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4b72:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4b76:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4b7a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4b7e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4b82:	f7ff fc4b 	bl	441c <call_handler>
    4b86:	e77c      	b.n	4a82 <nrfx_gpiote_irq_handler+0x96>
    4b88:	40006100 	.word	0x40006100
    4b8c:	40006000 	.word	0x40006000
    4b90:	40006120 	.word	0x40006120
    4b94:	4000617c 	.word	0x4000617c
    4b98:	50000300 	.word	0x50000300
    4b9c:	20000050 	.word	0x20000050

00004ba0 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4ba0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4ba2:	4801      	ldr	r0, [pc, #4]	; (4ba8 <nrfx_ppi_channel_alloc+0x8>)
    4ba4:	f7ff bbe6 	b.w	4374 <nrfx_flag32_alloc>
    4ba8:	200000cc 	.word	0x200000cc

00004bac <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4bac:	4b03      	ldr	r3, [pc, #12]	; (4bbc <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    4bae:	6818      	ldr	r0, [r3, #0]
}
    4bb0:	f1a0 0308 	sub.w	r3, r0, #8
    4bb4:	4258      	negs	r0, r3
    4bb6:	4158      	adcs	r0, r3
    4bb8:	4770      	bx	lr
    4bba:	bf00      	nop
    4bbc:	10000130 	.word	0x10000130

00004bc0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4bc0:	4b06      	ldr	r3, [pc, #24]	; (4bdc <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	2b08      	cmp	r3, #8
    4bc6:	d106      	bne.n	4bd6 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4bc8:	4b05      	ldr	r3, [pc, #20]	; (4be0 <nrf52_errata_103+0x20>)
    4bca:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    4bcc:	2b05      	cmp	r3, #5
    4bce:	d802      	bhi.n	4bd6 <nrf52_errata_103+0x16>
    4bd0:	4a04      	ldr	r2, [pc, #16]	; (4be4 <nrf52_errata_103+0x24>)
    4bd2:	5cd0      	ldrb	r0, [r2, r3]
    4bd4:	4770      	bx	lr
        return false;
    4bd6:	2000      	movs	r0, #0
}
    4bd8:	4770      	bx	lr
    4bda:	bf00      	nop
    4bdc:	10000130 	.word	0x10000130
    4be0:	10000134 	.word	0x10000134
    4be4:	00008ef5 	.word	0x00008ef5

00004be8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4be8:	4a02      	ldr	r2, [pc, #8]	; (4bf4 <nvmc_wait+0xc>)
    4bea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d0fb      	beq.n	4bea <nvmc_wait+0x2>
}
    4bf2:	4770      	bx	lr
    4bf4:	4001e000 	.word	0x4001e000

00004bf8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4bf8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4bfa:	f7ff ffd7 	bl	4bac <nrf52_errata_136>
    4bfe:	b140      	cbz	r0, 4c12 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c04:	2200      	movs	r2, #0
    4c06:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4c0a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4c0e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4c12:	f7ff ffcb 	bl	4bac <nrf52_errata_136>
    4c16:	2800      	cmp	r0, #0
    4c18:	d046      	beq.n	4ca8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4c1e:	4b5b      	ldr	r3, [pc, #364]	; (4d8c <SystemInit+0x194>)
    4c20:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4c24:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4c28:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4c2c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4c30:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4c34:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4c38:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4c3c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4c40:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4c44:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4c48:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4c4c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4c50:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4c54:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4c58:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4c5c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4c60:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4c64:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4c68:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4c6c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4c70:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4c74:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4c78:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4c7c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4c80:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4c84:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4c88:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4c8c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4c90:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4c94:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4c98:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4c9c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4ca0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4ca4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4ca8:	f7ff ff8a 	bl	4bc0 <nrf52_errata_103>
    4cac:	b110      	cbz	r0, 4cb4 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4cae:	4b38      	ldr	r3, [pc, #224]	; (4d90 <SystemInit+0x198>)
    4cb0:	4a38      	ldr	r2, [pc, #224]	; (4d94 <SystemInit+0x19c>)
    4cb2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4cb4:	f7ff ff84 	bl	4bc0 <nrf52_errata_103>
    4cb8:	b118      	cbz	r0, 4cc2 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4cba:	4b37      	ldr	r3, [pc, #220]	; (4d98 <SystemInit+0x1a0>)
    4cbc:	22fb      	movs	r2, #251	; 0xfb
    4cbe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4cc2:	f7ff ff7d 	bl	4bc0 <nrf52_errata_103>
    4cc6:	b148      	cbz	r0, 4cdc <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4cc8:	4934      	ldr	r1, [pc, #208]	; (4d9c <SystemInit+0x1a4>)
    4cca:	4b35      	ldr	r3, [pc, #212]	; (4da0 <SystemInit+0x1a8>)
    4ccc:	680a      	ldr	r2, [r1, #0]
    4cce:	681b      	ldr	r3, [r3, #0]
    4cd0:	f022 020f 	bic.w	r2, r2, #15
    4cd4:	f003 030f 	and.w	r3, r3, #15
    4cd8:	4313      	orrs	r3, r2
    4cda:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4cdc:	f7ff ff70 	bl	4bc0 <nrf52_errata_103>
    4ce0:	b118      	cbz	r0, 4cea <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4ce2:	4b30      	ldr	r3, [pc, #192]	; (4da4 <SystemInit+0x1ac>)
    4ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
    4ce8:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4cea:	f7ff ff5f 	bl	4bac <nrf52_errata_136>
    4cee:	b148      	cbz	r0, 4d04 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4cf4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4cf8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4cfa:	bf44      	itt	mi
    4cfc:	f06f 0201 	mvnmi.w	r2, #1
    4d00:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4d04:	4b28      	ldr	r3, [pc, #160]	; (4da8 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4d06:	681b      	ldr	r3, [r3, #0]
    4d08:	2b08      	cmp	r3, #8
    4d0a:	d10e      	bne.n	4d2a <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4d0c:	4b27      	ldr	r3, [pc, #156]	; (4dac <SystemInit+0x1b4>)
    4d0e:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4d10:	2b05      	cmp	r3, #5
    4d12:	d802      	bhi.n	4d1a <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4d14:	4a26      	ldr	r2, [pc, #152]	; (4db0 <SystemInit+0x1b8>)
    4d16:	5cd3      	ldrb	r3, [r2, r3]
    4d18:	b13b      	cbz	r3, 4d2a <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4d1a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4d1e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4d22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d26:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4d2a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4d2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4d32:	2a00      	cmp	r2, #0
    4d34:	db03      	blt.n	4d3e <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4d36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	da22      	bge.n	4d84 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4d3e:	491d      	ldr	r1, [pc, #116]	; (4db4 <SystemInit+0x1bc>)
    4d40:	2301      	movs	r3, #1
    4d42:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4d46:	f7ff ff4f 	bl	4be8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4d4a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4d4e:	2412      	movs	r4, #18
    4d50:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4d54:	f7ff ff48 	bl	4be8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4d58:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4d5c:	f7ff ff44 	bl	4be8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4d60:	2300      	movs	r3, #0
    4d62:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4d66:	f7ff ff3f 	bl	4be8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4d6a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4d6e:	4912      	ldr	r1, [pc, #72]	; (4db8 <SystemInit+0x1c0>)
    4d70:	4b12      	ldr	r3, [pc, #72]	; (4dbc <SystemInit+0x1c4>)
    4d72:	68ca      	ldr	r2, [r1, #12]
    4d74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4d78:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4d7a:	60cb      	str	r3, [r1, #12]
    4d7c:	f3bf 8f4f 	dsb	sy
    __NOP();
    4d80:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4d82:	e7fd      	b.n	4d80 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4d84:	4b0e      	ldr	r3, [pc, #56]	; (4dc0 <SystemInit+0x1c8>)
    4d86:	4a0f      	ldr	r2, [pc, #60]	; (4dc4 <SystemInit+0x1cc>)
    4d88:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4d8a:	bd10      	pop	{r4, pc}
    4d8c:	4000c000 	.word	0x4000c000
    4d90:	4000568c 	.word	0x4000568c
    4d94:	00038148 	.word	0x00038148
    4d98:	4000f000 	.word	0x4000f000
    4d9c:	40000ee4 	.word	0x40000ee4
    4da0:	10000258 	.word	0x10000258
    4da4:	40029640 	.word	0x40029640
    4da8:	10000130 	.word	0x10000130
    4dac:	10000134 	.word	0x10000134
    4db0:	00008eef 	.word	0x00008eef
    4db4:	4001e000 	.word	0x4001e000
    4db8:	e000ed00 	.word	0xe000ed00
    4dbc:	05fa0004 	.word	0x05fa0004
    4dc0:	200000d0 	.word	0x200000d0
    4dc4:	03d09000 	.word	0x03d09000

00004dc8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4dc8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4dca:	4c14      	ldr	r4, [pc, #80]	; (4e1c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4dcc:	4a14      	ldr	r2, [pc, #80]	; (4e20 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4dce:	4915      	ldr	r1, [pc, #84]	; (4e24 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4dd0:	2303      	movs	r3, #3
    4dd2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4dd4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4dd6:	4b14      	ldr	r3, [pc, #80]	; (4e28 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4dd8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4dda:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4de0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4de2:	2300      	movs	r3, #0
    4de4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4de6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4de8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4dea:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4dec:	4a0f      	ldr	r2, [pc, #60]	; (4e2c <_DoInit+0x64>)
    4dee:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4df0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4df2:	2210      	movs	r2, #16
    4df4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4df6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4df8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4dfa:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4dfc:	f002 fd5b 	bl	78b6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4e00:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4e04:	490a      	ldr	r1, [pc, #40]	; (4e30 <_DoInit+0x68>)
    4e06:	4620      	mov	r0, r4
    4e08:	f002 fd55 	bl	78b6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4e0c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4e10:	2320      	movs	r3, #32
    4e12:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4e14:	f3bf 8f5f 	dmb	sy
}
    4e18:	bd10      	pop	{r4, pc}
    4e1a:	bf00      	nop
    4e1c:	2000093c 	.word	0x2000093c
    4e20:	00008efb 	.word	0x00008efb
    4e24:	00008f04 	.word	0x00008f04
    4e28:	20000a55 	.word	0x20000a55
    4e2c:	20000a45 	.word	0x20000a45
    4e30:	00008f08 	.word	0x00008f08

00004e34 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4e34:	4b0e      	ldr	r3, [pc, #56]	; (4e70 <z_sys_init_run_level+0x3c>)
{
    4e36:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4e38:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4e3c:	3001      	adds	r0, #1
    4e3e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4e42:	42a6      	cmp	r6, r4
    4e44:	d800      	bhi.n	4e48 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4e46:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4e48:	e9d4 3500 	ldrd	r3, r5, [r4]
    4e4c:	4628      	mov	r0, r5
    4e4e:	4798      	blx	r3
		if (dev != NULL) {
    4e50:	b165      	cbz	r5, 4e6c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    4e52:	68eb      	ldr	r3, [r5, #12]
    4e54:	b130      	cbz	r0, 4e64 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4e56:	2800      	cmp	r0, #0
    4e58:	bfb8      	it	lt
    4e5a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4e5c:	28ff      	cmp	r0, #255	; 0xff
    4e5e:	bfa8      	it	ge
    4e60:	20ff      	movge	r0, #255	; 0xff
    4e62:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4e64:	785a      	ldrb	r2, [r3, #1]
    4e66:	f042 0201 	orr.w	r2, r2, #1
    4e6a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4e6c:	3408      	adds	r4, #8
    4e6e:	e7e8      	b.n	4e42 <z_sys_init_run_level+0xe>
    4e70:	0000811c 	.word	0x0000811c

00004e74 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4e74:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4e76:	4605      	mov	r5, r0
    4e78:	b910      	cbnz	r0, 4e80 <z_impl_device_get_binding+0xc>
		return NULL;
    4e7a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4e7c:	4620      	mov	r0, r4
    4e7e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4e80:	7803      	ldrb	r3, [r0, #0]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d0f9      	beq.n	4e7a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4e86:	4a0f      	ldr	r2, [pc, #60]	; (4ec4 <z_impl_device_get_binding+0x50>)
    4e88:	4c0f      	ldr	r4, [pc, #60]	; (4ec8 <z_impl_device_get_binding+0x54>)
    4e8a:	4616      	mov	r6, r2
    4e8c:	4294      	cmp	r4, r2
    4e8e:	d108      	bne.n	4ea2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4e90:	4c0d      	ldr	r4, [pc, #52]	; (4ec8 <z_impl_device_get_binding+0x54>)
    4e92:	42b4      	cmp	r4, r6
    4e94:	d0f1      	beq.n	4e7a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4e96:	4620      	mov	r0, r4
    4e98:	f002 fefe 	bl	7c98 <z_device_ready>
    4e9c:	b950      	cbnz	r0, 4eb4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    4e9e:	3418      	adds	r4, #24
    4ea0:	e7f7      	b.n	4e92 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    4ea2:	4620      	mov	r0, r4
    4ea4:	f002 fef8 	bl	7c98 <z_device_ready>
    4ea8:	b110      	cbz	r0, 4eb0 <z_impl_device_get_binding+0x3c>
    4eaa:	6823      	ldr	r3, [r4, #0]
    4eac:	42ab      	cmp	r3, r5
    4eae:	d0e5      	beq.n	4e7c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4eb0:	3418      	adds	r4, #24
    4eb2:	e7eb      	b.n	4e8c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4eb4:	6821      	ldr	r1, [r4, #0]
    4eb6:	4628      	mov	r0, r5
    4eb8:	f002 fd17 	bl	78ea <strcmp>
    4ebc:	2800      	cmp	r0, #0
    4ebe:	d1ee      	bne.n	4e9e <z_impl_device_get_binding+0x2a>
    4ec0:	e7dc      	b.n	4e7c <z_impl_device_get_binding+0x8>
    4ec2:	bf00      	nop
    4ec4:	00007e44 	.word	0x00007e44
    4ec8:	00007dcc 	.word	0x00007dcc

00004ecc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ece:	4604      	mov	r4, r0
    4ed0:	460e      	mov	r6, r1
	__asm__ volatile(
    4ed2:	f04f 0320 	mov.w	r3, #32
    4ed6:	f3ef 8711 	mrs	r7, BASEPRI
    4eda:	f383 8812 	msr	BASEPRI_MAX, r3
    4ede:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4ee2:	f001 fc01 	bl	66e8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4ee6:	4631      	mov	r1, r6
    4ee8:	4605      	mov	r5, r0
    4eea:	4620      	mov	r0, r4
    4eec:	f002 fe4b 	bl	7b86 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    4ef0:	2c04      	cmp	r4, #4
    4ef2:	d10c      	bne.n	4f0e <z_fatal_error+0x42>
    4ef4:	490a      	ldr	r1, [pc, #40]	; (4f20 <z_fatal_error+0x54>)
    4ef6:	4a0b      	ldr	r2, [pc, #44]	; (4f24 <z_fatal_error+0x58>)
    4ef8:	480b      	ldr	r0, [pc, #44]	; (4f28 <z_fatal_error+0x5c>)
    4efa:	238f      	movs	r3, #143	; 0x8f
    4efc:	f002 fcab 	bl	7856 <printk>
    4f00:	480a      	ldr	r0, [pc, #40]	; (4f2c <z_fatal_error+0x60>)
    4f02:	f002 fca8 	bl	7856 <printk>
    4f06:	4807      	ldr	r0, [pc, #28]	; (4f24 <z_fatal_error+0x58>)
    4f08:	218f      	movs	r1, #143	; 0x8f
    4f0a:	f002 fbd0 	bl	76ae <assert_post_action>
	__asm__ volatile(
    4f0e:	f387 8811 	msr	BASEPRI, r7
    4f12:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4f16:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4f18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4f1c:	f7fd be66 	b.w	2bec <z_impl_k_thread_abort>
    4f20:	00008f31 	.word	0x00008f31
    4f24:	00008f0f 	.word	0x00008f0f
    4f28:	00008224 	.word	0x00008224
    4f2c:	00008f4e 	.word	0x00008f4e

00004f30 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4f30:	4c11      	ldr	r4, [pc, #68]	; (4f78 <idle+0x48>)
    4f32:	68a2      	ldr	r2, [r4, #8]
    4f34:	f992 200e 	ldrsb.w	r2, [r2, #14]
    4f38:	2a00      	cmp	r2, #0
{
    4f3a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4f3c:	da09      	bge.n	4f52 <idle+0x22>
    4f3e:	490f      	ldr	r1, [pc, #60]	; (4f7c <idle+0x4c>)
    4f40:	480f      	ldr	r0, [pc, #60]	; (4f80 <idle+0x50>)
    4f42:	4a10      	ldr	r2, [pc, #64]	; (4f84 <idle+0x54>)
    4f44:	2327      	movs	r3, #39	; 0x27
    4f46:	f002 fc86 	bl	7856 <printk>
    4f4a:	480e      	ldr	r0, [pc, #56]	; (4f84 <idle+0x54>)
    4f4c:	2127      	movs	r1, #39	; 0x27
    4f4e:	f002 fbae 	bl	76ae <assert_post_action>
	__asm__ volatile(
    4f52:	f04f 0220 	mov.w	r2, #32
    4f56:	f3ef 8311 	mrs	r3, BASEPRI
    4f5a:	f382 8812 	msr	BASEPRI_MAX, r2
    4f5e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4f62:	f001 ffcf 	bl	6f04 <z_get_next_timeout_expiry>
    4f66:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4f68:	f7fd fa68 	bl	243c <pm_system_suspend>
    4f6c:	2800      	cmp	r0, #0
    4f6e:	d1f0      	bne.n	4f52 <idle+0x22>
	arch_cpu_idle();
    4f70:	f7fd fb1a 	bl	25a8 <arch_cpu_idle>
}
    4f74:	e7ed      	b.n	4f52 <idle+0x22>
    4f76:	bf00      	nop
    4f78:	200009e4 	.word	0x200009e4
    4f7c:	00008fa4 	.word	0x00008fa4
    4f80:	00008224 	.word	0x00008224
    4f84:	00008f83 	.word	0x00008f83

00004f88 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4f88:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    4f8a:	2300      	movs	r3, #0
{
    4f8c:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    4f8e:	2201      	movs	r2, #1
    4f90:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4f94:	220f      	movs	r2, #15
    4f96:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    4f9a:	4c0d      	ldr	r4, [pc, #52]	; (4fd0 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4f9c:	4a0d      	ldr	r2, [pc, #52]	; (4fd4 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    4f9e:	9301      	str	r3, [sp, #4]
    4fa0:	490d      	ldr	r1, [pc, #52]	; (4fd8 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4fa2:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    4fa4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4fa8:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    4fac:	f44f 75b0 	mov.w	r5, #352	; 0x160
    4fb0:	9300      	str	r3, [sp, #0]
    4fb2:	fb05 1100 	mla	r1, r5, r0, r1
    4fb6:	4b09      	ldr	r3, [pc, #36]	; (4fdc <init_idle_thread+0x54>)
    4fb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4fbc:	4620      	mov	r0, r4
    4fbe:	f001 fd15 	bl	69ec <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4fc2:	7b63      	ldrb	r3, [r4, #13]
    4fc4:	f023 0304 	bic.w	r3, r3, #4
    4fc8:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4fca:	b007      	add	sp, #28
    4fcc:	bd30      	pop	{r4, r5, pc}
    4fce:	bf00      	nop
    4fd0:	200001c0 	.word	0x200001c0
    4fd4:	200009e4 	.word	0x200009e4
    4fd8:	20001440 	.word	0x20001440
    4fdc:	00004f31 	.word	0x00004f31

00004fe0 <bg_thread_main>:
{
    4fe0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4fe2:	4b0a      	ldr	r3, [pc, #40]	; (500c <bg_thread_main+0x2c>)
    4fe4:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4fe6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4fe8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4fea:	f7ff ff23 	bl	4e34 <z_sys_init_run_level>
	boot_banner();
    4fee:	f002 f957 	bl	72a0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4ff2:	2003      	movs	r0, #3
    4ff4:	f7ff ff1e 	bl	4e34 <z_sys_init_run_level>
	z_init_static_threads();
    4ff8:	f001 fd5c 	bl	6ab4 <z_init_static_threads>
	main();
    4ffc:	f7fb fe78 	bl	cf0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5000:	4a03      	ldr	r2, [pc, #12]	; (5010 <bg_thread_main+0x30>)
    5002:	7b13      	ldrb	r3, [r2, #12]
    5004:	f023 0301 	bic.w	r3, r3, #1
    5008:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    500a:	bd08      	pop	{r3, pc}
    500c:	20000e55 	.word	0x20000e55
    5010:	20000240 	.word	0x20000240

00005014 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5014:	4802      	ldr	r0, [pc, #8]	; (5020 <z_bss_zero+0xc>)
    5016:	4a03      	ldr	r2, [pc, #12]	; (5024 <z_bss_zero+0x10>)
    5018:	2100      	movs	r1, #0
    501a:	1a12      	subs	r2, r2, r0
    501c:	f002 bc7c 	b.w	7918 <memset>
    5020:	200001a0 	.word	0x200001a0
    5024:	20001014 	.word	0x20001014

00005028 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5028:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    502a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5104 <z_cstart+0xdc>
    502e:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5030:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5034:	4d2d      	ldr	r5, [pc, #180]	; (50ec <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    5036:	4e2e      	ldr	r6, [pc, #184]	; (50f0 <z_cstart+0xc8>)
    5038:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    503a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5108 <z_cstart+0xe0>
    503e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5042:	2400      	movs	r4, #0
    5044:	616b      	str	r3, [r5, #20]
    5046:	23e0      	movs	r3, #224	; 0xe0
    5048:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    504c:	77ec      	strb	r4, [r5, #31]
    504e:	762c      	strb	r4, [r5, #24]
    5050:	766c      	strb	r4, [r5, #25]
    5052:	76ac      	strb	r4, [r5, #26]
    5054:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5058:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    505a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    505e:	626b      	str	r3, [r5, #36]	; 0x24
    5060:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5064:	f7fd fd6c 	bl	2b40 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5068:	f7fd fa98 	bl	259c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    506c:	f04f 33ff 	mov.w	r3, #4294967295
    5070:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5072:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5074:	f7fd fe94 	bl	2da0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5078:	f7fd fdca 	bl	2c10 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    507c:	f240 1301 	movw	r3, #257	; 0x101
    5080:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5084:	ab06      	add	r3, sp, #24
    5086:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5088:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    508c:	f002 fe03 	bl	7c96 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5090:	4620      	mov	r0, r4
    5092:	f7ff fecf 	bl	4e34 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5096:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    5098:	4d16      	ldr	r5, [pc, #88]	; (50f4 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    509a:	f7ff fecb 	bl	4e34 <z_sys_init_run_level>
	z_sched_init();
    509e:	f001 f98d 	bl	63bc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    50a2:	4b15      	ldr	r3, [pc, #84]	; (50f8 <z_cstart+0xd0>)
    50a4:	9305      	str	r3, [sp, #20]
    50a6:	2301      	movs	r3, #1
    50a8:	4914      	ldr	r1, [pc, #80]	; (50fc <z_cstart+0xd4>)
    50aa:	9400      	str	r4, [sp, #0]
    50ac:	e9cd 4303 	strd	r4, r3, [sp, #12]
    50b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    50b4:	464b      	mov	r3, r9
    50b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    50ba:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    50bc:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    50be:	f001 fc95 	bl	69ec <z_setup_new_thread>
    50c2:	7b6a      	ldrb	r2, [r5, #13]
    50c4:	f022 0204 	bic.w	r2, r2, #4
    50c8:	736a      	strb	r2, [r5, #13]
    50ca:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    50cc:	4628      	mov	r0, r5
    50ce:	f000 fdc1 	bl	5c54 <z_ready_thread>
		init_idle_thread(i);
    50d2:	4620      	mov	r0, r4
    50d4:	f7ff ff58 	bl	4f88 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    50d8:	4b09      	ldr	r3, [pc, #36]	; (5100 <z_cstart+0xd8>)
    50da:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    50dc:	464a      	mov	r2, r9
    50de:	4639      	mov	r1, r7
    50e0:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    50e2:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    50e4:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    50e8:	f7fd fb92 	bl	2810 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    50ec:	e000ed00 	.word	0xe000ed00
    50f0:	200009e4 	.word	0x200009e4
    50f4:	20000240 	.word	0x20000240
    50f8:	00008fcc 	.word	0x00008fcc
    50fc:	20001020 	.word	0x20001020
    5100:	200001c0 	.word	0x200001c0
    5104:	20001dc0 	.word	0x20001dc0
    5108:	00004fe1 	.word	0x00004fe1

0000510c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    510c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5110:	4d16      	ldr	r5, [pc, #88]	; (516c <init_mem_slab_module+0x60>)
    5112:	4c17      	ldr	r4, [pc, #92]	; (5170 <init_mem_slab_module+0x64>)
    5114:	4e17      	ldr	r6, [pc, #92]	; (5174 <init_mem_slab_module+0x68>)
    5116:	46a8      	mov	r8, r5
    5118:	42ac      	cmp	r4, r5
    511a:	d90c      	bls.n	5136 <init_mem_slab_module+0x2a>
    511c:	4916      	ldr	r1, [pc, #88]	; (5178 <init_mem_slab_module+0x6c>)
    511e:	4817      	ldr	r0, [pc, #92]	; (517c <init_mem_slab_module+0x70>)
    5120:	233c      	movs	r3, #60	; 0x3c
    5122:	4632      	mov	r2, r6
    5124:	f002 fb97 	bl	7856 <printk>
    5128:	4815      	ldr	r0, [pc, #84]	; (5180 <init_mem_slab_module+0x74>)
    512a:	f002 fb94 	bl	7856 <printk>
    512e:	213c      	movs	r1, #60	; 0x3c
    5130:	4630      	mov	r0, r6
    5132:	f002 fabc 	bl	76ae <assert_post_action>
    5136:	4544      	cmp	r4, r8
    5138:	d302      	bcc.n	5140 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    513a:	2000      	movs	r0, #0
	return rc;
}
    513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5140:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    5144:	ea41 0302 	orr.w	r3, r1, r2
    5148:	f013 0303 	ands.w	r3, r3, #3
    514c:	d10b      	bne.n	5166 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    514e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    5150:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    5152:	4283      	cmp	r3, r0
    5154:	d101      	bne.n	515a <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5156:	3420      	adds	r4, #32
    5158:	e7de      	b.n	5118 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    515a:	69a7      	ldr	r7, [r4, #24]
    515c:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    515e:	3301      	adds	r3, #1
		slab->free_list = p;
    5160:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    5162:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5164:	e7f5      	b.n	5152 <init_mem_slab_module+0x46>
		return -EINVAL;
    5166:	f06f 0015 	mvn.w	r0, #21
	return rc;
    516a:	e7e7      	b.n	513c <init_mem_slab_module+0x30>
    516c:	20000150 	.word	0x20000150
    5170:	20000150 	.word	0x20000150
    5174:	00008fd1 	.word	0x00008fd1
    5178:	00008ff6 	.word	0x00008ff6
    517c:	00008224 	.word	0x00008224
    5180:	00009013 	.word	0x00009013

00005184 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5188:	4604      	mov	r4, r0
    518a:	460e      	mov	r6, r1
    518c:	4690      	mov	r8, r2
    518e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5190:	f100 0508 	add.w	r5, r0, #8
    5194:	f04f 0320 	mov.w	r3, #32
    5198:	f3ef 8711 	mrs	r7, BASEPRI
    519c:	f383 8812 	msr	BASEPRI_MAX, r3
    51a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51a4:	4628      	mov	r0, r5
    51a6:	f001 fd15 	bl	6bd4 <z_spin_lock_valid>
    51aa:	b968      	cbnz	r0, 51c8 <k_mem_slab_alloc+0x44>
    51ac:	4a24      	ldr	r2, [pc, #144]	; (5240 <k_mem_slab_alloc+0xbc>)
    51ae:	4925      	ldr	r1, [pc, #148]	; (5244 <k_mem_slab_alloc+0xc0>)
    51b0:	4825      	ldr	r0, [pc, #148]	; (5248 <k_mem_slab_alloc+0xc4>)
    51b2:	2381      	movs	r3, #129	; 0x81
    51b4:	f002 fb4f 	bl	7856 <printk>
    51b8:	4824      	ldr	r0, [pc, #144]	; (524c <k_mem_slab_alloc+0xc8>)
    51ba:	4629      	mov	r1, r5
    51bc:	f002 fb4b 	bl	7856 <printk>
    51c0:	481f      	ldr	r0, [pc, #124]	; (5240 <k_mem_slab_alloc+0xbc>)
    51c2:	2181      	movs	r1, #129	; 0x81
    51c4:	f002 fa73 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    51c8:	4628      	mov	r0, r5
    51ca:	f001 fd21 	bl	6c10 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    51ce:	69a3      	ldr	r3, [r4, #24]
    51d0:	b1eb      	cbz	r3, 520e <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    51d2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    51d4:	681b      	ldr	r3, [r3, #0]
    51d6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    51d8:	69e3      	ldr	r3, [r4, #28]
    51da:	3301      	adds	r3, #1
    51dc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    51de:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    51e0:	4628      	mov	r0, r5
    51e2:	f001 fd05 	bl	6bf0 <z_spin_unlock_valid>
    51e6:	b968      	cbnz	r0, 5204 <k_mem_slab_alloc+0x80>
    51e8:	4a15      	ldr	r2, [pc, #84]	; (5240 <k_mem_slab_alloc+0xbc>)
    51ea:	4919      	ldr	r1, [pc, #100]	; (5250 <k_mem_slab_alloc+0xcc>)
    51ec:	4816      	ldr	r0, [pc, #88]	; (5248 <k_mem_slab_alloc+0xc4>)
    51ee:	23ac      	movs	r3, #172	; 0xac
    51f0:	f002 fb31 	bl	7856 <printk>
    51f4:	4817      	ldr	r0, [pc, #92]	; (5254 <k_mem_slab_alloc+0xd0>)
    51f6:	4629      	mov	r1, r5
    51f8:	f002 fb2d 	bl	7856 <printk>
    51fc:	4810      	ldr	r0, [pc, #64]	; (5240 <k_mem_slab_alloc+0xbc>)
    51fe:	21ac      	movs	r1, #172	; 0xac
    5200:	f002 fa55 	bl	76ae <assert_post_action>
	__asm__ volatile(
    5204:	f387 8811 	msr	BASEPRI, r7
    5208:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    520c:	e013      	b.n	5236 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    520e:	ea58 0209 	orrs.w	r2, r8, r9
    5212:	d103      	bne.n	521c <k_mem_slab_alloc+0x98>
		*mem = NULL;
    5214:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5216:	f06f 040b 	mvn.w	r4, #11
    521a:	e7e1      	b.n	51e0 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    521c:	4622      	mov	r2, r4
    521e:	e9cd 8900 	strd	r8, r9, [sp]
    5222:	4639      	mov	r1, r7
    5224:	4628      	mov	r0, r5
    5226:	f000 fec7 	bl	5fb8 <z_pend_curr>
		if (result == 0) {
    522a:	4604      	mov	r4, r0
    522c:	b918      	cbnz	r0, 5236 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    522e:	4b0a      	ldr	r3, [pc, #40]	; (5258 <k_mem_slab_alloc+0xd4>)
    5230:	689b      	ldr	r3, [r3, #8]
    5232:	695b      	ldr	r3, [r3, #20]
    5234:	6033      	str	r3, [r6, #0]
}
    5236:	4620      	mov	r0, r4
    5238:	b003      	add	sp, #12
    523a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    523e:	bf00      	nop
    5240:	0000888c 	.word	0x0000888c
    5244:	000088de 	.word	0x000088de
    5248:	00008224 	.word	0x00008224
    524c:	000088f3 	.word	0x000088f3
    5250:	000088b2 	.word	0x000088b2
    5254:	000088c9 	.word	0x000088c9
    5258:	200009e4 	.word	0x200009e4

0000525c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5260:	4604      	mov	r4, r0
    5262:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5264:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5268:	f04f 0320 	mov.w	r3, #32
    526c:	f3ef 8711 	mrs	r7, BASEPRI
    5270:	f383 8812 	msr	BASEPRI_MAX, r3
    5274:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5278:	4628      	mov	r0, r5
    527a:	f001 fcab 	bl	6bd4 <z_spin_lock_valid>
    527e:	b968      	cbnz	r0, 529c <k_mem_slab_free+0x40>
    5280:	4a22      	ldr	r2, [pc, #136]	; (530c <k_mem_slab_free+0xb0>)
    5282:	4923      	ldr	r1, [pc, #140]	; (5310 <k_mem_slab_free+0xb4>)
    5284:	4823      	ldr	r0, [pc, #140]	; (5314 <k_mem_slab_free+0xb8>)
    5286:	2381      	movs	r3, #129	; 0x81
    5288:	f002 fae5 	bl	7856 <printk>
    528c:	4822      	ldr	r0, [pc, #136]	; (5318 <k_mem_slab_free+0xbc>)
    528e:	4629      	mov	r1, r5
    5290:	f002 fae1 	bl	7856 <printk>
    5294:	481d      	ldr	r0, [pc, #116]	; (530c <k_mem_slab_free+0xb0>)
    5296:	2181      	movs	r1, #129	; 0x81
    5298:	f002 fa09 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    529c:	4628      	mov	r0, r5
    529e:	f001 fcb7 	bl	6c10 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    52a2:	f8d4 8018 	ldr.w	r8, [r4, #24]
    52a6:	f1b8 0f00 	cmp.w	r8, #0
    52aa:	d10f      	bne.n	52cc <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    52ac:	4620      	mov	r0, r4
    52ae:	f001 f835 	bl	631c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    52b2:	b158      	cbz	r0, 52cc <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    52b4:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    52b6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    52b8:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    52bc:	f000 fcca 	bl	5c54 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    52c0:	4639      	mov	r1, r7
    52c2:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    52c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    52c8:	f000 ba70 	b.w	57ac <z_reschedule>
	**(char ***) mem = slab->free_list;
    52cc:	6833      	ldr	r3, [r6, #0]
    52ce:	69a2      	ldr	r2, [r4, #24]
    52d0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    52d2:	6833      	ldr	r3, [r6, #0]
    52d4:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    52d6:	69e3      	ldr	r3, [r4, #28]
    52d8:	3b01      	subs	r3, #1
    52da:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52dc:	4628      	mov	r0, r5
    52de:	f001 fc87 	bl	6bf0 <z_spin_unlock_valid>
    52e2:	b968      	cbnz	r0, 5300 <k_mem_slab_free+0xa4>
    52e4:	4a09      	ldr	r2, [pc, #36]	; (530c <k_mem_slab_free+0xb0>)
    52e6:	490d      	ldr	r1, [pc, #52]	; (531c <k_mem_slab_free+0xc0>)
    52e8:	480a      	ldr	r0, [pc, #40]	; (5314 <k_mem_slab_free+0xb8>)
    52ea:	23ac      	movs	r3, #172	; 0xac
    52ec:	f002 fab3 	bl	7856 <printk>
    52f0:	480b      	ldr	r0, [pc, #44]	; (5320 <k_mem_slab_free+0xc4>)
    52f2:	4629      	mov	r1, r5
    52f4:	f002 faaf 	bl	7856 <printk>
    52f8:	4804      	ldr	r0, [pc, #16]	; (530c <k_mem_slab_free+0xb0>)
    52fa:	21ac      	movs	r1, #172	; 0xac
    52fc:	f002 f9d7 	bl	76ae <assert_post_action>
	__asm__ volatile(
    5300:	f387 8811 	msr	BASEPRI, r7
    5304:	f3bf 8f6f 	isb	sy
}
    5308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    530c:	0000888c 	.word	0x0000888c
    5310:	000088de 	.word	0x000088de
    5314:	00008224 	.word	0x00008224
    5318:	000088f3 	.word	0x000088f3
    531c:	000088b2 	.word	0x000088b2
    5320:	000088c9 	.word	0x000088c9

00005324 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5324:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5328:	4604      	mov	r4, r0
    532a:	4616      	mov	r6, r2
    532c:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    532e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5332:	b163      	cbz	r3, 534e <z_impl_k_mutex_lock+0x2a>
    5334:	4970      	ldr	r1, [pc, #448]	; (54f8 <z_impl_k_mutex_lock+0x1d4>)
    5336:	4a71      	ldr	r2, [pc, #452]	; (54fc <z_impl_k_mutex_lock+0x1d8>)
    5338:	4871      	ldr	r0, [pc, #452]	; (5500 <z_impl_k_mutex_lock+0x1dc>)
    533a:	2365      	movs	r3, #101	; 0x65
    533c:	f002 fa8b 	bl	7856 <printk>
    5340:	4870      	ldr	r0, [pc, #448]	; (5504 <z_impl_k_mutex_lock+0x1e0>)
    5342:	f002 fa88 	bl	7856 <printk>
    5346:	486d      	ldr	r0, [pc, #436]	; (54fc <z_impl_k_mutex_lock+0x1d8>)
    5348:	2165      	movs	r1, #101	; 0x65
    534a:	f002 f9b0 	bl	76ae <assert_post_action>
	__asm__ volatile(
    534e:	f04f 0320 	mov.w	r3, #32
    5352:	f3ef 8811 	mrs	r8, BASEPRI
    5356:	f383 8812 	msr	BASEPRI_MAX, r3
    535a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    535e:	486a      	ldr	r0, [pc, #424]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    5360:	f001 fc38 	bl	6bd4 <z_spin_lock_valid>
    5364:	b968      	cbnz	r0, 5382 <z_impl_k_mutex_lock+0x5e>
    5366:	4a69      	ldr	r2, [pc, #420]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    5368:	4969      	ldr	r1, [pc, #420]	; (5510 <z_impl_k_mutex_lock+0x1ec>)
    536a:	4865      	ldr	r0, [pc, #404]	; (5500 <z_impl_k_mutex_lock+0x1dc>)
    536c:	2381      	movs	r3, #129	; 0x81
    536e:	f002 fa72 	bl	7856 <printk>
    5372:	4965      	ldr	r1, [pc, #404]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    5374:	4867      	ldr	r0, [pc, #412]	; (5514 <z_impl_k_mutex_lock+0x1f0>)
    5376:	f002 fa6e 	bl	7856 <printk>
    537a:	4864      	ldr	r0, [pc, #400]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    537c:	2181      	movs	r1, #129	; 0x81
    537e:	f002 f996 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    5382:	4861      	ldr	r0, [pc, #388]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    5384:	f001 fc44 	bl	6c10 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5388:	68e3      	ldr	r3, [r4, #12]
    538a:	4a63      	ldr	r2, [pc, #396]	; (5518 <z_impl_k_mutex_lock+0x1f4>)
    538c:	b1fb      	cbz	r3, 53ce <z_impl_k_mutex_lock+0xaa>
    538e:	68a0      	ldr	r0, [r4, #8]
    5390:	6891      	ldr	r1, [r2, #8]
    5392:	4288      	cmp	r0, r1
    5394:	d03d      	beq.n	5412 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5396:	ea56 0307 	orrs.w	r3, r6, r7
    539a:	d13c      	bne.n	5416 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    539c:	485a      	ldr	r0, [pc, #360]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    539e:	f001 fc27 	bl	6bf0 <z_spin_unlock_valid>
    53a2:	b968      	cbnz	r0, 53c0 <z_impl_k_mutex_lock+0x9c>
    53a4:	4a59      	ldr	r2, [pc, #356]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    53a6:	495d      	ldr	r1, [pc, #372]	; (551c <z_impl_k_mutex_lock+0x1f8>)
    53a8:	4855      	ldr	r0, [pc, #340]	; (5500 <z_impl_k_mutex_lock+0x1dc>)
    53aa:	23ac      	movs	r3, #172	; 0xac
    53ac:	f002 fa53 	bl	7856 <printk>
    53b0:	4955      	ldr	r1, [pc, #340]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    53b2:	485b      	ldr	r0, [pc, #364]	; (5520 <z_impl_k_mutex_lock+0x1fc>)
    53b4:	f002 fa4f 	bl	7856 <printk>
    53b8:	4854      	ldr	r0, [pc, #336]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    53ba:	21ac      	movs	r1, #172	; 0xac
    53bc:	f002 f977 	bl	76ae <assert_post_action>
	__asm__ volatile(
    53c0:	f388 8811 	msr	BASEPRI, r8
    53c4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    53c8:	f06f 000f 	mvn.w	r0, #15
    53cc:	e01e      	b.n	540c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    53ce:	6891      	ldr	r1, [r2, #8]
    53d0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    53d4:	484c      	ldr	r0, [pc, #304]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    53d6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    53d8:	3301      	adds	r3, #1
    53da:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    53dc:	6893      	ldr	r3, [r2, #8]
    53de:	60a3      	str	r3, [r4, #8]
    53e0:	f001 fc06 	bl	6bf0 <z_spin_unlock_valid>
    53e4:	b968      	cbnz	r0, 5402 <z_impl_k_mutex_lock+0xde>
    53e6:	4a49      	ldr	r2, [pc, #292]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    53e8:	494c      	ldr	r1, [pc, #304]	; (551c <z_impl_k_mutex_lock+0x1f8>)
    53ea:	4845      	ldr	r0, [pc, #276]	; (5500 <z_impl_k_mutex_lock+0x1dc>)
    53ec:	23ac      	movs	r3, #172	; 0xac
    53ee:	f002 fa32 	bl	7856 <printk>
    53f2:	4945      	ldr	r1, [pc, #276]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    53f4:	484a      	ldr	r0, [pc, #296]	; (5520 <z_impl_k_mutex_lock+0x1fc>)
    53f6:	f002 fa2e 	bl	7856 <printk>
    53fa:	4844      	ldr	r0, [pc, #272]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    53fc:	21ac      	movs	r1, #172	; 0xac
    53fe:	f002 f956 	bl	76ae <assert_post_action>
    5402:	f388 8811 	msr	BASEPRI, r8
    5406:	f3bf 8f6f 	isb	sy
		return 0;
    540a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    540c:	b002      	add	sp, #8
    540e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5412:	6921      	ldr	r1, [r4, #16]
    5414:	e7de      	b.n	53d4 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5416:	f991 100e 	ldrsb.w	r1, [r1, #14]
    541a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    541e:	4299      	cmp	r1, r3
    5420:	bfa8      	it	ge
    5422:	4619      	movge	r1, r3
    5424:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5428:	4291      	cmp	r1, r2
    542a:	bfb8      	it	lt
    542c:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    542e:	428b      	cmp	r3, r1
    5430:	dd44      	ble.n	54bc <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    5432:	f000 fdf1 	bl	6018 <z_set_prio>
    5436:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5438:	e9cd 6700 	strd	r6, r7, [sp]
    543c:	4832      	ldr	r0, [pc, #200]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    543e:	4622      	mov	r2, r4
    5440:	4641      	mov	r1, r8
    5442:	f000 fdb9 	bl	5fb8 <z_pend_curr>
	if (got_mutex == 0) {
    5446:	2800      	cmp	r0, #0
    5448:	d0e0      	beq.n	540c <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    544a:	f04f 0320 	mov.w	r3, #32
    544e:	f3ef 8611 	mrs	r6, BASEPRI
    5452:	f383 8812 	msr	BASEPRI_MAX, r3
    5456:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    545a:	482b      	ldr	r0, [pc, #172]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    545c:	f001 fbba 	bl	6bd4 <z_spin_lock_valid>
    5460:	b968      	cbnz	r0, 547e <z_impl_k_mutex_lock+0x15a>
    5462:	4a2a      	ldr	r2, [pc, #168]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    5464:	492a      	ldr	r1, [pc, #168]	; (5510 <z_impl_k_mutex_lock+0x1ec>)
    5466:	4826      	ldr	r0, [pc, #152]	; (5500 <z_impl_k_mutex_lock+0x1dc>)
    5468:	2381      	movs	r3, #129	; 0x81
    546a:	f002 f9f4 	bl	7856 <printk>
    546e:	4926      	ldr	r1, [pc, #152]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    5470:	4828      	ldr	r0, [pc, #160]	; (5514 <z_impl_k_mutex_lock+0x1f0>)
    5472:	f002 f9f0 	bl	7856 <printk>
    5476:	4825      	ldr	r0, [pc, #148]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    5478:	2181      	movs	r1, #129	; 0x81
    547a:	f002 f918 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    547e:	4822      	ldr	r0, [pc, #136]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    5480:	f001 fbc6 	bl	6c10 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5484:	6823      	ldr	r3, [r4, #0]
    5486:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5488:	429c      	cmp	r4, r3
    548a:	d00a      	beq.n	54a2 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    548c:	b14b      	cbz	r3, 54a2 <z_impl_k_mutex_lock+0x17e>
    548e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5492:	4299      	cmp	r1, r3
    5494:	bfa8      	it	ge
    5496:	4619      	movge	r1, r3
    5498:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    549c:	4299      	cmp	r1, r3
    549e:	bfb8      	it	lt
    54a0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    54a2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    54a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    54a8:	4299      	cmp	r1, r3
    54aa:	d109      	bne.n	54c0 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    54ac:	b16d      	cbz	r5, 54ca <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    54ae:	4816      	ldr	r0, [pc, #88]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    54b0:	4631      	mov	r1, r6
    54b2:	f000 f97b 	bl	57ac <z_reschedule>
	return -EAGAIN;
    54b6:	f06f 000a 	mvn.w	r0, #10
    54ba:	e7a7      	b.n	540c <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    54bc:	2500      	movs	r5, #0
    54be:	e7bb      	b.n	5438 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    54c0:	f000 fdaa 	bl	6018 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    54c4:	2800      	cmp	r0, #0
    54c6:	d1f2      	bne.n	54ae <z_impl_k_mutex_lock+0x18a>
    54c8:	e7f0      	b.n	54ac <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54ca:	480f      	ldr	r0, [pc, #60]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    54cc:	f001 fb90 	bl	6bf0 <z_spin_unlock_valid>
    54d0:	b968      	cbnz	r0, 54ee <z_impl_k_mutex_lock+0x1ca>
    54d2:	4a0e      	ldr	r2, [pc, #56]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    54d4:	4911      	ldr	r1, [pc, #68]	; (551c <z_impl_k_mutex_lock+0x1f8>)
    54d6:	480a      	ldr	r0, [pc, #40]	; (5500 <z_impl_k_mutex_lock+0x1dc>)
    54d8:	23ac      	movs	r3, #172	; 0xac
    54da:	f002 f9bc 	bl	7856 <printk>
    54de:	490a      	ldr	r1, [pc, #40]	; (5508 <z_impl_k_mutex_lock+0x1e4>)
    54e0:	480f      	ldr	r0, [pc, #60]	; (5520 <z_impl_k_mutex_lock+0x1fc>)
    54e2:	f002 f9b8 	bl	7856 <printk>
    54e6:	4809      	ldr	r0, [pc, #36]	; (550c <z_impl_k_mutex_lock+0x1e8>)
    54e8:	21ac      	movs	r1, #172	; 0xac
    54ea:	f002 f8e0 	bl	76ae <assert_post_action>
	__asm__ volatile(
    54ee:	f386 8811 	msr	BASEPRI, r6
    54f2:	f3bf 8f6f 	isb	sy
    54f6:	e7de      	b.n	54b6 <z_impl_k_mutex_lock+0x192>
    54f8:	00009054 	.word	0x00009054
    54fc:	00009032 	.word	0x00009032
    5500:	00008224 	.word	0x00008224
    5504:	00009066 	.word	0x00009066
    5508:	20000a0c 	.word	0x20000a0c
    550c:	0000888c 	.word	0x0000888c
    5510:	000088de 	.word	0x000088de
    5514:	000088f3 	.word	0x000088f3
    5518:	200009e4 	.word	0x200009e4
    551c:	000088b2 	.word	0x000088b2
    5520:	000088c9 	.word	0x000088c9

00005524 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5524:	b538      	push	{r3, r4, r5, lr}
    5526:	4604      	mov	r4, r0
    5528:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    552c:	b163      	cbz	r3, 5548 <z_impl_k_mutex_unlock+0x24>
    552e:	4952      	ldr	r1, [pc, #328]	; (5678 <z_impl_k_mutex_unlock+0x154>)
    5530:	4a52      	ldr	r2, [pc, #328]	; (567c <z_impl_k_mutex_unlock+0x158>)
    5532:	4853      	ldr	r0, [pc, #332]	; (5680 <z_impl_k_mutex_unlock+0x15c>)
    5534:	23c7      	movs	r3, #199	; 0xc7
    5536:	f002 f98e 	bl	7856 <printk>
    553a:	4852      	ldr	r0, [pc, #328]	; (5684 <z_impl_k_mutex_unlock+0x160>)
    553c:	f002 f98b 	bl	7856 <printk>
    5540:	484e      	ldr	r0, [pc, #312]	; (567c <z_impl_k_mutex_unlock+0x158>)
    5542:	21c7      	movs	r1, #199	; 0xc7
    5544:	f002 f8b3 	bl	76ae <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5548:	68a3      	ldr	r3, [r4, #8]
    554a:	2b00      	cmp	r3, #0
    554c:	f000 808d 	beq.w	566a <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5550:	4d4d      	ldr	r5, [pc, #308]	; (5688 <z_impl_k_mutex_unlock+0x164>)
    5552:	68aa      	ldr	r2, [r5, #8]
    5554:	4293      	cmp	r3, r2
    5556:	f040 808b 	bne.w	5670 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    555a:	68e3      	ldr	r3, [r4, #12]
    555c:	b94b      	cbnz	r3, 5572 <z_impl_k_mutex_unlock+0x4e>
    555e:	494b      	ldr	r1, [pc, #300]	; (568c <z_impl_k_mutex_unlock+0x168>)
    5560:	4847      	ldr	r0, [pc, #284]	; (5680 <z_impl_k_mutex_unlock+0x15c>)
    5562:	4a46      	ldr	r2, [pc, #280]	; (567c <z_impl_k_mutex_unlock+0x158>)
    5564:	23df      	movs	r3, #223	; 0xdf
    5566:	f002 f976 	bl	7856 <printk>
    556a:	4844      	ldr	r0, [pc, #272]	; (567c <z_impl_k_mutex_unlock+0x158>)
    556c:	21df      	movs	r1, #223	; 0xdf
    556e:	f002 f89e 	bl	76ae <assert_post_action>
    5572:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    5576:	b163      	cbz	r3, 5592 <z_impl_k_mutex_unlock+0x6e>
    5578:	493f      	ldr	r1, [pc, #252]	; (5678 <z_impl_k_mutex_unlock+0x154>)
    557a:	4a45      	ldr	r2, [pc, #276]	; (5690 <z_impl_k_mutex_unlock+0x16c>)
    557c:	4840      	ldr	r0, [pc, #256]	; (5680 <z_impl_k_mutex_unlock+0x15c>)
    557e:	23fd      	movs	r3, #253	; 0xfd
    5580:	f002 f969 	bl	7856 <printk>
    5584:	4843      	ldr	r0, [pc, #268]	; (5694 <z_impl_k_mutex_unlock+0x170>)
    5586:	f002 f966 	bl	7856 <printk>
    558a:	4841      	ldr	r0, [pc, #260]	; (5690 <z_impl_k_mutex_unlock+0x16c>)
    558c:	21fd      	movs	r1, #253	; 0xfd
    558e:	f002 f88e 	bl	76ae <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5592:	68ab      	ldr	r3, [r5, #8]
    5594:	7bdb      	ldrb	r3, [r3, #15]
    5596:	2b01      	cmp	r3, #1
    5598:	d10c      	bne.n	55b4 <z_impl_k_mutex_unlock+0x90>
    559a:	493f      	ldr	r1, [pc, #252]	; (5698 <z_impl_k_mutex_unlock+0x174>)
    559c:	4a3c      	ldr	r2, [pc, #240]	; (5690 <z_impl_k_mutex_unlock+0x16c>)
    559e:	4838      	ldr	r0, [pc, #224]	; (5680 <z_impl_k_mutex_unlock+0x15c>)
    55a0:	23fe      	movs	r3, #254	; 0xfe
    55a2:	f002 f958 	bl	7856 <printk>
    55a6:	483b      	ldr	r0, [pc, #236]	; (5694 <z_impl_k_mutex_unlock+0x170>)
    55a8:	f002 f955 	bl	7856 <printk>
    55ac:	4838      	ldr	r0, [pc, #224]	; (5690 <z_impl_k_mutex_unlock+0x16c>)
    55ae:	21fe      	movs	r1, #254	; 0xfe
    55b0:	f002 f87d 	bl	76ae <assert_post_action>

	--_current->base.sched_locked;
    55b4:	68aa      	ldr	r2, [r5, #8]
    55b6:	7bd3      	ldrb	r3, [r2, #15]
    55b8:	3b01      	subs	r3, #1
    55ba:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    55bc:	68e3      	ldr	r3, [r4, #12]
    55be:	2b01      	cmp	r3, #1
    55c0:	d905      	bls.n	55ce <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    55c2:	3b01      	subs	r3, #1
    55c4:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    55c6:	f000 fe2d 	bl	6224 <k_sched_unlock>

	return 0;
    55ca:	2000      	movs	r0, #0
}
    55cc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    55ce:	f04f 0320 	mov.w	r3, #32
    55d2:	f3ef 8511 	mrs	r5, BASEPRI
    55d6:	f383 8812 	msr	BASEPRI_MAX, r3
    55da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55de:	482f      	ldr	r0, [pc, #188]	; (569c <z_impl_k_mutex_unlock+0x178>)
    55e0:	f001 faf8 	bl	6bd4 <z_spin_lock_valid>
    55e4:	b968      	cbnz	r0, 5602 <z_impl_k_mutex_unlock+0xde>
    55e6:	4a2e      	ldr	r2, [pc, #184]	; (56a0 <z_impl_k_mutex_unlock+0x17c>)
    55e8:	492e      	ldr	r1, [pc, #184]	; (56a4 <z_impl_k_mutex_unlock+0x180>)
    55ea:	4825      	ldr	r0, [pc, #148]	; (5680 <z_impl_k_mutex_unlock+0x15c>)
    55ec:	2381      	movs	r3, #129	; 0x81
    55ee:	f002 f932 	bl	7856 <printk>
    55f2:	492a      	ldr	r1, [pc, #168]	; (569c <z_impl_k_mutex_unlock+0x178>)
    55f4:	482c      	ldr	r0, [pc, #176]	; (56a8 <z_impl_k_mutex_unlock+0x184>)
    55f6:	f002 f92e 	bl	7856 <printk>
    55fa:	4829      	ldr	r0, [pc, #164]	; (56a0 <z_impl_k_mutex_unlock+0x17c>)
    55fc:	2181      	movs	r1, #129	; 0x81
    55fe:	f002 f856 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    5602:	4826      	ldr	r0, [pc, #152]	; (569c <z_impl_k_mutex_unlock+0x178>)
    5604:	f001 fb04 	bl	6c10 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5608:	68a0      	ldr	r0, [r4, #8]
    560a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    560c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5610:	4299      	cmp	r1, r3
    5612:	d001      	beq.n	5618 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    5614:	f000 fd00 	bl	6018 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5618:	4620      	mov	r0, r4
    561a:	f000 fe7f 	bl	631c <z_unpend_first_thread>
	mutex->owner = new_owner;
    561e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5620:	b158      	cbz	r0, 563a <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    5622:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5626:	6122      	str	r2, [r4, #16]
    5628:	2200      	movs	r2, #0
    562a:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    562c:	f000 fb12 	bl	5c54 <z_ready_thread>
		z_reschedule(&lock, key);
    5630:	481a      	ldr	r0, [pc, #104]	; (569c <z_impl_k_mutex_unlock+0x178>)
    5632:	4629      	mov	r1, r5
    5634:	f000 f8ba 	bl	57ac <z_reschedule>
    5638:	e7c5      	b.n	55c6 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    563a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    563c:	4817      	ldr	r0, [pc, #92]	; (569c <z_impl_k_mutex_unlock+0x178>)
    563e:	f001 fad7 	bl	6bf0 <z_spin_unlock_valid>
    5642:	b968      	cbnz	r0, 5660 <z_impl_k_mutex_unlock+0x13c>
    5644:	4a16      	ldr	r2, [pc, #88]	; (56a0 <z_impl_k_mutex_unlock+0x17c>)
    5646:	4919      	ldr	r1, [pc, #100]	; (56ac <z_impl_k_mutex_unlock+0x188>)
    5648:	480d      	ldr	r0, [pc, #52]	; (5680 <z_impl_k_mutex_unlock+0x15c>)
    564a:	23ac      	movs	r3, #172	; 0xac
    564c:	f002 f903 	bl	7856 <printk>
    5650:	4912      	ldr	r1, [pc, #72]	; (569c <z_impl_k_mutex_unlock+0x178>)
    5652:	4817      	ldr	r0, [pc, #92]	; (56b0 <z_impl_k_mutex_unlock+0x18c>)
    5654:	f002 f8ff 	bl	7856 <printk>
    5658:	4811      	ldr	r0, [pc, #68]	; (56a0 <z_impl_k_mutex_unlock+0x17c>)
    565a:	21ac      	movs	r1, #172	; 0xac
    565c:	f002 f827 	bl	76ae <assert_post_action>
	__asm__ volatile(
    5660:	f385 8811 	msr	BASEPRI, r5
    5664:	f3bf 8f6f 	isb	sy
    5668:	e7ad      	b.n	55c6 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    566a:	f06f 0015 	mvn.w	r0, #21
    566e:	e7ad      	b.n	55cc <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    5670:	f04f 30ff 	mov.w	r0, #4294967295
    5674:	e7aa      	b.n	55cc <z_impl_k_mutex_unlock+0xa8>
    5676:	bf00      	nop
    5678:	00009054 	.word	0x00009054
    567c:	00009032 	.word	0x00009032
    5680:	00008224 	.word	0x00008224
    5684:	00009066 	.word	0x00009066
    5688:	200009e4 	.word	0x200009e4
    568c:	0000908b 	.word	0x0000908b
    5690:	000090a2 	.word	0x000090a2
    5694:	000090cd 	.word	0x000090cd
    5698:	000090d0 	.word	0x000090d0
    569c:	20000a0c 	.word	0x20000a0c
    56a0:	0000888c 	.word	0x0000888c
    56a4:	000088de 	.word	0x000088de
    56a8:	000088f3 	.word	0x000088f3
    56ac:	000088b2 	.word	0x000088b2
    56b0:	000088c9 	.word	0x000088c9

000056b4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    56b4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    56b6:	4c08      	ldr	r4, [pc, #32]	; (56d8 <z_reset_time_slice+0x24>)
    56b8:	6823      	ldr	r3, [r4, #0]
    56ba:	b15b      	cbz	r3, 56d4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    56bc:	f7fe fce2 	bl	4084 <sys_clock_elapsed>
    56c0:	4603      	mov	r3, r0
    56c2:	6820      	ldr	r0, [r4, #0]
    56c4:	4a05      	ldr	r2, [pc, #20]	; (56dc <z_reset_time_slice+0x28>)
    56c6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    56c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    56cc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    56ce:	2100      	movs	r1, #0
    56d0:	f001 bc60 	b.w	6f94 <z_set_timeout_expiry>
}
    56d4:	bd10      	pop	{r4, pc}
    56d6:	bf00      	nop
    56d8:	20000a1c 	.word	0x20000a1c
    56dc:	200009e4 	.word	0x200009e4

000056e0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    56e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56e2:	4604      	mov	r4, r0
    56e4:	460d      	mov	r5, r1
	__asm__ volatile(
    56e6:	f04f 0320 	mov.w	r3, #32
    56ea:	f3ef 8611 	mrs	r6, BASEPRI
    56ee:	f383 8812 	msr	BASEPRI_MAX, r3
    56f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56f6:	4823      	ldr	r0, [pc, #140]	; (5784 <k_sched_time_slice_set+0xa4>)
    56f8:	f001 fa6c 	bl	6bd4 <z_spin_lock_valid>
    56fc:	b968      	cbnz	r0, 571a <k_sched_time_slice_set+0x3a>
    56fe:	4a22      	ldr	r2, [pc, #136]	; (5788 <k_sched_time_slice_set+0xa8>)
    5700:	4922      	ldr	r1, [pc, #136]	; (578c <k_sched_time_slice_set+0xac>)
    5702:	4823      	ldr	r0, [pc, #140]	; (5790 <k_sched_time_slice_set+0xb0>)
    5704:	2381      	movs	r3, #129	; 0x81
    5706:	f002 f8a6 	bl	7856 <printk>
    570a:	491e      	ldr	r1, [pc, #120]	; (5784 <k_sched_time_slice_set+0xa4>)
    570c:	4821      	ldr	r0, [pc, #132]	; (5794 <k_sched_time_slice_set+0xb4>)
    570e:	f002 f8a2 	bl	7856 <printk>
    5712:	481d      	ldr	r0, [pc, #116]	; (5788 <k_sched_time_slice_set+0xa8>)
    5714:	2181      	movs	r1, #129	; 0x81
    5716:	f001 ffca 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    571a:	481a      	ldr	r0, [pc, #104]	; (5784 <k_sched_time_slice_set+0xa4>)
    571c:	f001 fa78 	bl	6c10 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5720:	4b1d      	ldr	r3, [pc, #116]	; (5798 <k_sched_time_slice_set+0xb8>)
    5722:	2200      	movs	r2, #0
    5724:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5728:	f240 30e7 	movw	r0, #999	; 0x3e7
    572c:	2100      	movs	r1, #0
    572e:	611a      	str	r2, [r3, #16]
    5730:	fbe7 0104 	umlal	r0, r1, r7, r4
    5734:	2300      	movs	r3, #0
    5736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    573a:	f7fb f95f 	bl	9fc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    573e:	2c00      	cmp	r4, #0
    5740:	4b16      	ldr	r3, [pc, #88]	; (579c <k_sched_time_slice_set+0xbc>)
    5742:	dc1b      	bgt.n	577c <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    5744:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5746:	4b16      	ldr	r3, [pc, #88]	; (57a0 <k_sched_time_slice_set+0xc0>)
    5748:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    574a:	f7ff ffb3 	bl	56b4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    574e:	480d      	ldr	r0, [pc, #52]	; (5784 <k_sched_time_slice_set+0xa4>)
    5750:	f001 fa4e 	bl	6bf0 <z_spin_unlock_valid>
    5754:	b968      	cbnz	r0, 5772 <k_sched_time_slice_set+0x92>
    5756:	4a0c      	ldr	r2, [pc, #48]	; (5788 <k_sched_time_slice_set+0xa8>)
    5758:	4912      	ldr	r1, [pc, #72]	; (57a4 <k_sched_time_slice_set+0xc4>)
    575a:	480d      	ldr	r0, [pc, #52]	; (5790 <k_sched_time_slice_set+0xb0>)
    575c:	23ac      	movs	r3, #172	; 0xac
    575e:	f002 f87a 	bl	7856 <printk>
    5762:	4908      	ldr	r1, [pc, #32]	; (5784 <k_sched_time_slice_set+0xa4>)
    5764:	4810      	ldr	r0, [pc, #64]	; (57a8 <k_sched_time_slice_set+0xc8>)
    5766:	f002 f876 	bl	7856 <printk>
    576a:	4807      	ldr	r0, [pc, #28]	; (5788 <k_sched_time_slice_set+0xa8>)
    576c:	21ac      	movs	r1, #172	; 0xac
    576e:	f001 ff9e 	bl	76ae <assert_post_action>
	__asm__ volatile(
    5772:	f386 8811 	msr	BASEPRI, r6
    5776:	f3bf 8f6f 	isb	sy
	}
}
    577a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    577c:	2802      	cmp	r0, #2
    577e:	bfb8      	it	lt
    5780:	2002      	movlt	r0, #2
    5782:	e7df      	b.n	5744 <k_sched_time_slice_set+0x64>
    5784:	20000a14 	.word	0x20000a14
    5788:	0000888c 	.word	0x0000888c
    578c:	000088de 	.word	0x000088de
    5790:	00008224 	.word	0x00008224
    5794:	000088f3 	.word	0x000088f3
    5798:	200009e4 	.word	0x200009e4
    579c:	20000a1c 	.word	0x20000a1c
    57a0:	20000a18 	.word	0x20000a18
    57a4:	000088b2 	.word	0x000088b2
    57a8:	000088c9 	.word	0x000088c9

000057ac <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    57ac:	b538      	push	{r3, r4, r5, lr}
    57ae:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    57b0:	460d      	mov	r5, r1
    57b2:	b9e9      	cbnz	r1, 57f0 <z_reschedule+0x44>
    57b4:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    57b8:	b9d3      	cbnz	r3, 57f0 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    57ba:	4b19      	ldr	r3, [pc, #100]	; (5820 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    57bc:	69da      	ldr	r2, [r3, #28]
    57be:	689b      	ldr	r3, [r3, #8]
    57c0:	429a      	cmp	r2, r3
    57c2:	d015      	beq.n	57f0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    57c4:	f001 fa14 	bl	6bf0 <z_spin_unlock_valid>
    57c8:	b968      	cbnz	r0, 57e6 <z_reschedule+0x3a>
    57ca:	4a16      	ldr	r2, [pc, #88]	; (5824 <z_reschedule+0x78>)
    57cc:	4916      	ldr	r1, [pc, #88]	; (5828 <z_reschedule+0x7c>)
    57ce:	4817      	ldr	r0, [pc, #92]	; (582c <z_reschedule+0x80>)
    57d0:	23c3      	movs	r3, #195	; 0xc3
    57d2:	f002 f840 	bl	7856 <printk>
    57d6:	4816      	ldr	r0, [pc, #88]	; (5830 <z_reschedule+0x84>)
    57d8:	4621      	mov	r1, r4
    57da:	f002 f83c 	bl	7856 <printk>
    57de:	4811      	ldr	r0, [pc, #68]	; (5824 <z_reschedule+0x78>)
    57e0:	21c3      	movs	r1, #195	; 0xc3
    57e2:	f001 ff64 	bl	76ae <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    57e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    57ea:	2000      	movs	r0, #0
    57ec:	f7fc bfc0 	b.w	2770 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    57f0:	4620      	mov	r0, r4
    57f2:	f001 f9fd 	bl	6bf0 <z_spin_unlock_valid>
    57f6:	b968      	cbnz	r0, 5814 <z_reschedule+0x68>
    57f8:	4a0a      	ldr	r2, [pc, #40]	; (5824 <z_reschedule+0x78>)
    57fa:	490b      	ldr	r1, [pc, #44]	; (5828 <z_reschedule+0x7c>)
    57fc:	480b      	ldr	r0, [pc, #44]	; (582c <z_reschedule+0x80>)
    57fe:	23ac      	movs	r3, #172	; 0xac
    5800:	f002 f829 	bl	7856 <printk>
    5804:	480a      	ldr	r0, [pc, #40]	; (5830 <z_reschedule+0x84>)
    5806:	4621      	mov	r1, r4
    5808:	f002 f825 	bl	7856 <printk>
    580c:	4805      	ldr	r0, [pc, #20]	; (5824 <z_reschedule+0x78>)
    580e:	21ac      	movs	r1, #172	; 0xac
    5810:	f001 ff4d 	bl	76ae <assert_post_action>
    5814:	f385 8811 	msr	BASEPRI, r5
    5818:	f3bf 8f6f 	isb	sy
    581c:	bd38      	pop	{r3, r4, r5, pc}
    581e:	bf00      	nop
    5820:	200009e4 	.word	0x200009e4
    5824:	0000888c 	.word	0x0000888c
    5828:	000088b2 	.word	0x000088b2
    582c:	00008224 	.word	0x00008224
    5830:	000088c9 	.word	0x000088c9

00005834 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    5834:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5836:	f04f 0320 	mov.w	r3, #32
    583a:	f3ef 8511 	mrs	r5, BASEPRI
    583e:	f383 8812 	msr	BASEPRI_MAX, r3
    5842:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5846:	4829      	ldr	r0, [pc, #164]	; (58ec <k_sched_lock+0xb8>)
    5848:	f001 f9c4 	bl	6bd4 <z_spin_lock_valid>
    584c:	b968      	cbnz	r0, 586a <k_sched_lock+0x36>
    584e:	4a28      	ldr	r2, [pc, #160]	; (58f0 <k_sched_lock+0xbc>)
    5850:	4928      	ldr	r1, [pc, #160]	; (58f4 <k_sched_lock+0xc0>)
    5852:	4829      	ldr	r0, [pc, #164]	; (58f8 <k_sched_lock+0xc4>)
    5854:	2381      	movs	r3, #129	; 0x81
    5856:	f001 fffe 	bl	7856 <printk>
    585a:	4924      	ldr	r1, [pc, #144]	; (58ec <k_sched_lock+0xb8>)
    585c:	4827      	ldr	r0, [pc, #156]	; (58fc <k_sched_lock+0xc8>)
    585e:	f001 fffa 	bl	7856 <printk>
    5862:	4823      	ldr	r0, [pc, #140]	; (58f0 <k_sched_lock+0xbc>)
    5864:	2181      	movs	r1, #129	; 0x81
    5866:	f001 ff22 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    586a:	4820      	ldr	r0, [pc, #128]	; (58ec <k_sched_lock+0xb8>)
    586c:	f001 f9d0 	bl	6c10 <z_spin_lock_set_owner>
    5870:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5874:	b163      	cbz	r3, 5890 <k_sched_lock+0x5c>
    5876:	4922      	ldr	r1, [pc, #136]	; (5900 <k_sched_lock+0xcc>)
    5878:	4a22      	ldr	r2, [pc, #136]	; (5904 <k_sched_lock+0xd0>)
    587a:	481f      	ldr	r0, [pc, #124]	; (58f8 <k_sched_lock+0xc4>)
    587c:	23fd      	movs	r3, #253	; 0xfd
    587e:	f001 ffea 	bl	7856 <printk>
    5882:	4821      	ldr	r0, [pc, #132]	; (5908 <k_sched_lock+0xd4>)
    5884:	f001 ffe7 	bl	7856 <printk>
    5888:	481e      	ldr	r0, [pc, #120]	; (5904 <k_sched_lock+0xd0>)
    588a:	21fd      	movs	r1, #253	; 0xfd
    588c:	f001 ff0f 	bl	76ae <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5890:	4c1e      	ldr	r4, [pc, #120]	; (590c <k_sched_lock+0xd8>)
    5892:	68a2      	ldr	r2, [r4, #8]
    5894:	7bd2      	ldrb	r2, [r2, #15]
    5896:	2a01      	cmp	r2, #1
    5898:	d10c      	bne.n	58b4 <k_sched_lock+0x80>
    589a:	491d      	ldr	r1, [pc, #116]	; (5910 <k_sched_lock+0xdc>)
    589c:	4a19      	ldr	r2, [pc, #100]	; (5904 <k_sched_lock+0xd0>)
    589e:	4816      	ldr	r0, [pc, #88]	; (58f8 <k_sched_lock+0xc4>)
    58a0:	23fe      	movs	r3, #254	; 0xfe
    58a2:	f001 ffd8 	bl	7856 <printk>
    58a6:	4818      	ldr	r0, [pc, #96]	; (5908 <k_sched_lock+0xd4>)
    58a8:	f001 ffd5 	bl	7856 <printk>
    58ac:	4815      	ldr	r0, [pc, #84]	; (5904 <k_sched_lock+0xd0>)
    58ae:	21fe      	movs	r1, #254	; 0xfe
    58b0:	f001 fefd 	bl	76ae <assert_post_action>
	--_current->base.sched_locked;
    58b4:	68a2      	ldr	r2, [r4, #8]
    58b6:	7bd3      	ldrb	r3, [r2, #15]
    58b8:	3b01      	subs	r3, #1
    58ba:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58bc:	480b      	ldr	r0, [pc, #44]	; (58ec <k_sched_lock+0xb8>)
    58be:	f001 f997 	bl	6bf0 <z_spin_unlock_valid>
    58c2:	b968      	cbnz	r0, 58e0 <k_sched_lock+0xac>
    58c4:	4a0a      	ldr	r2, [pc, #40]	; (58f0 <k_sched_lock+0xbc>)
    58c6:	4913      	ldr	r1, [pc, #76]	; (5914 <k_sched_lock+0xe0>)
    58c8:	480b      	ldr	r0, [pc, #44]	; (58f8 <k_sched_lock+0xc4>)
    58ca:	23ac      	movs	r3, #172	; 0xac
    58cc:	f001 ffc3 	bl	7856 <printk>
    58d0:	4906      	ldr	r1, [pc, #24]	; (58ec <k_sched_lock+0xb8>)
    58d2:	4811      	ldr	r0, [pc, #68]	; (5918 <k_sched_lock+0xe4>)
    58d4:	f001 ffbf 	bl	7856 <printk>
    58d8:	4805      	ldr	r0, [pc, #20]	; (58f0 <k_sched_lock+0xbc>)
    58da:	21ac      	movs	r1, #172	; 0xac
    58dc:	f001 fee7 	bl	76ae <assert_post_action>
	__asm__ volatile(
    58e0:	f385 8811 	msr	BASEPRI, r5
    58e4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    58e8:	bd38      	pop	{r3, r4, r5, pc}
    58ea:	bf00      	nop
    58ec:	20000a14 	.word	0x20000a14
    58f0:	0000888c 	.word	0x0000888c
    58f4:	000088de 	.word	0x000088de
    58f8:	00008224 	.word	0x00008224
    58fc:	000088f3 	.word	0x000088f3
    5900:	00009054 	.word	0x00009054
    5904:	000090a2 	.word	0x000090a2
    5908:	000090cd 	.word	0x000090cd
    590c:	200009e4 	.word	0x200009e4
    5910:	000090d0 	.word	0x000090d0
    5914:	000088b2 	.word	0x000088b2
    5918:	000088c9 	.word	0x000088c9

0000591c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    591c:	4b0c      	ldr	r3, [pc, #48]	; (5950 <z_priq_dumb_remove+0x34>)
    591e:	4299      	cmp	r1, r3
{
    5920:	b510      	push	{r4, lr}
    5922:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5924:	d10b      	bne.n	593e <z_priq_dumb_remove+0x22>
    5926:	490b      	ldr	r1, [pc, #44]	; (5954 <z_priq_dumb_remove+0x38>)
    5928:	480b      	ldr	r0, [pc, #44]	; (5958 <z_priq_dumb_remove+0x3c>)
    592a:	4a0c      	ldr	r2, [pc, #48]	; (595c <z_priq_dumb_remove+0x40>)
    592c:	f240 33e7 	movw	r3, #999	; 0x3e7
    5930:	f001 ff91 	bl	7856 <printk>
    5934:	4809      	ldr	r0, [pc, #36]	; (595c <z_priq_dumb_remove+0x40>)
    5936:	f240 31e7 	movw	r1, #999	; 0x3e7
    593a:	f001 feb8 	bl	76ae <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    593e:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    5942:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5944:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5946:	2300      	movs	r3, #0
	node->prev = NULL;
    5948:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    594c:	bd10      	pop	{r4, pc}
    594e:	bf00      	nop
    5950:	200001c0 	.word	0x200001c0
    5954:	00009123 	.word	0x00009123
    5958:	00008224 	.word	0x00008224
    595c:	00009101 	.word	0x00009101

00005960 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5960:	6883      	ldr	r3, [r0, #8]
{
    5962:	b510      	push	{r4, lr}
    5964:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    5966:	b95b      	cbnz	r3, 5980 <unpend_thread_no_timeout+0x20>
    5968:	490b      	ldr	r1, [pc, #44]	; (5998 <unpend_thread_no_timeout+0x38>)
    596a:	480c      	ldr	r0, [pc, #48]	; (599c <unpend_thread_no_timeout+0x3c>)
    596c:	4a0c      	ldr	r2, [pc, #48]	; (59a0 <unpend_thread_no_timeout+0x40>)
    596e:	f240 2383 	movw	r3, #643	; 0x283
    5972:	f001 ff70 	bl	7856 <printk>
    5976:	480a      	ldr	r0, [pc, #40]	; (59a0 <unpend_thread_no_timeout+0x40>)
    5978:	f240 2183 	movw	r1, #643	; 0x283
    597c:	f001 fe97 	bl	76ae <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5980:	68a0      	ldr	r0, [r4, #8]
    5982:	4621      	mov	r1, r4
    5984:	f7ff ffca 	bl	591c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5988:	7b63      	ldrb	r3, [r4, #13]
    598a:	f023 0302 	bic.w	r3, r3, #2
    598e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5990:	2300      	movs	r3, #0
    5992:	60a3      	str	r3, [r4, #8]
}
    5994:	bd10      	pop	{r4, pc}
    5996:	bf00      	nop
    5998:	00009144 	.word	0x00009144
    599c:	00008224 	.word	0x00008224
    59a0:	00009101 	.word	0x00009101

000059a4 <update_cache>:
{
    59a4:	b538      	push	{r3, r4, r5, lr}
    59a6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    59a8:	4814      	ldr	r0, [pc, #80]	; (59fc <update_cache+0x58>)
    59aa:	4d15      	ldr	r5, [pc, #84]	; (5a00 <update_cache+0x5c>)
    59ac:	f002 f9be 	bl	7d2c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    59b0:	4604      	mov	r4, r0
    59b2:	b900      	cbnz	r0, 59b6 <update_cache+0x12>
    59b4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    59b6:	b9ca      	cbnz	r2, 59ec <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    59b8:	68ab      	ldr	r3, [r5, #8]
    59ba:	b963      	cbnz	r3, 59d6 <update_cache+0x32>
    59bc:	4911      	ldr	r1, [pc, #68]	; (5a04 <update_cache+0x60>)
    59be:	4a12      	ldr	r2, [pc, #72]	; (5a08 <update_cache+0x64>)
    59c0:	4812      	ldr	r0, [pc, #72]	; (5a0c <update_cache+0x68>)
    59c2:	2389      	movs	r3, #137	; 0x89
    59c4:	f001 ff47 	bl	7856 <printk>
    59c8:	4811      	ldr	r0, [pc, #68]	; (5a10 <update_cache+0x6c>)
    59ca:	f001 ff44 	bl	7856 <printk>
    59ce:	480e      	ldr	r0, [pc, #56]	; (5a08 <update_cache+0x64>)
    59d0:	2189      	movs	r1, #137	; 0x89
    59d2:	f001 fe6c 	bl	76ae <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    59d6:	68ab      	ldr	r3, [r5, #8]
    59d8:	7b5a      	ldrb	r2, [r3, #13]
    59da:	06d2      	lsls	r2, r2, #27
    59dc:	d106      	bne.n	59ec <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    59de:	69a2      	ldr	r2, [r4, #24]
    59e0:	b922      	cbnz	r2, 59ec <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    59e2:	89da      	ldrh	r2, [r3, #14]
    59e4:	2a7f      	cmp	r2, #127	; 0x7f
    59e6:	d901      	bls.n	59ec <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    59e8:	61eb      	str	r3, [r5, #28]
}
    59ea:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    59ec:	68ab      	ldr	r3, [r5, #8]
    59ee:	42a3      	cmp	r3, r4
    59f0:	d001      	beq.n	59f6 <update_cache+0x52>
			z_reset_time_slice();
    59f2:	f7ff fe5f 	bl	56b4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    59f6:	61ec      	str	r4, [r5, #28]
}
    59f8:	e7f7      	b.n	59ea <update_cache+0x46>
    59fa:	bf00      	nop
    59fc:	20000a04 	.word	0x20000a04
    5a00:	200009e4 	.word	0x200009e4
    5a04:	0000915b 	.word	0x0000915b
    5a08:	00009101 	.word	0x00009101
    5a0c:	00008224 	.word	0x00008224
    5a10:	000090cd 	.word	0x000090cd

00005a14 <move_thread_to_end_of_prio_q>:
{
    5a14:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5a16:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5a1a:	7b43      	ldrb	r3, [r0, #13]
    5a1c:	2a00      	cmp	r2, #0
{
    5a1e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5a20:	da06      	bge.n	5a30 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a26:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5a28:	4601      	mov	r1, r0
    5a2a:	481f      	ldr	r0, [pc, #124]	; (5aa8 <move_thread_to_end_of_prio_q+0x94>)
    5a2c:	f7ff ff76 	bl	591c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5a30:	7b63      	ldrb	r3, [r4, #13]
    5a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5a36:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5a38:	4b1c      	ldr	r3, [pc, #112]	; (5aac <move_thread_to_end_of_prio_q+0x98>)
    5a3a:	429c      	cmp	r4, r3
    5a3c:	d109      	bne.n	5a52 <move_thread_to_end_of_prio_q+0x3e>
    5a3e:	491c      	ldr	r1, [pc, #112]	; (5ab0 <move_thread_to_end_of_prio_q+0x9c>)
    5a40:	481c      	ldr	r0, [pc, #112]	; (5ab4 <move_thread_to_end_of_prio_q+0xa0>)
    5a42:	4a1d      	ldr	r2, [pc, #116]	; (5ab8 <move_thread_to_end_of_prio_q+0xa4>)
    5a44:	23ba      	movs	r3, #186	; 0xba
    5a46:	f001 ff06 	bl	7856 <printk>
    5a4a:	481b      	ldr	r0, [pc, #108]	; (5ab8 <move_thread_to_end_of_prio_q+0xa4>)
    5a4c:	21ba      	movs	r1, #186	; 0xba
    5a4e:	f001 fe2e 	bl	76ae <assert_post_action>
	return list->head == list;
    5a52:	4a1a      	ldr	r2, [pc, #104]	; (5abc <move_thread_to_end_of_prio_q+0xa8>)
    5a54:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5a56:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    5a58:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a5c:	428b      	cmp	r3, r1
    5a5e:	bf08      	it	eq
    5a60:	2300      	moveq	r3, #0
    5a62:	2b00      	cmp	r3, #0
    5a64:	bf38      	it	cc
    5a66:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5a68:	b1cb      	cbz	r3, 5a9e <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    5a6a:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5a6e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5a72:	4286      	cmp	r6, r0
    5a74:	d00f      	beq.n	5a96 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    5a76:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5a78:	2800      	cmp	r0, #0
    5a7a:	dd0c      	ble.n	5a96 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    5a7c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5a7e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5a82:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    5a84:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    5a86:	6890      	ldr	r0, [r2, #8]
    5a88:	1b03      	subs	r3, r0, r4
    5a8a:	4258      	negs	r0, r3
}
    5a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5a90:	4158      	adcs	r0, r3
    5a92:	f7ff bf87 	b.w	59a4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5a96:	42ab      	cmp	r3, r5
    5a98:	d001      	beq.n	5a9e <move_thread_to_end_of_prio_q+0x8a>
    5a9a:	681b      	ldr	r3, [r3, #0]
    5a9c:	e7e4      	b.n	5a68 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    5a9e:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    5aa2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5aa4:	6254      	str	r4, [r2, #36]	; 0x24
}
    5aa6:	e7ee      	b.n	5a86 <move_thread_to_end_of_prio_q+0x72>
    5aa8:	20000a04 	.word	0x20000a04
    5aac:	200001c0 	.word	0x200001c0
    5ab0:	00009123 	.word	0x00009123
    5ab4:	00008224 	.word	0x00008224
    5ab8:	00009101 	.word	0x00009101
    5abc:	200009e4 	.word	0x200009e4

00005ac0 <z_time_slice>:
{
    5ac0:	b570      	push	{r4, r5, r6, lr}
    5ac2:	4604      	mov	r4, r0
	__asm__ volatile(
    5ac4:	f04f 0320 	mov.w	r3, #32
    5ac8:	f3ef 8511 	mrs	r5, BASEPRI
    5acc:	f383 8812 	msr	BASEPRI_MAX, r3
    5ad0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ad4:	482a      	ldr	r0, [pc, #168]	; (5b80 <z_time_slice+0xc0>)
    5ad6:	f001 f87d 	bl	6bd4 <z_spin_lock_valid>
    5ada:	b968      	cbnz	r0, 5af8 <z_time_slice+0x38>
    5adc:	4a29      	ldr	r2, [pc, #164]	; (5b84 <z_time_slice+0xc4>)
    5ade:	492a      	ldr	r1, [pc, #168]	; (5b88 <z_time_slice+0xc8>)
    5ae0:	482a      	ldr	r0, [pc, #168]	; (5b8c <z_time_slice+0xcc>)
    5ae2:	2381      	movs	r3, #129	; 0x81
    5ae4:	f001 feb7 	bl	7856 <printk>
    5ae8:	4925      	ldr	r1, [pc, #148]	; (5b80 <z_time_slice+0xc0>)
    5aea:	4829      	ldr	r0, [pc, #164]	; (5b90 <z_time_slice+0xd0>)
    5aec:	f001 feb3 	bl	7856 <printk>
    5af0:	4824      	ldr	r0, [pc, #144]	; (5b84 <z_time_slice+0xc4>)
    5af2:	2181      	movs	r1, #129	; 0x81
    5af4:	f001 fddb 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    5af8:	4821      	ldr	r0, [pc, #132]	; (5b80 <z_time_slice+0xc0>)
    5afa:	f001 f889 	bl	6c10 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    5afe:	4b25      	ldr	r3, [pc, #148]	; (5b94 <z_time_slice+0xd4>)
    5b00:	4a25      	ldr	r2, [pc, #148]	; (5b98 <z_time_slice+0xd8>)
    5b02:	6898      	ldr	r0, [r3, #8]
    5b04:	6811      	ldr	r1, [r2, #0]
    5b06:	4288      	cmp	r0, r1
    5b08:	4619      	mov	r1, r3
    5b0a:	d118      	bne.n	5b3e <z_time_slice+0x7e>
			z_reset_time_slice();
    5b0c:	f7ff fdd2 	bl	56b4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b10:	481b      	ldr	r0, [pc, #108]	; (5b80 <z_time_slice+0xc0>)
    5b12:	f001 f86d 	bl	6bf0 <z_spin_unlock_valid>
    5b16:	b968      	cbnz	r0, 5b34 <z_time_slice+0x74>
    5b18:	4a1a      	ldr	r2, [pc, #104]	; (5b84 <z_time_slice+0xc4>)
    5b1a:	4920      	ldr	r1, [pc, #128]	; (5b9c <z_time_slice+0xdc>)
    5b1c:	481b      	ldr	r0, [pc, #108]	; (5b8c <z_time_slice+0xcc>)
    5b1e:	23ac      	movs	r3, #172	; 0xac
    5b20:	f001 fe99 	bl	7856 <printk>
    5b24:	4916      	ldr	r1, [pc, #88]	; (5b80 <z_time_slice+0xc0>)
    5b26:	481e      	ldr	r0, [pc, #120]	; (5ba0 <z_time_slice+0xe0>)
    5b28:	f001 fe95 	bl	7856 <printk>
    5b2c:	4815      	ldr	r0, [pc, #84]	; (5b84 <z_time_slice+0xc4>)
    5b2e:	21ac      	movs	r1, #172	; 0xac
    5b30:	f001 fdbd 	bl	76ae <assert_post_action>
	__asm__ volatile(
    5b34:	f385 8811 	msr	BASEPRI, r5
    5b38:	f3bf 8f6f 	isb	sy
}
    5b3c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    5b3e:	2600      	movs	r6, #0
    5b40:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5b42:	4a18      	ldr	r2, [pc, #96]	; (5ba4 <z_time_slice+0xe4>)
    5b44:	6812      	ldr	r2, [r2, #0]
    5b46:	b1ba      	cbz	r2, 5b78 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5b48:	89c2      	ldrh	r2, [r0, #14]
    5b4a:	2a7f      	cmp	r2, #127	; 0x7f
    5b4c:	d814      	bhi.n	5b78 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    5b4e:	7b42      	ldrb	r2, [r0, #13]
    5b50:	06d2      	lsls	r2, r2, #27
    5b52:	d111      	bne.n	5b78 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5b54:	4a14      	ldr	r2, [pc, #80]	; (5ba8 <z_time_slice+0xe8>)
    5b56:	f990 600e 	ldrsb.w	r6, [r0, #14]
    5b5a:	6812      	ldr	r2, [r2, #0]
    5b5c:	4296      	cmp	r6, r2
    5b5e:	db0b      	blt.n	5b78 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5b60:	4a12      	ldr	r2, [pc, #72]	; (5bac <z_time_slice+0xec>)
    5b62:	4290      	cmp	r0, r2
    5b64:	d008      	beq.n	5b78 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    5b66:	691a      	ldr	r2, [r3, #16]
    5b68:	42a2      	cmp	r2, r4
    5b6a:	dc02      	bgt.n	5b72 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    5b6c:	f7ff ff52 	bl	5a14 <move_thread_to_end_of_prio_q>
    5b70:	e7cc      	b.n	5b0c <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    5b72:	1b12      	subs	r2, r2, r4
    5b74:	611a      	str	r2, [r3, #16]
    5b76:	e7cb      	b.n	5b10 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    5b78:	2300      	movs	r3, #0
    5b7a:	610b      	str	r3, [r1, #16]
    5b7c:	e7c8      	b.n	5b10 <z_time_slice+0x50>
    5b7e:	bf00      	nop
    5b80:	20000a14 	.word	0x20000a14
    5b84:	0000888c 	.word	0x0000888c
    5b88:	000088de 	.word	0x000088de
    5b8c:	00008224 	.word	0x00008224
    5b90:	000088f3 	.word	0x000088f3
    5b94:	200009e4 	.word	0x200009e4
    5b98:	20000a10 	.word	0x20000a10
    5b9c:	000088b2 	.word	0x000088b2
    5ba0:	000088c9 	.word	0x000088c9
    5ba4:	20000a1c 	.word	0x20000a1c
    5ba8:	20000a18 	.word	0x20000a18
    5bac:	200001c0 	.word	0x200001c0

00005bb0 <ready_thread>:
{
    5bb0:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5bb2:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5bb6:	7b43      	ldrb	r3, [r0, #13]
    5bb8:	2a00      	cmp	r2, #0
{
    5bba:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5bbc:	db3e      	blt.n	5c3c <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5bbe:	06da      	lsls	r2, r3, #27
    5bc0:	d13c      	bne.n	5c3c <ready_thread+0x8c>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    5bc2:	6985      	ldr	r5, [r0, #24]
    5bc4:	2d00      	cmp	r5, #0
    5bc6:	d139      	bne.n	5c3c <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    5bc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5bcc:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5bce:	4b1c      	ldr	r3, [pc, #112]	; (5c40 <ready_thread+0x90>)
    5bd0:	4298      	cmp	r0, r3
    5bd2:	d109      	bne.n	5be8 <ready_thread+0x38>
    5bd4:	491b      	ldr	r1, [pc, #108]	; (5c44 <ready_thread+0x94>)
    5bd6:	481c      	ldr	r0, [pc, #112]	; (5c48 <ready_thread+0x98>)
    5bd8:	4a1c      	ldr	r2, [pc, #112]	; (5c4c <ready_thread+0x9c>)
    5bda:	23ba      	movs	r3, #186	; 0xba
    5bdc:	f001 fe3b 	bl	7856 <printk>
    5be0:	481a      	ldr	r0, [pc, #104]	; (5c4c <ready_thread+0x9c>)
    5be2:	21ba      	movs	r1, #186	; 0xba
    5be4:	f001 fd63 	bl	76ae <assert_post_action>
	return list->head == list;
    5be8:	4919      	ldr	r1, [pc, #100]	; (5c50 <ready_thread+0xa0>)
    5bea:	460b      	mov	r3, r1
    5bec:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5bf0:	4298      	cmp	r0, r3
    5bf2:	bf18      	it	ne
    5bf4:	4605      	movne	r5, r0
    5bf6:	2d00      	cmp	r5, #0
    5bf8:	461a      	mov	r2, r3
    5bfa:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5bfc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    5bfe:	bf38      	it	cc
    5c00:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c02:	b1b3      	cbz	r3, 5c32 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    5c04:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5c08:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5c0c:	4286      	cmp	r6, r0
    5c0e:	d00c      	beq.n	5c2a <ready_thread+0x7a>
		return b2 - b1;
    5c10:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5c12:	2800      	cmp	r0, #0
    5c14:	dd09      	ble.n	5c2a <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    5c16:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5c18:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5c1c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5c1e:	605c      	str	r4, [r3, #4]
}
    5c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5c24:	2000      	movs	r0, #0
    5c26:	f7ff bebd 	b.w	59a4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5c2a:	42ab      	cmp	r3, r5
    5c2c:	d001      	beq.n	5c32 <ready_thread+0x82>
    5c2e:	681b      	ldr	r3, [r3, #0]
    5c30:	e7e7      	b.n	5c02 <ready_thread+0x52>
	node->prev = tail;
    5c32:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5c36:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5c38:	624c      	str	r4, [r1, #36]	; 0x24
}
    5c3a:	e7f1      	b.n	5c20 <ready_thread+0x70>
}
    5c3c:	bd70      	pop	{r4, r5, r6, pc}
    5c3e:	bf00      	nop
    5c40:	200001c0 	.word	0x200001c0
    5c44:	00009123 	.word	0x00009123
    5c48:	00008224 	.word	0x00008224
    5c4c:	00009101 	.word	0x00009101
    5c50:	200009e4 	.word	0x200009e4

00005c54 <z_ready_thread>:
{
    5c54:	b538      	push	{r3, r4, r5, lr}
    5c56:	4604      	mov	r4, r0
	__asm__ volatile(
    5c58:	f04f 0320 	mov.w	r3, #32
    5c5c:	f3ef 8511 	mrs	r5, BASEPRI
    5c60:	f383 8812 	msr	BASEPRI_MAX, r3
    5c64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c68:	4817      	ldr	r0, [pc, #92]	; (5cc8 <z_ready_thread+0x74>)
    5c6a:	f000 ffb3 	bl	6bd4 <z_spin_lock_valid>
    5c6e:	b968      	cbnz	r0, 5c8c <z_ready_thread+0x38>
    5c70:	4a16      	ldr	r2, [pc, #88]	; (5ccc <z_ready_thread+0x78>)
    5c72:	4917      	ldr	r1, [pc, #92]	; (5cd0 <z_ready_thread+0x7c>)
    5c74:	4817      	ldr	r0, [pc, #92]	; (5cd4 <z_ready_thread+0x80>)
    5c76:	2381      	movs	r3, #129	; 0x81
    5c78:	f001 fded 	bl	7856 <printk>
    5c7c:	4912      	ldr	r1, [pc, #72]	; (5cc8 <z_ready_thread+0x74>)
    5c7e:	4816      	ldr	r0, [pc, #88]	; (5cd8 <z_ready_thread+0x84>)
    5c80:	f001 fde9 	bl	7856 <printk>
    5c84:	4811      	ldr	r0, [pc, #68]	; (5ccc <z_ready_thread+0x78>)
    5c86:	2181      	movs	r1, #129	; 0x81
    5c88:	f001 fd11 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    5c8c:	480e      	ldr	r0, [pc, #56]	; (5cc8 <z_ready_thread+0x74>)
    5c8e:	f000 ffbf 	bl	6c10 <z_spin_lock_set_owner>
			ready_thread(thread);
    5c92:	4620      	mov	r0, r4
    5c94:	f7ff ff8c 	bl	5bb0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c98:	480b      	ldr	r0, [pc, #44]	; (5cc8 <z_ready_thread+0x74>)
    5c9a:	f000 ffa9 	bl	6bf0 <z_spin_unlock_valid>
    5c9e:	b968      	cbnz	r0, 5cbc <z_ready_thread+0x68>
    5ca0:	4a0a      	ldr	r2, [pc, #40]	; (5ccc <z_ready_thread+0x78>)
    5ca2:	490e      	ldr	r1, [pc, #56]	; (5cdc <z_ready_thread+0x88>)
    5ca4:	480b      	ldr	r0, [pc, #44]	; (5cd4 <z_ready_thread+0x80>)
    5ca6:	23ac      	movs	r3, #172	; 0xac
    5ca8:	f001 fdd5 	bl	7856 <printk>
    5cac:	4906      	ldr	r1, [pc, #24]	; (5cc8 <z_ready_thread+0x74>)
    5cae:	480c      	ldr	r0, [pc, #48]	; (5ce0 <z_ready_thread+0x8c>)
    5cb0:	f001 fdd1 	bl	7856 <printk>
    5cb4:	4805      	ldr	r0, [pc, #20]	; (5ccc <z_ready_thread+0x78>)
    5cb6:	21ac      	movs	r1, #172	; 0xac
    5cb8:	f001 fcf9 	bl	76ae <assert_post_action>
	__asm__ volatile(
    5cbc:	f385 8811 	msr	BASEPRI, r5
    5cc0:	f3bf 8f6f 	isb	sy
}
    5cc4:	bd38      	pop	{r3, r4, r5, pc}
    5cc6:	bf00      	nop
    5cc8:	20000a14 	.word	0x20000a14
    5ccc:	0000888c 	.word	0x0000888c
    5cd0:	000088de 	.word	0x000088de
    5cd4:	00008224 	.word	0x00008224
    5cd8:	000088f3 	.word	0x000088f3
    5cdc:	000088b2 	.word	0x000088b2
    5ce0:	000088c9 	.word	0x000088c9

00005ce4 <z_sched_start>:
{
    5ce4:	b538      	push	{r3, r4, r5, lr}
    5ce6:	4604      	mov	r4, r0
	__asm__ volatile(
    5ce8:	f04f 0320 	mov.w	r3, #32
    5cec:	f3ef 8511 	mrs	r5, BASEPRI
    5cf0:	f383 8812 	msr	BASEPRI_MAX, r3
    5cf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5cf8:	481d      	ldr	r0, [pc, #116]	; (5d70 <z_sched_start+0x8c>)
    5cfa:	f000 ff6b 	bl	6bd4 <z_spin_lock_valid>
    5cfe:	b968      	cbnz	r0, 5d1c <z_sched_start+0x38>
    5d00:	4a1c      	ldr	r2, [pc, #112]	; (5d74 <z_sched_start+0x90>)
    5d02:	491d      	ldr	r1, [pc, #116]	; (5d78 <z_sched_start+0x94>)
    5d04:	481d      	ldr	r0, [pc, #116]	; (5d7c <z_sched_start+0x98>)
    5d06:	2381      	movs	r3, #129	; 0x81
    5d08:	f001 fda5 	bl	7856 <printk>
    5d0c:	4918      	ldr	r1, [pc, #96]	; (5d70 <z_sched_start+0x8c>)
    5d0e:	481c      	ldr	r0, [pc, #112]	; (5d80 <z_sched_start+0x9c>)
    5d10:	f001 fda1 	bl	7856 <printk>
    5d14:	4817      	ldr	r0, [pc, #92]	; (5d74 <z_sched_start+0x90>)
    5d16:	2181      	movs	r1, #129	; 0x81
    5d18:	f001 fcc9 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    5d1c:	4814      	ldr	r0, [pc, #80]	; (5d70 <z_sched_start+0x8c>)
    5d1e:	f000 ff77 	bl	6c10 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    5d22:	7b63      	ldrb	r3, [r4, #13]
    5d24:	075a      	lsls	r2, r3, #29
    5d26:	d416      	bmi.n	5d56 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d28:	4811      	ldr	r0, [pc, #68]	; (5d70 <z_sched_start+0x8c>)
    5d2a:	f000 ff61 	bl	6bf0 <z_spin_unlock_valid>
    5d2e:	b968      	cbnz	r0, 5d4c <z_sched_start+0x68>
    5d30:	4a10      	ldr	r2, [pc, #64]	; (5d74 <z_sched_start+0x90>)
    5d32:	4914      	ldr	r1, [pc, #80]	; (5d84 <z_sched_start+0xa0>)
    5d34:	4811      	ldr	r0, [pc, #68]	; (5d7c <z_sched_start+0x98>)
    5d36:	23ac      	movs	r3, #172	; 0xac
    5d38:	f001 fd8d 	bl	7856 <printk>
    5d3c:	490c      	ldr	r1, [pc, #48]	; (5d70 <z_sched_start+0x8c>)
    5d3e:	4812      	ldr	r0, [pc, #72]	; (5d88 <z_sched_start+0xa4>)
    5d40:	f001 fd89 	bl	7856 <printk>
    5d44:	480b      	ldr	r0, [pc, #44]	; (5d74 <z_sched_start+0x90>)
    5d46:	21ac      	movs	r1, #172	; 0xac
    5d48:	f001 fcb1 	bl	76ae <assert_post_action>
	__asm__ volatile(
    5d4c:	f385 8811 	msr	BASEPRI, r5
    5d50:	f3bf 8f6f 	isb	sy
}
    5d54:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5d56:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    5d5a:	4620      	mov	r0, r4
    5d5c:	7363      	strb	r3, [r4, #13]
    5d5e:	f7ff ff27 	bl	5bb0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5d62:	4629      	mov	r1, r5
    5d64:	4802      	ldr	r0, [pc, #8]	; (5d70 <z_sched_start+0x8c>)
}
    5d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    5d6a:	f7ff bd1f 	b.w	57ac <z_reschedule>
    5d6e:	bf00      	nop
    5d70:	20000a14 	.word	0x20000a14
    5d74:	0000888c 	.word	0x0000888c
    5d78:	000088de 	.word	0x000088de
    5d7c:	00008224 	.word	0x00008224
    5d80:	000088f3 	.word	0x000088f3
    5d84:	000088b2 	.word	0x000088b2
    5d88:	000088c9 	.word	0x000088c9

00005d8c <z_thread_timeout>:
{
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	4604      	mov	r4, r0
	__asm__ volatile(
    5d90:	f04f 0320 	mov.w	r3, #32
    5d94:	f3ef 8611 	mrs	r6, BASEPRI
    5d98:	f383 8812 	msr	BASEPRI_MAX, r3
    5d9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5da0:	4820      	ldr	r0, [pc, #128]	; (5e24 <z_thread_timeout+0x98>)
    5da2:	f000 ff17 	bl	6bd4 <z_spin_lock_valid>
    5da6:	b968      	cbnz	r0, 5dc4 <z_thread_timeout+0x38>
    5da8:	4a1f      	ldr	r2, [pc, #124]	; (5e28 <z_thread_timeout+0x9c>)
    5daa:	4920      	ldr	r1, [pc, #128]	; (5e2c <z_thread_timeout+0xa0>)
    5dac:	4820      	ldr	r0, [pc, #128]	; (5e30 <z_thread_timeout+0xa4>)
    5dae:	2381      	movs	r3, #129	; 0x81
    5db0:	f001 fd51 	bl	7856 <printk>
    5db4:	491b      	ldr	r1, [pc, #108]	; (5e24 <z_thread_timeout+0x98>)
    5db6:	481f      	ldr	r0, [pc, #124]	; (5e34 <z_thread_timeout+0xa8>)
    5db8:	f001 fd4d 	bl	7856 <printk>
    5dbc:	481a      	ldr	r0, [pc, #104]	; (5e28 <z_thread_timeout+0x9c>)
    5dbe:	2181      	movs	r1, #129	; 0x81
    5dc0:	f001 fc75 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    5dc4:	4817      	ldr	r0, [pc, #92]	; (5e24 <z_thread_timeout+0x98>)
    5dc6:	f000 ff23 	bl	6c10 <z_spin_lock_set_owner>
		if (!killed) {
    5dca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5dce:	f013 0f28 	tst.w	r3, #40	; 0x28
    5dd2:	d110      	bne.n	5df6 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    5dd4:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5dd8:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    5ddc:	b113      	cbz	r3, 5de4 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    5dde:	4628      	mov	r0, r5
    5de0:	f7ff fdbe 	bl	5960 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5de4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5de8:	f023 0314 	bic.w	r3, r3, #20
    5dec:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    5df0:	4628      	mov	r0, r5
    5df2:	f7ff fedd 	bl	5bb0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5df6:	480b      	ldr	r0, [pc, #44]	; (5e24 <z_thread_timeout+0x98>)
    5df8:	f000 fefa 	bl	6bf0 <z_spin_unlock_valid>
    5dfc:	b968      	cbnz	r0, 5e1a <z_thread_timeout+0x8e>
    5dfe:	4a0a      	ldr	r2, [pc, #40]	; (5e28 <z_thread_timeout+0x9c>)
    5e00:	490d      	ldr	r1, [pc, #52]	; (5e38 <z_thread_timeout+0xac>)
    5e02:	480b      	ldr	r0, [pc, #44]	; (5e30 <z_thread_timeout+0xa4>)
    5e04:	23ac      	movs	r3, #172	; 0xac
    5e06:	f001 fd26 	bl	7856 <printk>
    5e0a:	4906      	ldr	r1, [pc, #24]	; (5e24 <z_thread_timeout+0x98>)
    5e0c:	480b      	ldr	r0, [pc, #44]	; (5e3c <z_thread_timeout+0xb0>)
    5e0e:	f001 fd22 	bl	7856 <printk>
    5e12:	4805      	ldr	r0, [pc, #20]	; (5e28 <z_thread_timeout+0x9c>)
    5e14:	21ac      	movs	r1, #172	; 0xac
    5e16:	f001 fc4a 	bl	76ae <assert_post_action>
	__asm__ volatile(
    5e1a:	f386 8811 	msr	BASEPRI, r6
    5e1e:	f3bf 8f6f 	isb	sy
}
    5e22:	bd70      	pop	{r4, r5, r6, pc}
    5e24:	20000a14 	.word	0x20000a14
    5e28:	0000888c 	.word	0x0000888c
    5e2c:	000088de 	.word	0x000088de
    5e30:	00008224 	.word	0x00008224
    5e34:	000088f3 	.word	0x000088f3
    5e38:	000088b2 	.word	0x000088b2
    5e3c:	000088c9 	.word	0x000088c9

00005e40 <unready_thread>:
{
    5e40:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    5e42:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5e46:	7b43      	ldrb	r3, [r0, #13]
    5e48:	2a00      	cmp	r2, #0
{
    5e4a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5e4c:	da06      	bge.n	5e5c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5e52:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5e54:	4601      	mov	r1, r0
    5e56:	4806      	ldr	r0, [pc, #24]	; (5e70 <unready_thread+0x30>)
    5e58:	f7ff fd60 	bl	591c <z_priq_dumb_remove>
	update_cache(thread == _current);
    5e5c:	4b05      	ldr	r3, [pc, #20]	; (5e74 <unready_thread+0x34>)
    5e5e:	6898      	ldr	r0, [r3, #8]
    5e60:	1b03      	subs	r3, r0, r4
    5e62:	4258      	negs	r0, r3
}
    5e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    5e68:	4158      	adcs	r0, r3
    5e6a:	f7ff bd9b 	b.w	59a4 <update_cache>
    5e6e:	bf00      	nop
    5e70:	20000a04 	.word	0x20000a04
    5e74:	200009e4 	.word	0x200009e4

00005e78 <add_to_waitq_locked>:
{
    5e78:	b538      	push	{r3, r4, r5, lr}
    5e7a:	4604      	mov	r4, r0
    5e7c:	460d      	mov	r5, r1
	unready_thread(thread);
    5e7e:	f7ff ffdf 	bl	5e40 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5e82:	7b63      	ldrb	r3, [r4, #13]
    5e84:	f043 0302 	orr.w	r3, r3, #2
    5e88:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5e8a:	b31d      	cbz	r5, 5ed4 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5e8c:	4b17      	ldr	r3, [pc, #92]	; (5eec <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    5e8e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5e90:	429c      	cmp	r4, r3
    5e92:	d109      	bne.n	5ea8 <add_to_waitq_locked+0x30>
    5e94:	4916      	ldr	r1, [pc, #88]	; (5ef0 <add_to_waitq_locked+0x78>)
    5e96:	4817      	ldr	r0, [pc, #92]	; (5ef4 <add_to_waitq_locked+0x7c>)
    5e98:	4a17      	ldr	r2, [pc, #92]	; (5ef8 <add_to_waitq_locked+0x80>)
    5e9a:	23ba      	movs	r3, #186	; 0xba
    5e9c:	f001 fcdb 	bl	7856 <printk>
    5ea0:	4815      	ldr	r0, [pc, #84]	; (5ef8 <add_to_waitq_locked+0x80>)
    5ea2:	21ba      	movs	r1, #186	; 0xba
    5ea4:	f001 fc03 	bl	76ae <assert_post_action>
	return list->head == list;
    5ea8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5eaa:	429d      	cmp	r5, r3
    5eac:	bf08      	it	eq
    5eae:	2300      	moveq	r3, #0
    5eb0:	2b00      	cmp	r3, #0
    5eb2:	bf38      	it	cc
    5eb4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5eb6:	b19b      	cbz	r3, 5ee0 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    5eb8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5ebc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5ec0:	4291      	cmp	r1, r2
    5ec2:	d008      	beq.n	5ed6 <add_to_waitq_locked+0x5e>
		return b2 - b1;
    5ec4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5ec6:	2a00      	cmp	r2, #0
    5ec8:	dd05      	ble.n	5ed6 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    5eca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5ecc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5ed0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5ed2:	605c      	str	r4, [r3, #4]
}
    5ed4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5ed6:	686a      	ldr	r2, [r5, #4]
    5ed8:	4293      	cmp	r3, r2
    5eda:	d001      	beq.n	5ee0 <add_to_waitq_locked+0x68>
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	e7ea      	b.n	5eb6 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    5ee0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5ee2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5ee6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5ee8:	606c      	str	r4, [r5, #4]
    5eea:	e7f3      	b.n	5ed4 <add_to_waitq_locked+0x5c>
    5eec:	200001c0 	.word	0x200001c0
    5ef0:	00009123 	.word	0x00009123
    5ef4:	00008224 	.word	0x00008224
    5ef8:	00009101 	.word	0x00009101

00005efc <pend>:
{
    5efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f00:	4604      	mov	r4, r0
    5f02:	460d      	mov	r5, r1
    5f04:	4616      	mov	r6, r2
    5f06:	461f      	mov	r7, r3
	__asm__ volatile(
    5f08:	f04f 0320 	mov.w	r3, #32
    5f0c:	f3ef 8811 	mrs	r8, BASEPRI
    5f10:	f383 8812 	msr	BASEPRI_MAX, r3
    5f14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f18:	481f      	ldr	r0, [pc, #124]	; (5f98 <pend+0x9c>)
    5f1a:	f000 fe5b 	bl	6bd4 <z_spin_lock_valid>
    5f1e:	b968      	cbnz	r0, 5f3c <pend+0x40>
    5f20:	4a1e      	ldr	r2, [pc, #120]	; (5f9c <pend+0xa0>)
    5f22:	491f      	ldr	r1, [pc, #124]	; (5fa0 <pend+0xa4>)
    5f24:	481f      	ldr	r0, [pc, #124]	; (5fa4 <pend+0xa8>)
    5f26:	2381      	movs	r3, #129	; 0x81
    5f28:	f001 fc95 	bl	7856 <printk>
    5f2c:	491a      	ldr	r1, [pc, #104]	; (5f98 <pend+0x9c>)
    5f2e:	481e      	ldr	r0, [pc, #120]	; (5fa8 <pend+0xac>)
    5f30:	f001 fc91 	bl	7856 <printk>
    5f34:	4819      	ldr	r0, [pc, #100]	; (5f9c <pend+0xa0>)
    5f36:	2181      	movs	r1, #129	; 0x81
    5f38:	f001 fbb9 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    5f3c:	4816      	ldr	r0, [pc, #88]	; (5f98 <pend+0x9c>)
    5f3e:	f000 fe67 	bl	6c10 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5f42:	4620      	mov	r0, r4
    5f44:	4629      	mov	r1, r5
    5f46:	f7ff ff97 	bl	5e78 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f4a:	4813      	ldr	r0, [pc, #76]	; (5f98 <pend+0x9c>)
    5f4c:	f000 fe50 	bl	6bf0 <z_spin_unlock_valid>
    5f50:	b968      	cbnz	r0, 5f6e <pend+0x72>
    5f52:	4a12      	ldr	r2, [pc, #72]	; (5f9c <pend+0xa0>)
    5f54:	4915      	ldr	r1, [pc, #84]	; (5fac <pend+0xb0>)
    5f56:	4813      	ldr	r0, [pc, #76]	; (5fa4 <pend+0xa8>)
    5f58:	23ac      	movs	r3, #172	; 0xac
    5f5a:	f001 fc7c 	bl	7856 <printk>
    5f5e:	490e      	ldr	r1, [pc, #56]	; (5f98 <pend+0x9c>)
    5f60:	4813      	ldr	r0, [pc, #76]	; (5fb0 <pend+0xb4>)
    5f62:	f001 fc78 	bl	7856 <printk>
    5f66:	480d      	ldr	r0, [pc, #52]	; (5f9c <pend+0xa0>)
    5f68:	21ac      	movs	r1, #172	; 0xac
    5f6a:	f001 fba0 	bl	76ae <assert_post_action>
	__asm__ volatile(
    5f6e:	f388 8811 	msr	BASEPRI, r8
    5f72:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f76:	1c7b      	adds	r3, r7, #1
    5f78:	bf08      	it	eq
    5f7a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    5f7e:	d008      	beq.n	5f92 <pend+0x96>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5f80:	4632      	mov	r2, r6
    5f82:	463b      	mov	r3, r7
    5f84:	f104 0018 	add.w	r0, r4, #24
    5f88:	490a      	ldr	r1, [pc, #40]	; (5fb4 <pend+0xb8>)
}
    5f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f8e:	f000 be97 	b.w	6cc0 <z_add_timeout>
    5f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f96:	bf00      	nop
    5f98:	20000a14 	.word	0x20000a14
    5f9c:	0000888c 	.word	0x0000888c
    5fa0:	000088de 	.word	0x000088de
    5fa4:	00008224 	.word	0x00008224
    5fa8:	000088f3 	.word	0x000088f3
    5fac:	000088b2 	.word	0x000088b2
    5fb0:	000088c9 	.word	0x000088c9
    5fb4:	00005d8d 	.word	0x00005d8d

00005fb8 <z_pend_curr>:
{
    5fb8:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    5fba:	4b11      	ldr	r3, [pc, #68]	; (6000 <z_pend_curr+0x48>)
{
    5fbc:	4604      	mov	r4, r0
	pending_current = _current;
    5fbe:	6898      	ldr	r0, [r3, #8]
    5fc0:	4b10      	ldr	r3, [pc, #64]	; (6004 <z_pend_curr+0x4c>)
{
    5fc2:	460d      	mov	r5, r1
	pending_current = _current;
    5fc4:	6018      	str	r0, [r3, #0]
{
    5fc6:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5fc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5fcc:	f7ff ff96 	bl	5efc <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5fd0:	4620      	mov	r0, r4
    5fd2:	f000 fe0d 	bl	6bf0 <z_spin_unlock_valid>
    5fd6:	b968      	cbnz	r0, 5ff4 <z_pend_curr+0x3c>
    5fd8:	4a0b      	ldr	r2, [pc, #44]	; (6008 <z_pend_curr+0x50>)
    5fda:	490c      	ldr	r1, [pc, #48]	; (600c <z_pend_curr+0x54>)
    5fdc:	480c      	ldr	r0, [pc, #48]	; (6010 <z_pend_curr+0x58>)
    5fde:	23c3      	movs	r3, #195	; 0xc3
    5fe0:	f001 fc39 	bl	7856 <printk>
    5fe4:	480b      	ldr	r0, [pc, #44]	; (6014 <z_pend_curr+0x5c>)
    5fe6:	4621      	mov	r1, r4
    5fe8:	f001 fc35 	bl	7856 <printk>
    5fec:	4806      	ldr	r0, [pc, #24]	; (6008 <z_pend_curr+0x50>)
    5fee:	21c3      	movs	r1, #195	; 0xc3
    5ff0:	f001 fb5d 	bl	76ae <assert_post_action>
    5ff4:	4628      	mov	r0, r5
}
    5ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5ffa:	f7fc bbb9 	b.w	2770 <arch_swap>
    5ffe:	bf00      	nop
    6000:	200009e4 	.word	0x200009e4
    6004:	20000a10 	.word	0x20000a10
    6008:	0000888c 	.word	0x0000888c
    600c:	000088b2 	.word	0x000088b2
    6010:	00008224 	.word	0x00008224
    6014:	000088c9 	.word	0x000088c9

00006018 <z_set_prio>:
{
    6018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    601a:	4604      	mov	r4, r0
    601c:	460e      	mov	r6, r1
	__asm__ volatile(
    601e:	f04f 0320 	mov.w	r3, #32
    6022:	f3ef 8711 	mrs	r7, BASEPRI
    6026:	f383 8812 	msr	BASEPRI_MAX, r3
    602a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    602e:	483c      	ldr	r0, [pc, #240]	; (6120 <z_set_prio+0x108>)
    6030:	f000 fdd0 	bl	6bd4 <z_spin_lock_valid>
    6034:	b968      	cbnz	r0, 6052 <z_set_prio+0x3a>
    6036:	4a3b      	ldr	r2, [pc, #236]	; (6124 <z_set_prio+0x10c>)
    6038:	493b      	ldr	r1, [pc, #236]	; (6128 <z_set_prio+0x110>)
    603a:	483c      	ldr	r0, [pc, #240]	; (612c <z_set_prio+0x114>)
    603c:	2381      	movs	r3, #129	; 0x81
    603e:	f001 fc0a 	bl	7856 <printk>
    6042:	4937      	ldr	r1, [pc, #220]	; (6120 <z_set_prio+0x108>)
    6044:	483a      	ldr	r0, [pc, #232]	; (6130 <z_set_prio+0x118>)
    6046:	f001 fc06 	bl	7856 <printk>
    604a:	4836      	ldr	r0, [pc, #216]	; (6124 <z_set_prio+0x10c>)
    604c:	2181      	movs	r1, #129	; 0x81
    604e:	f001 fb2e 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    6052:	4833      	ldr	r0, [pc, #204]	; (6120 <z_set_prio+0x108>)
    6054:	f000 fddc 	bl	6c10 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6058:	7b63      	ldrb	r3, [r4, #13]
    605a:	06da      	lsls	r2, r3, #27
    605c:	b276      	sxtb	r6, r6
    605e:	d15c      	bne.n	611a <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    6060:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    6062:	2d00      	cmp	r5, #0
    6064:	d159      	bne.n	611a <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    606a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    606c:	4831      	ldr	r0, [pc, #196]	; (6134 <z_set_prio+0x11c>)
    606e:	4621      	mov	r1, r4
    6070:	f7ff fc54 	bl	591c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6074:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6076:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6078:	f063 037f 	orn	r3, r3, #127	; 0x7f
    607c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    607e:	4b2e      	ldr	r3, [pc, #184]	; (6138 <z_set_prio+0x120>)
    6080:	429c      	cmp	r4, r3
    6082:	d109      	bne.n	6098 <z_set_prio+0x80>
    6084:	492d      	ldr	r1, [pc, #180]	; (613c <z_set_prio+0x124>)
    6086:	4829      	ldr	r0, [pc, #164]	; (612c <z_set_prio+0x114>)
    6088:	4a2d      	ldr	r2, [pc, #180]	; (6140 <z_set_prio+0x128>)
    608a:	23ba      	movs	r3, #186	; 0xba
    608c:	f001 fbe3 	bl	7856 <printk>
    6090:	482b      	ldr	r0, [pc, #172]	; (6140 <z_set_prio+0x128>)
    6092:	21ba      	movs	r1, #186	; 0xba
    6094:	f001 fb0b 	bl	76ae <assert_post_action>
	return list->head == list;
    6098:	492a      	ldr	r1, [pc, #168]	; (6144 <z_set_prio+0x12c>)
    609a:	460b      	mov	r3, r1
    609c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60a0:	4298      	cmp	r0, r3
    60a2:	bf18      	it	ne
    60a4:	4605      	movne	r5, r0
    60a6:	2d00      	cmp	r5, #0
    60a8:	461a      	mov	r2, r3
    60aa:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    60ac:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    60ae:	bf38      	it	cc
    60b0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    60b2:	b36b      	cbz	r3, 6110 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    60b4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    60b8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    60bc:	4286      	cmp	r6, r0
    60be:	d023      	beq.n	6108 <z_set_prio+0xf0>
		return b2 - b1;
    60c0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    60c2:	2800      	cmp	r0, #0
    60c4:	dd20      	ble.n	6108 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    60c6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    60c8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    60cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    60ce:	605c      	str	r4, [r3, #4]
			update_cache(1);
    60d0:	2001      	movs	r0, #1
    60d2:	f7ff fc67 	bl	59a4 <update_cache>
    60d6:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    60d8:	4811      	ldr	r0, [pc, #68]	; (6120 <z_set_prio+0x108>)
    60da:	f000 fd89 	bl	6bf0 <z_spin_unlock_valid>
    60de:	b968      	cbnz	r0, 60fc <z_set_prio+0xe4>
    60e0:	4a10      	ldr	r2, [pc, #64]	; (6124 <z_set_prio+0x10c>)
    60e2:	4919      	ldr	r1, [pc, #100]	; (6148 <z_set_prio+0x130>)
    60e4:	4811      	ldr	r0, [pc, #68]	; (612c <z_set_prio+0x114>)
    60e6:	23ac      	movs	r3, #172	; 0xac
    60e8:	f001 fbb5 	bl	7856 <printk>
    60ec:	490c      	ldr	r1, [pc, #48]	; (6120 <z_set_prio+0x108>)
    60ee:	4817      	ldr	r0, [pc, #92]	; (614c <z_set_prio+0x134>)
    60f0:	f001 fbb1 	bl	7856 <printk>
    60f4:	480b      	ldr	r0, [pc, #44]	; (6124 <z_set_prio+0x10c>)
    60f6:	21ac      	movs	r1, #172	; 0xac
    60f8:	f001 fad9 	bl	76ae <assert_post_action>
	__asm__ volatile(
    60fc:	f387 8811 	msr	BASEPRI, r7
    6100:	f3bf 8f6f 	isb	sy
}
    6104:	4620      	mov	r0, r4
    6106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6108:	42ab      	cmp	r3, r5
    610a:	d001      	beq.n	6110 <z_set_prio+0xf8>
    610c:	681b      	ldr	r3, [r3, #0]
    610e:	e7d0      	b.n	60b2 <z_set_prio+0x9a>
	node->prev = tail;
    6110:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    6114:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6116:	624c      	str	r4, [r1, #36]	; 0x24
}
    6118:	e7da      	b.n	60d0 <z_set_prio+0xb8>
			thread->base.prio = prio;
    611a:	73a6      	strb	r6, [r4, #14]
    611c:	2400      	movs	r4, #0
    611e:	e7db      	b.n	60d8 <z_set_prio+0xc0>
    6120:	20000a14 	.word	0x20000a14
    6124:	0000888c 	.word	0x0000888c
    6128:	000088de 	.word	0x000088de
    612c:	00008224 	.word	0x00008224
    6130:	000088f3 	.word	0x000088f3
    6134:	20000a04 	.word	0x20000a04
    6138:	200001c0 	.word	0x200001c0
    613c:	00009123 	.word	0x00009123
    6140:	00009101 	.word	0x00009101
    6144:	200009e4 	.word	0x200009e4
    6148:	000088b2 	.word	0x000088b2
    614c:	000088c9 	.word	0x000088c9

00006150 <z_impl_k_thread_suspend>:
{
    6150:	b570      	push	{r4, r5, r6, lr}
    6152:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6154:	3018      	adds	r0, #24
    6156:	f000 fe87 	bl	6e68 <z_abort_timeout>
	__asm__ volatile(
    615a:	f04f 0320 	mov.w	r3, #32
    615e:	f3ef 8611 	mrs	r6, BASEPRI
    6162:	f383 8812 	msr	BASEPRI_MAX, r3
    6166:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    616a:	4825      	ldr	r0, [pc, #148]	; (6200 <z_impl_k_thread_suspend+0xb0>)
    616c:	f000 fd32 	bl	6bd4 <z_spin_lock_valid>
    6170:	b968      	cbnz	r0, 618e <z_impl_k_thread_suspend+0x3e>
    6172:	4a24      	ldr	r2, [pc, #144]	; (6204 <z_impl_k_thread_suspend+0xb4>)
    6174:	4924      	ldr	r1, [pc, #144]	; (6208 <z_impl_k_thread_suspend+0xb8>)
    6176:	4825      	ldr	r0, [pc, #148]	; (620c <z_impl_k_thread_suspend+0xbc>)
    6178:	2381      	movs	r3, #129	; 0x81
    617a:	f001 fb6c 	bl	7856 <printk>
    617e:	4920      	ldr	r1, [pc, #128]	; (6200 <z_impl_k_thread_suspend+0xb0>)
    6180:	4823      	ldr	r0, [pc, #140]	; (6210 <z_impl_k_thread_suspend+0xc0>)
    6182:	f001 fb68 	bl	7856 <printk>
    6186:	481f      	ldr	r0, [pc, #124]	; (6204 <z_impl_k_thread_suspend+0xb4>)
    6188:	2181      	movs	r1, #129	; 0x81
    618a:	f001 fa90 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    618e:	481c      	ldr	r0, [pc, #112]	; (6200 <z_impl_k_thread_suspend+0xb0>)
    6190:	f000 fd3e 	bl	6c10 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    6194:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6198:	7b63      	ldrb	r3, [r4, #13]
    619a:	2a00      	cmp	r2, #0
    619c:	da06      	bge.n	61ac <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    619e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    61a2:	481c      	ldr	r0, [pc, #112]	; (6214 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    61a4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    61a6:	4621      	mov	r1, r4
    61a8:	f7ff fbb8 	bl	591c <z_priq_dumb_remove>
		update_cache(thread == _current);
    61ac:	4d1a      	ldr	r5, [pc, #104]	; (6218 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    61ae:	7b63      	ldrb	r3, [r4, #13]
    61b0:	68a8      	ldr	r0, [r5, #8]
    61b2:	f043 0310 	orr.w	r3, r3, #16
    61b6:	7363      	strb	r3, [r4, #13]
    61b8:	1b03      	subs	r3, r0, r4
    61ba:	4258      	negs	r0, r3
    61bc:	4158      	adcs	r0, r3
    61be:	f7ff fbf1 	bl	59a4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61c2:	480f      	ldr	r0, [pc, #60]	; (6200 <z_impl_k_thread_suspend+0xb0>)
    61c4:	f000 fd14 	bl	6bf0 <z_spin_unlock_valid>
    61c8:	b968      	cbnz	r0, 61e6 <z_impl_k_thread_suspend+0x96>
    61ca:	4a0e      	ldr	r2, [pc, #56]	; (6204 <z_impl_k_thread_suspend+0xb4>)
    61cc:	4913      	ldr	r1, [pc, #76]	; (621c <z_impl_k_thread_suspend+0xcc>)
    61ce:	480f      	ldr	r0, [pc, #60]	; (620c <z_impl_k_thread_suspend+0xbc>)
    61d0:	23ac      	movs	r3, #172	; 0xac
    61d2:	f001 fb40 	bl	7856 <printk>
    61d6:	490a      	ldr	r1, [pc, #40]	; (6200 <z_impl_k_thread_suspend+0xb0>)
    61d8:	4811      	ldr	r0, [pc, #68]	; (6220 <z_impl_k_thread_suspend+0xd0>)
    61da:	f001 fb3c 	bl	7856 <printk>
    61de:	4809      	ldr	r0, [pc, #36]	; (6204 <z_impl_k_thread_suspend+0xb4>)
    61e0:	21ac      	movs	r1, #172	; 0xac
    61e2:	f001 fa64 	bl	76ae <assert_post_action>
	__asm__ volatile(
    61e6:	f386 8811 	msr	BASEPRI, r6
    61ea:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    61ee:	68ab      	ldr	r3, [r5, #8]
    61f0:	42a3      	cmp	r3, r4
    61f2:	d103      	bne.n	61fc <z_impl_k_thread_suspend+0xac>
}
    61f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    61f8:	f001 bd8e 	b.w	7d18 <z_reschedule_unlocked>
}
    61fc:	bd70      	pop	{r4, r5, r6, pc}
    61fe:	bf00      	nop
    6200:	20000a14 	.word	0x20000a14
    6204:	0000888c 	.word	0x0000888c
    6208:	000088de 	.word	0x000088de
    620c:	00008224 	.word	0x00008224
    6210:	000088f3 	.word	0x000088f3
    6214:	20000a04 	.word	0x20000a04
    6218:	200009e4 	.word	0x200009e4
    621c:	000088b2 	.word	0x000088b2
    6220:	000088c9 	.word	0x000088c9

00006224 <k_sched_unlock>:
{
    6224:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6226:	f04f 0320 	mov.w	r3, #32
    622a:	f3ef 8511 	mrs	r5, BASEPRI
    622e:	f383 8812 	msr	BASEPRI_MAX, r3
    6232:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6236:	482d      	ldr	r0, [pc, #180]	; (62ec <k_sched_unlock+0xc8>)
    6238:	f000 fccc 	bl	6bd4 <z_spin_lock_valid>
    623c:	b968      	cbnz	r0, 625a <k_sched_unlock+0x36>
    623e:	4a2c      	ldr	r2, [pc, #176]	; (62f0 <k_sched_unlock+0xcc>)
    6240:	492c      	ldr	r1, [pc, #176]	; (62f4 <k_sched_unlock+0xd0>)
    6242:	482d      	ldr	r0, [pc, #180]	; (62f8 <k_sched_unlock+0xd4>)
    6244:	2381      	movs	r3, #129	; 0x81
    6246:	f001 fb06 	bl	7856 <printk>
    624a:	4928      	ldr	r1, [pc, #160]	; (62ec <k_sched_unlock+0xc8>)
    624c:	482b      	ldr	r0, [pc, #172]	; (62fc <k_sched_unlock+0xd8>)
    624e:	f001 fb02 	bl	7856 <printk>
    6252:	4827      	ldr	r0, [pc, #156]	; (62f0 <k_sched_unlock+0xcc>)
    6254:	2181      	movs	r1, #129	; 0x81
    6256:	f001 fa2a 	bl	76ae <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    625a:	4c29      	ldr	r4, [pc, #164]	; (6300 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    625c:	4823      	ldr	r0, [pc, #140]	; (62ec <k_sched_unlock+0xc8>)
    625e:	f000 fcd7 	bl	6c10 <z_spin_lock_set_owner>
    6262:	68a2      	ldr	r2, [r4, #8]
    6264:	7bd2      	ldrb	r2, [r2, #15]
    6266:	b972      	cbnz	r2, 6286 <k_sched_unlock+0x62>
    6268:	4926      	ldr	r1, [pc, #152]	; (6304 <k_sched_unlock+0xe0>)
    626a:	4a27      	ldr	r2, [pc, #156]	; (6308 <k_sched_unlock+0xe4>)
    626c:	4822      	ldr	r0, [pc, #136]	; (62f8 <k_sched_unlock+0xd4>)
    626e:	f240 3385 	movw	r3, #901	; 0x385
    6272:	f001 faf0 	bl	7856 <printk>
    6276:	4825      	ldr	r0, [pc, #148]	; (630c <k_sched_unlock+0xe8>)
    6278:	f001 faed 	bl	7856 <printk>
    627c:	4822      	ldr	r0, [pc, #136]	; (6308 <k_sched_unlock+0xe4>)
    627e:	f240 3185 	movw	r1, #901	; 0x385
    6282:	f001 fa14 	bl	76ae <assert_post_action>
    6286:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    628a:	b173      	cbz	r3, 62aa <k_sched_unlock+0x86>
    628c:	4920      	ldr	r1, [pc, #128]	; (6310 <k_sched_unlock+0xec>)
    628e:	4a1e      	ldr	r2, [pc, #120]	; (6308 <k_sched_unlock+0xe4>)
    6290:	4819      	ldr	r0, [pc, #100]	; (62f8 <k_sched_unlock+0xd4>)
    6292:	f240 3386 	movw	r3, #902	; 0x386
    6296:	f001 fade 	bl	7856 <printk>
    629a:	481c      	ldr	r0, [pc, #112]	; (630c <k_sched_unlock+0xe8>)
    629c:	f001 fadb 	bl	7856 <printk>
    62a0:	4819      	ldr	r0, [pc, #100]	; (6308 <k_sched_unlock+0xe4>)
    62a2:	f240 3186 	movw	r1, #902	; 0x386
    62a6:	f001 fa02 	bl	76ae <assert_post_action>
		++_current->base.sched_locked;
    62aa:	68a2      	ldr	r2, [r4, #8]
    62ac:	7bd3      	ldrb	r3, [r2, #15]
    62ae:	3301      	adds	r3, #1
		update_cache(0);
    62b0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    62b2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    62b4:	f7ff fb76 	bl	59a4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62b8:	480c      	ldr	r0, [pc, #48]	; (62ec <k_sched_unlock+0xc8>)
    62ba:	f000 fc99 	bl	6bf0 <z_spin_unlock_valid>
    62be:	b968      	cbnz	r0, 62dc <k_sched_unlock+0xb8>
    62c0:	4a0b      	ldr	r2, [pc, #44]	; (62f0 <k_sched_unlock+0xcc>)
    62c2:	4914      	ldr	r1, [pc, #80]	; (6314 <k_sched_unlock+0xf0>)
    62c4:	480c      	ldr	r0, [pc, #48]	; (62f8 <k_sched_unlock+0xd4>)
    62c6:	23ac      	movs	r3, #172	; 0xac
    62c8:	f001 fac5 	bl	7856 <printk>
    62cc:	4907      	ldr	r1, [pc, #28]	; (62ec <k_sched_unlock+0xc8>)
    62ce:	4812      	ldr	r0, [pc, #72]	; (6318 <k_sched_unlock+0xf4>)
    62d0:	f001 fac1 	bl	7856 <printk>
    62d4:	4806      	ldr	r0, [pc, #24]	; (62f0 <k_sched_unlock+0xcc>)
    62d6:	21ac      	movs	r1, #172	; 0xac
    62d8:	f001 f9e9 	bl	76ae <assert_post_action>
	__asm__ volatile(
    62dc:	f385 8811 	msr	BASEPRI, r5
    62e0:	f3bf 8f6f 	isb	sy
}
    62e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    62e8:	f001 bd16 	b.w	7d18 <z_reschedule_unlocked>
    62ec:	20000a14 	.word	0x20000a14
    62f0:	0000888c 	.word	0x0000888c
    62f4:	000088de 	.word	0x000088de
    62f8:	00008224 	.word	0x00008224
    62fc:	000088f3 	.word	0x000088f3
    6300:	200009e4 	.word	0x200009e4
    6304:	00009182 	.word	0x00009182
    6308:	00009101 	.word	0x00009101
    630c:	000090cd 	.word	0x000090cd
    6310:	00009054 	.word	0x00009054
    6314:	000088b2 	.word	0x000088b2
    6318:	000088c9 	.word	0x000088c9

0000631c <z_unpend_first_thread>:
{
    631c:	b538      	push	{r3, r4, r5, lr}
    631e:	4604      	mov	r4, r0
	__asm__ volatile(
    6320:	f04f 0320 	mov.w	r3, #32
    6324:	f3ef 8511 	mrs	r5, BASEPRI
    6328:	f383 8812 	msr	BASEPRI_MAX, r3
    632c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6330:	481b      	ldr	r0, [pc, #108]	; (63a0 <z_unpend_first_thread+0x84>)
    6332:	f000 fc4f 	bl	6bd4 <z_spin_lock_valid>
    6336:	b968      	cbnz	r0, 6354 <z_unpend_first_thread+0x38>
    6338:	4a1a      	ldr	r2, [pc, #104]	; (63a4 <z_unpend_first_thread+0x88>)
    633a:	491b      	ldr	r1, [pc, #108]	; (63a8 <z_unpend_first_thread+0x8c>)
    633c:	481b      	ldr	r0, [pc, #108]	; (63ac <z_unpend_first_thread+0x90>)
    633e:	2381      	movs	r3, #129	; 0x81
    6340:	f001 fa89 	bl	7856 <printk>
    6344:	4916      	ldr	r1, [pc, #88]	; (63a0 <z_unpend_first_thread+0x84>)
    6346:	481a      	ldr	r0, [pc, #104]	; (63b0 <z_unpend_first_thread+0x94>)
    6348:	f001 fa85 	bl	7856 <printk>
    634c:	4815      	ldr	r0, [pc, #84]	; (63a4 <z_unpend_first_thread+0x88>)
    634e:	2181      	movs	r1, #129	; 0x81
    6350:	f001 f9ad 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    6354:	4812      	ldr	r0, [pc, #72]	; (63a0 <z_unpend_first_thread+0x84>)
    6356:	f000 fc5b 	bl	6c10 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    635a:	4620      	mov	r0, r4
    635c:	f001 fce6 	bl	7d2c <z_priq_dumb_best>
		if (thread != NULL) {
    6360:	4604      	mov	r4, r0
    6362:	b128      	cbz	r0, 6370 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    6364:	f7ff fafc 	bl	5960 <unpend_thread_no_timeout>
    6368:	f104 0018 	add.w	r0, r4, #24
    636c:	f000 fd7c 	bl	6e68 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6370:	480b      	ldr	r0, [pc, #44]	; (63a0 <z_unpend_first_thread+0x84>)
    6372:	f000 fc3d 	bl	6bf0 <z_spin_unlock_valid>
    6376:	b968      	cbnz	r0, 6394 <z_unpend_first_thread+0x78>
    6378:	4a0a      	ldr	r2, [pc, #40]	; (63a4 <z_unpend_first_thread+0x88>)
    637a:	490e      	ldr	r1, [pc, #56]	; (63b4 <z_unpend_first_thread+0x98>)
    637c:	480b      	ldr	r0, [pc, #44]	; (63ac <z_unpend_first_thread+0x90>)
    637e:	23ac      	movs	r3, #172	; 0xac
    6380:	f001 fa69 	bl	7856 <printk>
    6384:	4906      	ldr	r1, [pc, #24]	; (63a0 <z_unpend_first_thread+0x84>)
    6386:	480c      	ldr	r0, [pc, #48]	; (63b8 <z_unpend_first_thread+0x9c>)
    6388:	f001 fa65 	bl	7856 <printk>
    638c:	4805      	ldr	r0, [pc, #20]	; (63a4 <z_unpend_first_thread+0x88>)
    638e:	21ac      	movs	r1, #172	; 0xac
    6390:	f001 f98d 	bl	76ae <assert_post_action>
	__asm__ volatile(
    6394:	f385 8811 	msr	BASEPRI, r5
    6398:	f3bf 8f6f 	isb	sy
}
    639c:	4620      	mov	r0, r4
    639e:	bd38      	pop	{r3, r4, r5, pc}
    63a0:	20000a14 	.word	0x20000a14
    63a4:	0000888c 	.word	0x0000888c
    63a8:	000088de 	.word	0x000088de
    63ac:	00008224 	.word	0x00008224
    63b0:	000088f3 	.word	0x000088f3
    63b4:	000088b2 	.word	0x000088b2
    63b8:	000088c9 	.word	0x000088c9

000063bc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    63bc:	4b04      	ldr	r3, [pc, #16]	; (63d0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    63be:	2100      	movs	r1, #0
    63c0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    63c4:	e9c3 2208 	strd	r2, r2, [r3, #32]
    63c8:	4608      	mov	r0, r1
    63ca:	f7ff b989 	b.w	56e0 <k_sched_time_slice_set>
    63ce:	bf00      	nop
    63d0:	200009e4 	.word	0x200009e4

000063d4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    63d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63d6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    63da:	b173      	cbz	r3, 63fa <z_impl_k_yield+0x26>
    63dc:	4941      	ldr	r1, [pc, #260]	; (64e4 <z_impl_k_yield+0x110>)
    63de:	4a42      	ldr	r2, [pc, #264]	; (64e8 <z_impl_k_yield+0x114>)
    63e0:	4842      	ldr	r0, [pc, #264]	; (64ec <z_impl_k_yield+0x118>)
    63e2:	f240 43dc 	movw	r3, #1244	; 0x4dc
    63e6:	f001 fa36 	bl	7856 <printk>
    63ea:	4841      	ldr	r0, [pc, #260]	; (64f0 <z_impl_k_yield+0x11c>)
    63ec:	f001 fa33 	bl	7856 <printk>
    63f0:	483d      	ldr	r0, [pc, #244]	; (64e8 <z_impl_k_yield+0x114>)
    63f2:	f240 41dc 	movw	r1, #1244	; 0x4dc
    63f6:	f001 f95a 	bl	76ae <assert_post_action>
	__asm__ volatile(
    63fa:	f04f 0320 	mov.w	r3, #32
    63fe:	f3ef 8611 	mrs	r6, BASEPRI
    6402:	f383 8812 	msr	BASEPRI_MAX, r3
    6406:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    640a:	483a      	ldr	r0, [pc, #232]	; (64f4 <z_impl_k_yield+0x120>)
    640c:	f000 fbe2 	bl	6bd4 <z_spin_lock_valid>
    6410:	b968      	cbnz	r0, 642e <z_impl_k_yield+0x5a>
    6412:	4a39      	ldr	r2, [pc, #228]	; (64f8 <z_impl_k_yield+0x124>)
    6414:	4939      	ldr	r1, [pc, #228]	; (64fc <z_impl_k_yield+0x128>)
    6416:	4835      	ldr	r0, [pc, #212]	; (64ec <z_impl_k_yield+0x118>)
    6418:	2381      	movs	r3, #129	; 0x81
    641a:	f001 fa1c 	bl	7856 <printk>
    641e:	4935      	ldr	r1, [pc, #212]	; (64f4 <z_impl_k_yield+0x120>)
    6420:	4837      	ldr	r0, [pc, #220]	; (6500 <z_impl_k_yield+0x12c>)
    6422:	f001 fa18 	bl	7856 <printk>
    6426:	4834      	ldr	r0, [pc, #208]	; (64f8 <z_impl_k_yield+0x124>)
    6428:	2181      	movs	r1, #129	; 0x81
    642a:	f001 f940 	bl	76ae <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    642e:	4d35      	ldr	r5, [pc, #212]	; (6504 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    6430:	4830      	ldr	r0, [pc, #192]	; (64f4 <z_impl_k_yield+0x120>)
    6432:	f000 fbed 	bl	6c10 <z_spin_lock_set_owner>
    6436:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6438:	7b4b      	ldrb	r3, [r1, #13]
    643a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    643e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6440:	f105 0020 	add.w	r0, r5, #32
    6444:	f7ff fa6a 	bl	591c <z_priq_dumb_remove>
	}
	queue_thread(_current);
    6448:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    644a:	7b63      	ldrb	r3, [r4, #13]
    644c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6450:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6452:	4b2d      	ldr	r3, [pc, #180]	; (6508 <z_impl_k_yield+0x134>)
    6454:	429c      	cmp	r4, r3
    6456:	d109      	bne.n	646c <z_impl_k_yield+0x98>
    6458:	492c      	ldr	r1, [pc, #176]	; (650c <z_impl_k_yield+0x138>)
    645a:	4824      	ldr	r0, [pc, #144]	; (64ec <z_impl_k_yield+0x118>)
    645c:	4a22      	ldr	r2, [pc, #136]	; (64e8 <z_impl_k_yield+0x114>)
    645e:	23ba      	movs	r3, #186	; 0xba
    6460:	f001 f9f9 	bl	7856 <printk>
    6464:	4820      	ldr	r0, [pc, #128]	; (64e8 <z_impl_k_yield+0x114>)
    6466:	21ba      	movs	r1, #186	; 0xba
    6468:	f001 f921 	bl	76ae <assert_post_action>
	return list->head == list;
    646c:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    646e:	4828      	ldr	r0, [pc, #160]	; (6510 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6470:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6472:	4283      	cmp	r3, r0
    6474:	bf08      	it	eq
    6476:	2300      	moveq	r3, #0
    6478:	2b00      	cmp	r3, #0
    647a:	bf38      	it	cc
    647c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    647e:	b35b      	cbz	r3, 64d8 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    6480:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6484:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6488:	4297      	cmp	r7, r2
    648a:	d021      	beq.n	64d0 <z_impl_k_yield+0xfc>
		return b2 - b1;
    648c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    648e:	2a00      	cmp	r2, #0
    6490:	dd1e      	ble.n	64d0 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    6492:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6494:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6498:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    649a:	605c      	str	r4, [r3, #4]
	update_cache(1);
    649c:	2001      	movs	r0, #1
    649e:	f7ff fa81 	bl	59a4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64a2:	4814      	ldr	r0, [pc, #80]	; (64f4 <z_impl_k_yield+0x120>)
    64a4:	f000 fba4 	bl	6bf0 <z_spin_unlock_valid>
    64a8:	b968      	cbnz	r0, 64c6 <z_impl_k_yield+0xf2>
    64aa:	4a13      	ldr	r2, [pc, #76]	; (64f8 <z_impl_k_yield+0x124>)
    64ac:	4919      	ldr	r1, [pc, #100]	; (6514 <z_impl_k_yield+0x140>)
    64ae:	480f      	ldr	r0, [pc, #60]	; (64ec <z_impl_k_yield+0x118>)
    64b0:	23c3      	movs	r3, #195	; 0xc3
    64b2:	f001 f9d0 	bl	7856 <printk>
    64b6:	490f      	ldr	r1, [pc, #60]	; (64f4 <z_impl_k_yield+0x120>)
    64b8:	4817      	ldr	r0, [pc, #92]	; (6518 <z_impl_k_yield+0x144>)
    64ba:	f001 f9cc 	bl	7856 <printk>
    64be:	480e      	ldr	r0, [pc, #56]	; (64f8 <z_impl_k_yield+0x124>)
    64c0:	21c3      	movs	r1, #195	; 0xc3
    64c2:	f001 f8f4 	bl	76ae <assert_post_action>
    64c6:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    64c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    64cc:	f7fc b950 	b.w	2770 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    64d0:	428b      	cmp	r3, r1
    64d2:	d001      	beq.n	64d8 <z_impl_k_yield+0x104>
    64d4:	681b      	ldr	r3, [r3, #0]
    64d6:	e7d2      	b.n	647e <z_impl_k_yield+0xaa>
	node->prev = tail;
    64d8:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    64dc:	600c      	str	r4, [r1, #0]
	list->tail = node;
    64de:	626c      	str	r4, [r5, #36]	; 0x24
}
    64e0:	e7dc      	b.n	649c <z_impl_k_yield+0xc8>
    64e2:	bf00      	nop
    64e4:	00009054 	.word	0x00009054
    64e8:	00009101 	.word	0x00009101
    64ec:	00008224 	.word	0x00008224
    64f0:	000090cd 	.word	0x000090cd
    64f4:	20000a14 	.word	0x20000a14
    64f8:	0000888c 	.word	0x0000888c
    64fc:	000088de 	.word	0x000088de
    6500:	000088f3 	.word	0x000088f3
    6504:	200009e4 	.word	0x200009e4
    6508:	200001c0 	.word	0x200001c0
    650c:	00009123 	.word	0x00009123
    6510:	20000a04 	.word	0x20000a04
    6514:	000088b2 	.word	0x000088b2
    6518:	000088c9 	.word	0x000088c9

0000651c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6520:	4604      	mov	r4, r0
    6522:	460d      	mov	r5, r1
    6524:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6528:	b173      	cbz	r3, 6548 <z_tick_sleep+0x2c>
    652a:	4945      	ldr	r1, [pc, #276]	; (6640 <z_tick_sleep+0x124>)
    652c:	4a45      	ldr	r2, [pc, #276]	; (6644 <z_tick_sleep+0x128>)
    652e:	4846      	ldr	r0, [pc, #280]	; (6648 <z_tick_sleep+0x12c>)
    6530:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    6534:	f001 f98f 	bl	7856 <printk>
    6538:	4844      	ldr	r0, [pc, #272]	; (664c <z_tick_sleep+0x130>)
    653a:	f001 f98c 	bl	7856 <printk>
    653e:	4841      	ldr	r0, [pc, #260]	; (6644 <z_tick_sleep+0x128>)
    6540:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    6544:	f001 f8b3 	bl	76ae <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6548:	ea54 0305 	orrs.w	r3, r4, r5
    654c:	d104      	bne.n	6558 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    654e:	f7ff ff41 	bl	63d4 <z_impl_k_yield>
		k_yield();
		return 0;
    6552:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    6554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    6558:	f06f 0301 	mvn.w	r3, #1
    655c:	1b1e      	subs	r6, r3, r4
    655e:	f04f 33ff 	mov.w	r3, #4294967295
    6562:	eb63 0705 	sbc.w	r7, r3, r5
    6566:	2e01      	cmp	r6, #1
    6568:	f177 0300 	sbcs.w	r3, r7, #0
    656c:	da64      	bge.n	6638 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    656e:	f001 fbed 	bl	7d4c <sys_clock_tick_get_32>
    6572:	1906      	adds	r6, r0, r4
    6574:	f04f 0320 	mov.w	r3, #32
    6578:	f3ef 8811 	mrs	r8, BASEPRI
    657c:	f383 8812 	msr	BASEPRI_MAX, r3
    6580:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6584:	4832      	ldr	r0, [pc, #200]	; (6650 <z_tick_sleep+0x134>)
    6586:	f000 fb25 	bl	6bd4 <z_spin_lock_valid>
    658a:	b968      	cbnz	r0, 65a8 <z_tick_sleep+0x8c>
    658c:	4a31      	ldr	r2, [pc, #196]	; (6654 <z_tick_sleep+0x138>)
    658e:	4932      	ldr	r1, [pc, #200]	; (6658 <z_tick_sleep+0x13c>)
    6590:	482d      	ldr	r0, [pc, #180]	; (6648 <z_tick_sleep+0x12c>)
    6592:	2381      	movs	r3, #129	; 0x81
    6594:	f001 f95f 	bl	7856 <printk>
    6598:	492d      	ldr	r1, [pc, #180]	; (6650 <z_tick_sleep+0x134>)
    659a:	4830      	ldr	r0, [pc, #192]	; (665c <z_tick_sleep+0x140>)
    659c:	f001 f95b 	bl	7856 <printk>
    65a0:	482c      	ldr	r0, [pc, #176]	; (6654 <z_tick_sleep+0x138>)
    65a2:	2181      	movs	r1, #129	; 0x81
    65a4:	f001 f883 	bl	76ae <assert_post_action>
	pending_current = _current;
    65a8:	4f2d      	ldr	r7, [pc, #180]	; (6660 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    65aa:	4829      	ldr	r0, [pc, #164]	; (6650 <z_tick_sleep+0x134>)
    65ac:	f000 fb30 	bl	6c10 <z_spin_lock_set_owner>
    65b0:	4b2c      	ldr	r3, [pc, #176]	; (6664 <z_tick_sleep+0x148>)
    65b2:	68b8      	ldr	r0, [r7, #8]
    65b4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    65b6:	f7ff fc43 	bl	5e40 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    65ba:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    65bc:	492a      	ldr	r1, [pc, #168]	; (6668 <z_tick_sleep+0x14c>)
    65be:	4622      	mov	r2, r4
    65c0:	462b      	mov	r3, r5
    65c2:	3018      	adds	r0, #24
    65c4:	f000 fb7c 	bl	6cc0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    65c8:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    65ca:	4821      	ldr	r0, [pc, #132]	; (6650 <z_tick_sleep+0x134>)
    65cc:	7b53      	ldrb	r3, [r2, #13]
    65ce:	f043 0310 	orr.w	r3, r3, #16
    65d2:	7353      	strb	r3, [r2, #13]
    65d4:	f000 fb0c 	bl	6bf0 <z_spin_unlock_valid>
    65d8:	b968      	cbnz	r0, 65f6 <z_tick_sleep+0xda>
    65da:	4a1e      	ldr	r2, [pc, #120]	; (6654 <z_tick_sleep+0x138>)
    65dc:	4923      	ldr	r1, [pc, #140]	; (666c <z_tick_sleep+0x150>)
    65de:	481a      	ldr	r0, [pc, #104]	; (6648 <z_tick_sleep+0x12c>)
    65e0:	23c3      	movs	r3, #195	; 0xc3
    65e2:	f001 f938 	bl	7856 <printk>
    65e6:	491a      	ldr	r1, [pc, #104]	; (6650 <z_tick_sleep+0x134>)
    65e8:	4821      	ldr	r0, [pc, #132]	; (6670 <z_tick_sleep+0x154>)
    65ea:	f001 f934 	bl	7856 <printk>
    65ee:	4819      	ldr	r0, [pc, #100]	; (6654 <z_tick_sleep+0x138>)
    65f0:	21c3      	movs	r1, #195	; 0xc3
    65f2:	f001 f85c 	bl	76ae <assert_post_action>
    65f6:	4640      	mov	r0, r8
    65f8:	f7fc f8ba 	bl	2770 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    65fc:	68bb      	ldr	r3, [r7, #8]
    65fe:	7b5b      	ldrb	r3, [r3, #13]
    6600:	06db      	lsls	r3, r3, #27
    6602:	d50e      	bpl.n	6622 <z_tick_sleep+0x106>
    6604:	491b      	ldr	r1, [pc, #108]	; (6674 <z_tick_sleep+0x158>)
    6606:	4a0f      	ldr	r2, [pc, #60]	; (6644 <z_tick_sleep+0x128>)
    6608:	480f      	ldr	r0, [pc, #60]	; (6648 <z_tick_sleep+0x12c>)
    660a:	f240 5319 	movw	r3, #1305	; 0x519
    660e:	f001 f922 	bl	7856 <printk>
    6612:	480e      	ldr	r0, [pc, #56]	; (664c <z_tick_sleep+0x130>)
    6614:	f001 f91f 	bl	7856 <printk>
    6618:	480a      	ldr	r0, [pc, #40]	; (6644 <z_tick_sleep+0x128>)
    661a:	f240 5119 	movw	r1, #1305	; 0x519
    661e:	f001 f846 	bl	76ae <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6622:	f001 fb93 	bl	7d4c <sys_clock_tick_get_32>
    6626:	1a30      	subs	r0, r6, r0
    6628:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    662c:	2801      	cmp	r0, #1
    662e:	f171 0300 	sbcs.w	r3, r1, #0
    6632:	bfb8      	it	lt
    6634:	2000      	movlt	r0, #0
    6636:	e78d      	b.n	6554 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6638:	f06f 0601 	mvn.w	r6, #1
    663c:	1b36      	subs	r6, r6, r4
    663e:	e799      	b.n	6574 <z_tick_sleep+0x58>
    6640:	00009054 	.word	0x00009054
    6644:	00009101 	.word	0x00009101
    6648:	00008224 	.word	0x00008224
    664c:	000090cd 	.word	0x000090cd
    6650:	20000a14 	.word	0x20000a14
    6654:	0000888c 	.word	0x0000888c
    6658:	000088de 	.word	0x000088de
    665c:	000088f3 	.word	0x000088f3
    6660:	200009e4 	.word	0x200009e4
    6664:	20000a10 	.word	0x20000a10
    6668:	00005d8d 	.word	0x00005d8d
    666c:	000088b2 	.word	0x000088b2
    6670:	000088c9 	.word	0x000088c9
    6674:	000091b3 	.word	0x000091b3

00006678 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6678:	b538      	push	{r3, r4, r5, lr}
    667a:	4604      	mov	r4, r0
    667c:	460d      	mov	r5, r1
    667e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6682:	b173      	cbz	r3, 66a2 <z_impl_k_sleep+0x2a>
    6684:	4913      	ldr	r1, [pc, #76]	; (66d4 <z_impl_k_sleep+0x5c>)
    6686:	4a14      	ldr	r2, [pc, #80]	; (66d8 <z_impl_k_sleep+0x60>)
    6688:	4814      	ldr	r0, [pc, #80]	; (66dc <z_impl_k_sleep+0x64>)
    668a:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    668e:	f001 f8e2 	bl	7856 <printk>
    6692:	4813      	ldr	r0, [pc, #76]	; (66e0 <z_impl_k_sleep+0x68>)
    6694:	f001 f8df 	bl	7856 <printk>
    6698:	480f      	ldr	r0, [pc, #60]	; (66d8 <z_impl_k_sleep+0x60>)
    669a:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    669e:	f001 f806 	bl	76ae <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    66a2:	1c6b      	adds	r3, r5, #1
    66a4:	bf08      	it	eq
    66a6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    66aa:	d106      	bne.n	66ba <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    66ac:	4b0d      	ldr	r3, [pc, #52]	; (66e4 <z_impl_k_sleep+0x6c>)
    66ae:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    66b0:	f7ff fd4e 	bl	6150 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    66b4:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    66b8:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    66ba:	4620      	mov	r0, r4
    66bc:	4629      	mov	r1, r5
    66be:	f7ff ff2d 	bl	651c <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    66c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    66c6:	fb80 3403 	smull	r3, r4, r0, r3
    66ca:	0bd8      	lsrs	r0, r3, #15
    66cc:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    66d0:	e7f2      	b.n	66b8 <z_impl_k_sleep+0x40>
    66d2:	bf00      	nop
    66d4:	00009054 	.word	0x00009054
    66d8:	00009101 	.word	0x00009101
    66dc:	00008224 	.word	0x00008224
    66e0:	000090cd 	.word	0x000090cd
    66e4:	200009e4 	.word	0x200009e4

000066e8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    66e8:	4b01      	ldr	r3, [pc, #4]	; (66f0 <z_impl_z_current_get+0x8>)
    66ea:	6898      	ldr	r0, [r3, #8]
    66ec:	4770      	bx	lr
    66ee:	bf00      	nop
    66f0:	200009e4 	.word	0x200009e4

000066f4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    66f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66f8:	4604      	mov	r4, r0
    66fa:	f04f 0320 	mov.w	r3, #32
    66fe:	f3ef 8611 	mrs	r6, BASEPRI
    6702:	f383 8812 	msr	BASEPRI_MAX, r3
    6706:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    670a:	4848      	ldr	r0, [pc, #288]	; (682c <z_thread_abort+0x138>)
    670c:	f000 fa62 	bl	6bd4 <z_spin_lock_valid>
    6710:	b968      	cbnz	r0, 672e <z_thread_abort+0x3a>
    6712:	4a47      	ldr	r2, [pc, #284]	; (6830 <z_thread_abort+0x13c>)
    6714:	4947      	ldr	r1, [pc, #284]	; (6834 <z_thread_abort+0x140>)
    6716:	4848      	ldr	r0, [pc, #288]	; (6838 <z_thread_abort+0x144>)
    6718:	2381      	movs	r3, #129	; 0x81
    671a:	f001 f89c 	bl	7856 <printk>
    671e:	4943      	ldr	r1, [pc, #268]	; (682c <z_thread_abort+0x138>)
    6720:	4846      	ldr	r0, [pc, #280]	; (683c <z_thread_abort+0x148>)
    6722:	f001 f898 	bl	7856 <printk>
    6726:	4842      	ldr	r0, [pc, #264]	; (6830 <z_thread_abort+0x13c>)
    6728:	2181      	movs	r1, #129	; 0x81
    672a:	f000 ffc0 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    672e:	483f      	ldr	r0, [pc, #252]	; (682c <z_thread_abort+0x138>)
    6730:	f000 fa6e 	bl	6c10 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6734:	7b63      	ldrb	r3, [r4, #13]
    6736:	071a      	lsls	r2, r3, #28
    6738:	d517      	bpl.n	676a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    673a:	483c      	ldr	r0, [pc, #240]	; (682c <z_thread_abort+0x138>)
    673c:	f000 fa58 	bl	6bf0 <z_spin_unlock_valid>
    6740:	b968      	cbnz	r0, 675e <z_thread_abort+0x6a>
    6742:	4a3b      	ldr	r2, [pc, #236]	; (6830 <z_thread_abort+0x13c>)
    6744:	493e      	ldr	r1, [pc, #248]	; (6840 <z_thread_abort+0x14c>)
    6746:	483c      	ldr	r0, [pc, #240]	; (6838 <z_thread_abort+0x144>)
    6748:	23ac      	movs	r3, #172	; 0xac
    674a:	f001 f884 	bl	7856 <printk>
    674e:	4937      	ldr	r1, [pc, #220]	; (682c <z_thread_abort+0x138>)
    6750:	483c      	ldr	r0, [pc, #240]	; (6844 <z_thread_abort+0x150>)
    6752:	f001 f880 	bl	7856 <printk>
    6756:	4836      	ldr	r0, [pc, #216]	; (6830 <z_thread_abort+0x13c>)
    6758:	21ac      	movs	r1, #172	; 0xac
    675a:	f000 ffa8 	bl	76ae <assert_post_action>
	__asm__ volatile(
    675e:	f386 8811 	msr	BASEPRI, r6
    6762:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    676a:	f023 0220 	bic.w	r2, r3, #32
    676e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6772:	09d2      	lsrs	r2, r2, #7
    6774:	d142      	bne.n	67fc <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6776:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6778:	68a3      	ldr	r3, [r4, #8]
    677a:	b113      	cbz	r3, 6782 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    677c:	4620      	mov	r0, r4
    677e:	f7ff f8ef 	bl	5960 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6782:	f104 0018 	add.w	r0, r4, #24
    6786:	f000 fb6f 	bl	6e68 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    678a:	f104 0758 	add.w	r7, r4, #88	; 0x58
    678e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6792:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6794:	42bd      	cmp	r5, r7
    6796:	d001      	beq.n	679c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6798:	2d00      	cmp	r5, #0
    679a:	d139      	bne.n	6810 <z_thread_abort+0x11c>
		update_cache(1);
    679c:	2001      	movs	r0, #1
    679e:	f7ff f901 	bl	59a4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    67a2:	4b29      	ldr	r3, [pc, #164]	; (6848 <z_thread_abort+0x154>)
    67a4:	689b      	ldr	r3, [r3, #8]
    67a6:	42a3      	cmp	r3, r4
    67a8:	d1c7      	bne.n	673a <z_thread_abort+0x46>
    67aa:	f3ef 8305 	mrs	r3, IPSR
    67ae:	2b00      	cmp	r3, #0
    67b0:	d1c3      	bne.n	673a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67b2:	481e      	ldr	r0, [pc, #120]	; (682c <z_thread_abort+0x138>)
    67b4:	f000 fa1c 	bl	6bf0 <z_spin_unlock_valid>
    67b8:	b968      	cbnz	r0, 67d6 <z_thread_abort+0xe2>
    67ba:	4a1d      	ldr	r2, [pc, #116]	; (6830 <z_thread_abort+0x13c>)
    67bc:	4920      	ldr	r1, [pc, #128]	; (6840 <z_thread_abort+0x14c>)
    67be:	481e      	ldr	r0, [pc, #120]	; (6838 <z_thread_abort+0x144>)
    67c0:	23c3      	movs	r3, #195	; 0xc3
    67c2:	f001 f848 	bl	7856 <printk>
    67c6:	4919      	ldr	r1, [pc, #100]	; (682c <z_thread_abort+0x138>)
    67c8:	481e      	ldr	r0, [pc, #120]	; (6844 <z_thread_abort+0x150>)
    67ca:	f001 f844 	bl	7856 <printk>
    67ce:	4818      	ldr	r0, [pc, #96]	; (6830 <z_thread_abort+0x13c>)
    67d0:	21c3      	movs	r1, #195	; 0xc3
    67d2:	f000 ff6c 	bl	76ae <assert_post_action>
    67d6:	4630      	mov	r0, r6
    67d8:	f7fb ffca 	bl	2770 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    67dc:	4a1b      	ldr	r2, [pc, #108]	; (684c <z_thread_abort+0x158>)
    67de:	491c      	ldr	r1, [pc, #112]	; (6850 <z_thread_abort+0x15c>)
    67e0:	4815      	ldr	r0, [pc, #84]	; (6838 <z_thread_abort+0x144>)
    67e2:	f240 634b 	movw	r3, #1611	; 0x64b
    67e6:	f001 f836 	bl	7856 <printk>
    67ea:	481a      	ldr	r0, [pc, #104]	; (6854 <z_thread_abort+0x160>)
    67ec:	f001 f833 	bl	7856 <printk>
    67f0:	4816      	ldr	r0, [pc, #88]	; (684c <z_thread_abort+0x158>)
    67f2:	f240 614b 	movw	r1, #1611	; 0x64b
    67f6:	f000 ff5a 	bl	76ae <assert_post_action>
    67fa:	e79e      	b.n	673a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    67fc:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6800:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    6804:	4814      	ldr	r0, [pc, #80]	; (6858 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6806:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6808:	4621      	mov	r1, r4
    680a:	f7ff f887 	bl	591c <z_priq_dumb_remove>
}
    680e:	e7b3      	b.n	6778 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    6810:	4628      	mov	r0, r5
    6812:	f7ff f8a5 	bl	5960 <unpend_thread_no_timeout>
    6816:	f105 0018 	add.w	r0, r5, #24
    681a:	f000 fb25 	bl	6e68 <z_abort_timeout>
    681e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    6822:	4628      	mov	r0, r5
    6824:	f7ff f9c4 	bl	5bb0 <ready_thread>
    6828:	e7b3      	b.n	6792 <z_thread_abort+0x9e>
    682a:	bf00      	nop
    682c:	20000a14 	.word	0x20000a14
    6830:	0000888c 	.word	0x0000888c
    6834:	000088de 	.word	0x000088de
    6838:	00008224 	.word	0x00008224
    683c:	000088f3 	.word	0x000088f3
    6840:	000088b2 	.word	0x000088b2
    6844:	000088c9 	.word	0x000088c9
    6848:	200009e4 	.word	0x200009e4
    684c:	00009101 	.word	0x00009101
    6850:	00008874 	.word	0x00008874
    6854:	000091f3 	.word	0x000091f3
    6858:	20000a04 	.word	0x20000a04

0000685c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    685c:	b538      	push	{r3, r4, r5, lr}
    685e:	4604      	mov	r4, r0
	__asm__ volatile(
    6860:	f04f 0320 	mov.w	r3, #32
    6864:	f3ef 8511 	mrs	r5, BASEPRI
    6868:	f383 8812 	msr	BASEPRI_MAX, r3
    686c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6870:	4814      	ldr	r0, [pc, #80]	; (68c4 <z_impl_k_sem_give+0x68>)
    6872:	f000 f9af 	bl	6bd4 <z_spin_lock_valid>
    6876:	b968      	cbnz	r0, 6894 <z_impl_k_sem_give+0x38>
    6878:	4a13      	ldr	r2, [pc, #76]	; (68c8 <z_impl_k_sem_give+0x6c>)
    687a:	4914      	ldr	r1, [pc, #80]	; (68cc <z_impl_k_sem_give+0x70>)
    687c:	4814      	ldr	r0, [pc, #80]	; (68d0 <z_impl_k_sem_give+0x74>)
    687e:	2381      	movs	r3, #129	; 0x81
    6880:	f000 ffe9 	bl	7856 <printk>
    6884:	490f      	ldr	r1, [pc, #60]	; (68c4 <z_impl_k_sem_give+0x68>)
    6886:	4813      	ldr	r0, [pc, #76]	; (68d4 <z_impl_k_sem_give+0x78>)
    6888:	f000 ffe5 	bl	7856 <printk>
    688c:	480e      	ldr	r0, [pc, #56]	; (68c8 <z_impl_k_sem_give+0x6c>)
    688e:	2181      	movs	r1, #129	; 0x81
    6890:	f000 ff0d 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    6894:	480b      	ldr	r0, [pc, #44]	; (68c4 <z_impl_k_sem_give+0x68>)
    6896:	f000 f9bb 	bl	6c10 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    689a:	4620      	mov	r0, r4
    689c:	f7ff fd3e 	bl	631c <z_unpend_first_thread>

	if (thread != NULL) {
    68a0:	b148      	cbz	r0, 68b6 <z_impl_k_sem_give+0x5a>
    68a2:	2200      	movs	r2, #0
    68a4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    68a6:	f7ff f9d5 	bl	5c54 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    68aa:	4629      	mov	r1, r5
    68ac:	4805      	ldr	r0, [pc, #20]	; (68c4 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    68ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    68b2:	f7fe bf7b 	b.w	57ac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    68b6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    68ba:	429a      	cmp	r2, r3
    68bc:	bf18      	it	ne
    68be:	3301      	addne	r3, #1
    68c0:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    68c2:	e7f2      	b.n	68aa <z_impl_k_sem_give+0x4e>
    68c4:	20000a20 	.word	0x20000a20
    68c8:	0000888c 	.word	0x0000888c
    68cc:	000088de 	.word	0x000088de
    68d0:	00008224 	.word	0x00008224
    68d4:	000088f3 	.word	0x000088f3

000068d8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    68d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68da:	4604      	mov	r4, r0
    68dc:	4616      	mov	r6, r2
    68de:	461f      	mov	r7, r3
    68e0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    68e4:	b17b      	cbz	r3, 6906 <z_impl_k_sem_take+0x2e>
    68e6:	ea56 0307 	orrs.w	r3, r6, r7
    68ea:	d00c      	beq.n	6906 <z_impl_k_sem_take+0x2e>
    68ec:	4935      	ldr	r1, [pc, #212]	; (69c4 <z_impl_k_sem_take+0xec>)
    68ee:	4a36      	ldr	r2, [pc, #216]	; (69c8 <z_impl_k_sem_take+0xf0>)
    68f0:	4836      	ldr	r0, [pc, #216]	; (69cc <z_impl_k_sem_take+0xf4>)
    68f2:	2379      	movs	r3, #121	; 0x79
    68f4:	f000 ffaf 	bl	7856 <printk>
    68f8:	4835      	ldr	r0, [pc, #212]	; (69d0 <z_impl_k_sem_take+0xf8>)
    68fa:	f000 ffac 	bl	7856 <printk>
    68fe:	4832      	ldr	r0, [pc, #200]	; (69c8 <z_impl_k_sem_take+0xf0>)
    6900:	2179      	movs	r1, #121	; 0x79
    6902:	f000 fed4 	bl	76ae <assert_post_action>
    6906:	f04f 0320 	mov.w	r3, #32
    690a:	f3ef 8511 	mrs	r5, BASEPRI
    690e:	f383 8812 	msr	BASEPRI_MAX, r3
    6912:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6916:	482f      	ldr	r0, [pc, #188]	; (69d4 <z_impl_k_sem_take+0xfc>)
    6918:	f000 f95c 	bl	6bd4 <z_spin_lock_valid>
    691c:	b968      	cbnz	r0, 693a <z_impl_k_sem_take+0x62>
    691e:	4a2e      	ldr	r2, [pc, #184]	; (69d8 <z_impl_k_sem_take+0x100>)
    6920:	492e      	ldr	r1, [pc, #184]	; (69dc <z_impl_k_sem_take+0x104>)
    6922:	482a      	ldr	r0, [pc, #168]	; (69cc <z_impl_k_sem_take+0xf4>)
    6924:	2381      	movs	r3, #129	; 0x81
    6926:	f000 ff96 	bl	7856 <printk>
    692a:	492a      	ldr	r1, [pc, #168]	; (69d4 <z_impl_k_sem_take+0xfc>)
    692c:	482c      	ldr	r0, [pc, #176]	; (69e0 <z_impl_k_sem_take+0x108>)
    692e:	f000 ff92 	bl	7856 <printk>
    6932:	4829      	ldr	r0, [pc, #164]	; (69d8 <z_impl_k_sem_take+0x100>)
    6934:	2181      	movs	r1, #129	; 0x81
    6936:	f000 feba 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    693a:	4826      	ldr	r0, [pc, #152]	; (69d4 <z_impl_k_sem_take+0xfc>)
    693c:	f000 f968 	bl	6c10 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6940:	68a3      	ldr	r3, [r4, #8]
    6942:	b1d3      	cbz	r3, 697a <z_impl_k_sem_take+0xa2>
		sem->count--;
    6944:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6946:	4823      	ldr	r0, [pc, #140]	; (69d4 <z_impl_k_sem_take+0xfc>)
    6948:	60a3      	str	r3, [r4, #8]
    694a:	f000 f951 	bl	6bf0 <z_spin_unlock_valid>
    694e:	b968      	cbnz	r0, 696c <z_impl_k_sem_take+0x94>
    6950:	4a21      	ldr	r2, [pc, #132]	; (69d8 <z_impl_k_sem_take+0x100>)
    6952:	4924      	ldr	r1, [pc, #144]	; (69e4 <z_impl_k_sem_take+0x10c>)
    6954:	481d      	ldr	r0, [pc, #116]	; (69cc <z_impl_k_sem_take+0xf4>)
    6956:	23ac      	movs	r3, #172	; 0xac
    6958:	f000 ff7d 	bl	7856 <printk>
    695c:	491d      	ldr	r1, [pc, #116]	; (69d4 <z_impl_k_sem_take+0xfc>)
    695e:	4822      	ldr	r0, [pc, #136]	; (69e8 <z_impl_k_sem_take+0x110>)
    6960:	f000 ff79 	bl	7856 <printk>
    6964:	481c      	ldr	r0, [pc, #112]	; (69d8 <z_impl_k_sem_take+0x100>)
    6966:	21ac      	movs	r1, #172	; 0xac
    6968:	f000 fea1 	bl	76ae <assert_post_action>
	__asm__ volatile(
    696c:	f385 8811 	msr	BASEPRI, r5
    6970:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6974:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6976:	b003      	add	sp, #12
    6978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    697a:	ea56 0307 	orrs.w	r3, r6, r7
    697e:	d118      	bne.n	69b2 <z_impl_k_sem_take+0xda>
    6980:	4814      	ldr	r0, [pc, #80]	; (69d4 <z_impl_k_sem_take+0xfc>)
    6982:	f000 f935 	bl	6bf0 <z_spin_unlock_valid>
    6986:	b968      	cbnz	r0, 69a4 <z_impl_k_sem_take+0xcc>
    6988:	4a13      	ldr	r2, [pc, #76]	; (69d8 <z_impl_k_sem_take+0x100>)
    698a:	4916      	ldr	r1, [pc, #88]	; (69e4 <z_impl_k_sem_take+0x10c>)
    698c:	480f      	ldr	r0, [pc, #60]	; (69cc <z_impl_k_sem_take+0xf4>)
    698e:	23ac      	movs	r3, #172	; 0xac
    6990:	f000 ff61 	bl	7856 <printk>
    6994:	490f      	ldr	r1, [pc, #60]	; (69d4 <z_impl_k_sem_take+0xfc>)
    6996:	4814      	ldr	r0, [pc, #80]	; (69e8 <z_impl_k_sem_take+0x110>)
    6998:	f000 ff5d 	bl	7856 <printk>
    699c:	480e      	ldr	r0, [pc, #56]	; (69d8 <z_impl_k_sem_take+0x100>)
    699e:	21ac      	movs	r1, #172	; 0xac
    69a0:	f000 fe85 	bl	76ae <assert_post_action>
    69a4:	f385 8811 	msr	BASEPRI, r5
    69a8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    69ac:	f06f 000f 	mvn.w	r0, #15
    69b0:	e7e1      	b.n	6976 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    69b2:	e9cd 6700 	strd	r6, r7, [sp]
    69b6:	4622      	mov	r2, r4
    69b8:	4629      	mov	r1, r5
    69ba:	4806      	ldr	r0, [pc, #24]	; (69d4 <z_impl_k_sem_take+0xfc>)
    69bc:	f7ff fafc 	bl	5fb8 <z_pend_curr>
	return ret;
    69c0:	e7d9      	b.n	6976 <z_impl_k_sem_take+0x9e>
    69c2:	bf00      	nop
    69c4:	00009235 	.word	0x00009235
    69c8:	00009215 	.word	0x00009215
    69cc:	00008224 	.word	0x00008224
    69d0:	000090cd 	.word	0x000090cd
    69d4:	20000a20 	.word	0x20000a20
    69d8:	0000888c 	.word	0x0000888c
    69dc:	000088de 	.word	0x000088de
    69e0:	000088f3 	.word	0x000088f3
    69e4:	000088b2 	.word	0x000088b2
    69e8:	000088c9 	.word	0x000088c9

000069ec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    69ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    69f0:	b085      	sub	sp, #20
    69f2:	4604      	mov	r4, r0
    69f4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    69f8:	f1b8 0f0f 	cmp.w	r8, #15
{
    69fc:	460f      	mov	r7, r1
    69fe:	4615      	mov	r5, r2
    6a00:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    6a02:	d132      	bne.n	6a6a <z_setup_new_thread+0x7e>
    6a04:	4b25      	ldr	r3, [pc, #148]	; (6a9c <z_setup_new_thread+0xb0>)
    6a06:	4599      	cmp	r9, r3
    6a08:	d133      	bne.n	6a72 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    6a0a:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    6a0e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6a12:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6a14:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6a16:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6a18:	2304      	movs	r3, #4
    6a1a:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6a1c:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6a20:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6a24:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6a2a:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a2e:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6a30:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6a36:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    6a38:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a3c:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6a3e:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a40:	464b      	mov	r3, r9
	node->prev = NULL;
    6a42:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    6a46:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6a48:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6a4a:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6a4c:	4642      	mov	r2, r8
    6a4e:	4639      	mov	r1, r7
    6a50:	4620      	mov	r0, r4
    6a52:	f7fb fea7 	bl	27a4 <arch_new_thread>
	if (!_current) {
    6a56:	4b12      	ldr	r3, [pc, #72]	; (6aa0 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    6a58:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6a5a:	689b      	ldr	r3, [r3, #8]
    6a5c:	b103      	cbz	r3, 6a60 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    6a60:	6723      	str	r3, [r4, #112]	; 0x70
}
    6a62:	4640      	mov	r0, r8
    6a64:	b005      	add	sp, #20
    6a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6a6a:	f108 0310 	add.w	r3, r8, #16
    6a6e:	2b1e      	cmp	r3, #30
    6a70:	d9cb      	bls.n	6a0a <z_setup_new_thread+0x1e>
    6a72:	4a0c      	ldr	r2, [pc, #48]	; (6aa4 <z_setup_new_thread+0xb8>)
    6a74:	490c      	ldr	r1, [pc, #48]	; (6aa8 <z_setup_new_thread+0xbc>)
    6a76:	480d      	ldr	r0, [pc, #52]	; (6aac <z_setup_new_thread+0xc0>)
    6a78:	f240 13ff 	movw	r3, #511	; 0x1ff
    6a7c:	f000 feeb 	bl	7856 <printk>
    6a80:	4641      	mov	r1, r8
    6a82:	480b      	ldr	r0, [pc, #44]	; (6ab0 <z_setup_new_thread+0xc4>)
    6a84:	f06f 030f 	mvn.w	r3, #15
    6a88:	220e      	movs	r2, #14
    6a8a:	f000 fee4 	bl	7856 <printk>
    6a8e:	4805      	ldr	r0, [pc, #20]	; (6aa4 <z_setup_new_thread+0xb8>)
    6a90:	f240 11ff 	movw	r1, #511	; 0x1ff
    6a94:	f000 fe0b 	bl	76ae <assert_post_action>
    6a98:	e7b7      	b.n	6a0a <z_setup_new_thread+0x1e>
    6a9a:	bf00      	nop
    6a9c:	00004f31 	.word	0x00004f31
    6aa0:	200009e4 	.word	0x200009e4
    6aa4:	00009282 	.word	0x00009282
    6aa8:	000092a5 	.word	0x000092a5
    6aac:	00008224 	.word	0x00008224
    6ab0:	00009325 	.word	0x00009325

00006ab4 <z_init_static_threads>:
{
    6ab4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    6ab8:	4f3f      	ldr	r7, [pc, #252]	; (6bb8 <z_init_static_threads+0x104>)
    6aba:	4d40      	ldr	r5, [pc, #256]	; (6bbc <z_init_static_threads+0x108>)
    6abc:	f8df 810c 	ldr.w	r8, [pc, #268]	; 6bcc <z_init_static_threads+0x118>
{
    6ac0:	b086      	sub	sp, #24
    6ac2:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    6ac4:	42bd      	cmp	r5, r7
    6ac6:	d90e      	bls.n	6ae6 <z_init_static_threads+0x32>
    6ac8:	493d      	ldr	r1, [pc, #244]	; (6bc0 <z_init_static_threads+0x10c>)
    6aca:	483e      	ldr	r0, [pc, #248]	; (6bc4 <z_init_static_threads+0x110>)
    6acc:	f240 23cf 	movw	r3, #719	; 0x2cf
    6ad0:	4642      	mov	r2, r8
    6ad2:	f000 fec0 	bl	7856 <printk>
    6ad6:	483c      	ldr	r0, [pc, #240]	; (6bc8 <z_init_static_threads+0x114>)
    6ad8:	f000 febd 	bl	7856 <printk>
    6adc:	f240 21cf 	movw	r1, #719	; 0x2cf
    6ae0:	4640      	mov	r0, r8
    6ae2:	f000 fde4 	bl	76ae <assert_post_action>
    6ae6:	42b5      	cmp	r5, r6
    6ae8:	f105 0430 	add.w	r4, r5, #48	; 0x30
    6aec:	d31f      	bcc.n	6b2e <z_init_static_threads+0x7a>
	k_sched_lock();
    6aee:	f7fe fea1 	bl	5834 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6af2:	4c32      	ldr	r4, [pc, #200]	; (6bbc <z_init_static_threads+0x108>)
    6af4:	4d35      	ldr	r5, [pc, #212]	; (6bcc <z_init_static_threads+0x118>)
    6af6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 6bc0 <z_init_static_threads+0x10c>
    6afa:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 6bc4 <z_init_static_threads+0x110>
    6afe:	42b4      	cmp	r4, r6
    6b00:	d90e      	bls.n	6b20 <z_init_static_threads+0x6c>
    6b02:	4641      	mov	r1, r8
    6b04:	f240 23ee 	movw	r3, #750	; 0x2ee
    6b08:	462a      	mov	r2, r5
    6b0a:	4648      	mov	r0, r9
    6b0c:	f000 fea3 	bl	7856 <printk>
    6b10:	482d      	ldr	r0, [pc, #180]	; (6bc8 <z_init_static_threads+0x114>)
    6b12:	f000 fea0 	bl	7856 <printk>
    6b16:	f240 21ee 	movw	r1, #750	; 0x2ee
    6b1a:	4628      	mov	r0, r5
    6b1c:	f000 fdc7 	bl	76ae <assert_post_action>
    6b20:	42b4      	cmp	r4, r6
    6b22:	d321      	bcc.n	6b68 <z_init_static_threads+0xb4>
}
    6b24:	b006      	add	sp, #24
    6b26:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    6b2a:	f7ff bb7b 	b.w	6224 <k_sched_unlock>
		z_setup_new_thread(
    6b2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6b32:	9305      	str	r3, [sp, #20]
    6b34:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6b38:	9304      	str	r3, [sp, #16]
    6b3a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    6b3e:	9303      	str	r3, [sp, #12]
    6b40:	f854 3c18 	ldr.w	r3, [r4, #-24]
    6b44:	9302      	str	r3, [sp, #8]
    6b46:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    6b4a:	9301      	str	r3, [sp, #4]
    6b4c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6b50:	9300      	str	r3, [sp, #0]
    6b52:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    6b56:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    6b5a:	f7ff ff47 	bl	69ec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6b5e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6b62:	655d      	str	r5, [r3, #84]	; 0x54
    6b64:	4625      	mov	r5, r4
    6b66:	e7ad      	b.n	6ac4 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6b68:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6b6a:	1c4b      	adds	r3, r1, #1
    6b6c:	d014      	beq.n	6b98 <z_init_static_threads+0xe4>
    6b6e:	f240 32e7 	movw	r2, #999	; 0x3e7
    6b72:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    6b74:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    6b78:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6b7c:	4693      	mov	fp, r2
    6b7e:	469c      	mov	ip, r3
    6b80:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6b84:	459c      	cmp	ip, r3
    6b86:	bf08      	it	eq
    6b88:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    6b8a:	6827      	ldr	r7, [r4, #0]
    6b8c:	4658      	mov	r0, fp
    6b8e:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6b90:	d104      	bne.n	6b9c <z_init_static_threads+0xe8>
	z_sched_start(thread);
    6b92:	4638      	mov	r0, r7
    6b94:	f7ff f8a6 	bl	5ce4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6b98:	3430      	adds	r4, #48	; 0x30
    6b9a:	e7b0      	b.n	6afe <z_init_static_threads+0x4a>
    6b9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6ba0:	2300      	movs	r3, #0
    6ba2:	f7f9 ff2b 	bl	9fc <__aeabi_uldivmod>
    6ba6:	4602      	mov	r2, r0
    6ba8:	460b      	mov	r3, r1
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6baa:	f107 0018 	add.w	r0, r7, #24
    6bae:	4908      	ldr	r1, [pc, #32]	; (6bd0 <z_init_static_threads+0x11c>)
    6bb0:	f000 f886 	bl	6cc0 <z_add_timeout>
    6bb4:	e7f0      	b.n	6b98 <z_init_static_threads+0xe4>
    6bb6:	bf00      	nop
    6bb8:	20000150 	.word	0x20000150
    6bbc:	20000150 	.word	0x20000150
    6bc0:	00009356 	.word	0x00009356
    6bc4:	00008224 	.word	0x00008224
    6bc8:	00009013 	.word	0x00009013
    6bcc:	00009282 	.word	0x00009282
    6bd0:	00005d8d 	.word	0x00005d8d

00006bd4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6bd4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    6bd6:	b138      	cbz	r0, 6be8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    6bd8:	4b04      	ldr	r3, [pc, #16]	; (6bec <z_spin_lock_valid+0x18>)
    6bda:	7d1b      	ldrb	r3, [r3, #20]
    6bdc:	f000 0003 	and.w	r0, r0, #3
    6be0:	1ac0      	subs	r0, r0, r3
    6be2:	bf18      	it	ne
    6be4:	2001      	movne	r0, #1
    6be6:	4770      	bx	lr
			return false;
		}
	}
	return true;
    6be8:	2001      	movs	r0, #1
}
    6bea:	4770      	bx	lr
    6bec:	200009e4 	.word	0x200009e4

00006bf0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6bf0:	4906      	ldr	r1, [pc, #24]	; (6c0c <z_spin_unlock_valid+0x1c>)
{
    6bf2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6bf4:	688a      	ldr	r2, [r1, #8]
    6bf6:	7d08      	ldrb	r0, [r1, #20]
    6bf8:	6819      	ldr	r1, [r3, #0]
    6bfa:	4302      	orrs	r2, r0
    6bfc:	4291      	cmp	r1, r2
    6bfe:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    6c02:	bf04      	itt	eq
    6c04:	6018      	streq	r0, [r3, #0]
	return true;
    6c06:	2001      	moveq	r0, #1
}
    6c08:	4770      	bx	lr
    6c0a:	bf00      	nop
    6c0c:	200009e4 	.word	0x200009e4

00006c10 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    6c10:	4a02      	ldr	r2, [pc, #8]	; (6c1c <z_spin_lock_set_owner+0xc>)
    6c12:	7d11      	ldrb	r1, [r2, #20]
    6c14:	6893      	ldr	r3, [r2, #8]
    6c16:	430b      	orrs	r3, r1
    6c18:	6003      	str	r3, [r0, #0]
}
    6c1a:	4770      	bx	lr
    6c1c:	200009e4 	.word	0x200009e4

00006c20 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6c20:	4b03      	ldr	r3, [pc, #12]	; (6c30 <elapsed+0x10>)
    6c22:	681b      	ldr	r3, [r3, #0]
    6c24:	b90b      	cbnz	r3, 6c2a <elapsed+0xa>
    6c26:	f7fd ba2d 	b.w	4084 <sys_clock_elapsed>
}
    6c2a:	2000      	movs	r0, #0
    6c2c:	4770      	bx	lr
    6c2e:	bf00      	nop
    6c30:	20000a24 	.word	0x20000a24

00006c34 <next_timeout>:

static int32_t next_timeout(void)
{
    6c34:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    6c36:	4b13      	ldr	r3, [pc, #76]	; (6c84 <next_timeout+0x50>)
    6c38:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c3a:	429c      	cmp	r4, r3
    6c3c:	bf08      	it	eq
    6c3e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6c40:	f7ff ffee 	bl	6c20 <elapsed>
    6c44:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    6c46:	b1bc      	cbz	r4, 6c78 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6c48:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    6c4c:	1b40      	subs	r0, r0, r5
    6c4e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    6c52:	2801      	cmp	r0, #1
    6c54:	f171 0300 	sbcs.w	r3, r1, #0
    6c58:	db11      	blt.n	6c7e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6c5a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6c5e:	2300      	movs	r3, #0
    6c60:	4282      	cmp	r2, r0
    6c62:	eb73 0401 	sbcs.w	r4, r3, r1
    6c66:	da00      	bge.n	6c6a <next_timeout+0x36>
    6c68:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6c6a:	4b07      	ldr	r3, [pc, #28]	; (6c88 <next_timeout+0x54>)
    6c6c:	691b      	ldr	r3, [r3, #16]
    6c6e:	b113      	cbz	r3, 6c76 <next_timeout+0x42>
    6c70:	4298      	cmp	r0, r3
    6c72:	bfa8      	it	ge
    6c74:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6c76:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    6c78:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6c7c:	e7f5      	b.n	6c6a <next_timeout+0x36>
    6c7e:	2000      	movs	r0, #0
    6c80:	e7f3      	b.n	6c6a <next_timeout+0x36>
    6c82:	bf00      	nop
    6c84:	200000d4 	.word	0x200000d4
    6c88:	200009e4 	.word	0x200009e4

00006c8c <remove_timeout>:
{
    6c8c:	b530      	push	{r4, r5, lr}
    6c8e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6c90:	b168      	cbz	r0, 6cae <remove_timeout+0x22>
    6c92:	4a0a      	ldr	r2, [pc, #40]	; (6cbc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    6c94:	6852      	ldr	r2, [r2, #4]
    6c96:	4290      	cmp	r0, r2
    6c98:	d009      	beq.n	6cae <remove_timeout+0x22>
	if (next(t) != NULL) {
    6c9a:	b143      	cbz	r3, 6cae <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6c9c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6ca0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6ca4:	1912      	adds	r2, r2, r4
    6ca6:	eb45 0101 	adc.w	r1, r5, r1
    6caa:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    6cae:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    6cb0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6cb2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6cb4:	2300      	movs	r3, #0
	node->prev = NULL;
    6cb6:	e9c0 3300 	strd	r3, r3, [r0]
}
    6cba:	bd30      	pop	{r4, r5, pc}
    6cbc:	200000d4 	.word	0x200000d4

00006cc0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    6cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cc4:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6cc6:	1c6b      	adds	r3, r5, #1
    6cc8:	bf08      	it	eq
    6cca:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6cce:	4682      	mov	sl, r0
    6cd0:	468b      	mov	fp, r1
    6cd2:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6cd4:	f000 80aa 	beq.w	6e2c <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    6cd8:	6803      	ldr	r3, [r0, #0]
    6cda:	b163      	cbz	r3, 6cf6 <z_add_timeout+0x36>
    6cdc:	4955      	ldr	r1, [pc, #340]	; (6e34 <z_add_timeout+0x174>)
    6cde:	4a56      	ldr	r2, [pc, #344]	; (6e38 <z_add_timeout+0x178>)
    6ce0:	4856      	ldr	r0, [pc, #344]	; (6e3c <z_add_timeout+0x17c>)
    6ce2:	235d      	movs	r3, #93	; 0x5d
    6ce4:	f000 fdb7 	bl	7856 <printk>
    6ce8:	4855      	ldr	r0, [pc, #340]	; (6e40 <z_add_timeout+0x180>)
    6cea:	f000 fdb4 	bl	7856 <printk>
    6cee:	4852      	ldr	r0, [pc, #328]	; (6e38 <z_add_timeout+0x178>)
    6cf0:	215d      	movs	r1, #93	; 0x5d
    6cf2:	f000 fcdc 	bl	76ae <assert_post_action>
	to->fn = fn;
    6cf6:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    6cfa:	f04f 0320 	mov.w	r3, #32
    6cfe:	f3ef 8b11 	mrs	fp, BASEPRI
    6d02:	f383 8812 	msr	BASEPRI_MAX, r3
    6d06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d0a:	484e      	ldr	r0, [pc, #312]	; (6e44 <z_add_timeout+0x184>)
    6d0c:	f7ff ff62 	bl	6bd4 <z_spin_lock_valid>
    6d10:	b968      	cbnz	r0, 6d2e <z_add_timeout+0x6e>
    6d12:	4a4d      	ldr	r2, [pc, #308]	; (6e48 <z_add_timeout+0x188>)
    6d14:	494d      	ldr	r1, [pc, #308]	; (6e4c <z_add_timeout+0x18c>)
    6d16:	4849      	ldr	r0, [pc, #292]	; (6e3c <z_add_timeout+0x17c>)
    6d18:	2381      	movs	r3, #129	; 0x81
    6d1a:	f000 fd9c 	bl	7856 <printk>
    6d1e:	4949      	ldr	r1, [pc, #292]	; (6e44 <z_add_timeout+0x184>)
    6d20:	484b      	ldr	r0, [pc, #300]	; (6e50 <z_add_timeout+0x190>)
    6d22:	f000 fd98 	bl	7856 <printk>
    6d26:	4848      	ldr	r0, [pc, #288]	; (6e48 <z_add_timeout+0x188>)
    6d28:	2181      	movs	r1, #129	; 0x81
    6d2a:	f000 fcc0 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    6d2e:	4845      	ldr	r0, [pc, #276]	; (6e44 <z_add_timeout+0x184>)
    6d30:	f7ff ff6e 	bl	6c10 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6d34:	f06f 0301 	mvn.w	r3, #1
    6d38:	ebb3 0804 	subs.w	r8, r3, r4
    6d3c:	f04f 32ff 	mov.w	r2, #4294967295
    6d40:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6d44:	f1b8 0f00 	cmp.w	r8, #0
    6d48:	f179 0100 	sbcs.w	r1, r9, #0
    6d4c:	db1c      	blt.n	6d88 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6d4e:	4841      	ldr	r0, [pc, #260]	; (6e54 <z_add_timeout+0x194>)
    6d50:	e9d0 1000 	ldrd	r1, r0, [r0]
    6d54:	1a5b      	subs	r3, r3, r1
    6d56:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    6d5a:	1b1e      	subs	r6, r3, r4
    6d5c:	eb62 0705 	sbc.w	r7, r2, r5
    6d60:	2e01      	cmp	r6, #1
    6d62:	f177 0300 	sbcs.w	r3, r7, #0
    6d66:	bfbc      	itt	lt
    6d68:	2601      	movlt	r6, #1
    6d6a:	2700      	movlt	r7, #0
    6d6c:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    6d70:	4a39      	ldr	r2, [pc, #228]	; (6e58 <z_add_timeout+0x198>)
    6d72:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d76:	4293      	cmp	r3, r2
    6d78:	d11d      	bne.n	6db6 <z_add_timeout+0xf6>
	node->prev = tail;
    6d7a:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    6d7e:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    6d82:	f8c2 a004 	str.w	sl, [r2, #4]
}
    6d86:	e02c      	b.n	6de2 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6d88:	f7ff ff4a 	bl	6c20 <elapsed>
    6d8c:	1c63      	adds	r3, r4, #1
    6d8e:	9300      	str	r3, [sp, #0]
    6d90:	f145 0300 	adc.w	r3, r5, #0
    6d94:	9301      	str	r3, [sp, #4]
    6d96:	e9dd 2300 	ldrd	r2, r3, [sp]
    6d9a:	1812      	adds	r2, r2, r0
    6d9c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    6da0:	e9ca 2304 	strd	r2, r3, [sl, #16]
    6da4:	e7e4      	b.n	6d70 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    6da6:	1be0      	subs	r0, r4, r7
    6da8:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    6dac:	42b3      	cmp	r3, r6
    6dae:	e9ca 0104 	strd	r0, r1, [sl, #16]
    6db2:	d0e2      	beq.n	6d7a <z_add_timeout+0xba>
    6db4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    6db6:	2b00      	cmp	r3, #0
    6db8:	d0df      	beq.n	6d7a <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    6dba:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    6dbe:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    6dc2:	42bc      	cmp	r4, r7
    6dc4:	eb75 0108 	sbcs.w	r1, r5, r8
    6dc8:	daed      	bge.n	6da6 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    6dca:	1b38      	subs	r0, r7, r4
    6dcc:	eb68 0105 	sbc.w	r1, r8, r5
    6dd0:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    6dd4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6dd6:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    6dda:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    6dde:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    6de2:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6de4:	4293      	cmp	r3, r2
    6de6:	d00b      	beq.n	6e00 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6de8:	459a      	cmp	sl, r3
    6dea:	d109      	bne.n	6e00 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6dec:	f7ff ff22 	bl	6c34 <next_timeout>

			if (next_time == 0 ||
    6df0:	b118      	cbz	r0, 6dfa <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    6df2:	4b1a      	ldr	r3, [pc, #104]	; (6e5c <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    6df4:	691b      	ldr	r3, [r3, #16]
    6df6:	4283      	cmp	r3, r0
    6df8:	d002      	beq.n	6e00 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    6dfa:	2100      	movs	r1, #0
    6dfc:	f7fd f912 	bl	4024 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e00:	4810      	ldr	r0, [pc, #64]	; (6e44 <z_add_timeout+0x184>)
    6e02:	f7ff fef5 	bl	6bf0 <z_spin_unlock_valid>
    6e06:	b968      	cbnz	r0, 6e24 <z_add_timeout+0x164>
    6e08:	4a0f      	ldr	r2, [pc, #60]	; (6e48 <z_add_timeout+0x188>)
    6e0a:	4915      	ldr	r1, [pc, #84]	; (6e60 <z_add_timeout+0x1a0>)
    6e0c:	480b      	ldr	r0, [pc, #44]	; (6e3c <z_add_timeout+0x17c>)
    6e0e:	23ac      	movs	r3, #172	; 0xac
    6e10:	f000 fd21 	bl	7856 <printk>
    6e14:	490b      	ldr	r1, [pc, #44]	; (6e44 <z_add_timeout+0x184>)
    6e16:	4813      	ldr	r0, [pc, #76]	; (6e64 <z_add_timeout+0x1a4>)
    6e18:	f000 fd1d 	bl	7856 <printk>
    6e1c:	480a      	ldr	r0, [pc, #40]	; (6e48 <z_add_timeout+0x188>)
    6e1e:	21ac      	movs	r1, #172	; 0xac
    6e20:	f000 fc45 	bl	76ae <assert_post_action>
	__asm__ volatile(
    6e24:	f38b 8811 	msr	BASEPRI, fp
    6e28:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6e2c:	b003      	add	sp, #12
    6e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e32:	bf00      	nop
    6e34:	000093a7 	.word	0x000093a7
    6e38:	00009383 	.word	0x00009383
    6e3c:	00008224 	.word	0x00008224
    6e40:	000090cd 	.word	0x000090cd
    6e44:	20000a28 	.word	0x20000a28
    6e48:	0000888c 	.word	0x0000888c
    6e4c:	000088de 	.word	0x000088de
    6e50:	000088f3 	.word	0x000088f3
    6e54:	200002c0 	.word	0x200002c0
    6e58:	200000d4 	.word	0x200000d4
    6e5c:	200009e4 	.word	0x200009e4
    6e60:	000088b2 	.word	0x000088b2
    6e64:	000088c9 	.word	0x000088c9

00006e68 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    6e68:	b538      	push	{r3, r4, r5, lr}
    6e6a:	4604      	mov	r4, r0
	__asm__ volatile(
    6e6c:	f04f 0320 	mov.w	r3, #32
    6e70:	f3ef 8511 	mrs	r5, BASEPRI
    6e74:	f383 8812 	msr	BASEPRI_MAX, r3
    6e78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e7c:	481a      	ldr	r0, [pc, #104]	; (6ee8 <z_abort_timeout+0x80>)
    6e7e:	f7ff fea9 	bl	6bd4 <z_spin_lock_valid>
    6e82:	b968      	cbnz	r0, 6ea0 <z_abort_timeout+0x38>
    6e84:	4a19      	ldr	r2, [pc, #100]	; (6eec <z_abort_timeout+0x84>)
    6e86:	491a      	ldr	r1, [pc, #104]	; (6ef0 <z_abort_timeout+0x88>)
    6e88:	481a      	ldr	r0, [pc, #104]	; (6ef4 <z_abort_timeout+0x8c>)
    6e8a:	2381      	movs	r3, #129	; 0x81
    6e8c:	f000 fce3 	bl	7856 <printk>
    6e90:	4915      	ldr	r1, [pc, #84]	; (6ee8 <z_abort_timeout+0x80>)
    6e92:	4819      	ldr	r0, [pc, #100]	; (6ef8 <z_abort_timeout+0x90>)
    6e94:	f000 fcdf 	bl	7856 <printk>
    6e98:	4814      	ldr	r0, [pc, #80]	; (6eec <z_abort_timeout+0x84>)
    6e9a:	2181      	movs	r1, #129	; 0x81
    6e9c:	f000 fc07 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    6ea0:	4811      	ldr	r0, [pc, #68]	; (6ee8 <z_abort_timeout+0x80>)
    6ea2:	f7ff feb5 	bl	6c10 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    6ea6:	6823      	ldr	r3, [r4, #0]
    6ea8:	b1db      	cbz	r3, 6ee2 <z_abort_timeout+0x7a>
			remove_timeout(to);
    6eaa:	4620      	mov	r0, r4
    6eac:	f7ff feee 	bl	6c8c <remove_timeout>
			ret = 0;
    6eb0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6eb2:	480d      	ldr	r0, [pc, #52]	; (6ee8 <z_abort_timeout+0x80>)
    6eb4:	f7ff fe9c 	bl	6bf0 <z_spin_unlock_valid>
    6eb8:	b968      	cbnz	r0, 6ed6 <z_abort_timeout+0x6e>
    6eba:	4a0c      	ldr	r2, [pc, #48]	; (6eec <z_abort_timeout+0x84>)
    6ebc:	490f      	ldr	r1, [pc, #60]	; (6efc <z_abort_timeout+0x94>)
    6ebe:	480d      	ldr	r0, [pc, #52]	; (6ef4 <z_abort_timeout+0x8c>)
    6ec0:	23ac      	movs	r3, #172	; 0xac
    6ec2:	f000 fcc8 	bl	7856 <printk>
    6ec6:	4908      	ldr	r1, [pc, #32]	; (6ee8 <z_abort_timeout+0x80>)
    6ec8:	480d      	ldr	r0, [pc, #52]	; (6f00 <z_abort_timeout+0x98>)
    6eca:	f000 fcc4 	bl	7856 <printk>
    6ece:	4807      	ldr	r0, [pc, #28]	; (6eec <z_abort_timeout+0x84>)
    6ed0:	21ac      	movs	r1, #172	; 0xac
    6ed2:	f000 fbec 	bl	76ae <assert_post_action>
	__asm__ volatile(
    6ed6:	f385 8811 	msr	BASEPRI, r5
    6eda:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6ede:	4620      	mov	r0, r4
    6ee0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    6ee2:	f06f 0415 	mvn.w	r4, #21
    6ee6:	e7e4      	b.n	6eb2 <z_abort_timeout+0x4a>
    6ee8:	20000a28 	.word	0x20000a28
    6eec:	0000888c 	.word	0x0000888c
    6ef0:	000088de 	.word	0x000088de
    6ef4:	00008224 	.word	0x00008224
    6ef8:	000088f3 	.word	0x000088f3
    6efc:	000088b2 	.word	0x000088b2
    6f00:	000088c9 	.word	0x000088c9

00006f04 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    6f04:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6f06:	f04f 0320 	mov.w	r3, #32
    6f0a:	f3ef 8511 	mrs	r5, BASEPRI
    6f0e:	f383 8812 	msr	BASEPRI_MAX, r3
    6f12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f16:	4818      	ldr	r0, [pc, #96]	; (6f78 <z_get_next_timeout_expiry+0x74>)
    6f18:	f7ff fe5c 	bl	6bd4 <z_spin_lock_valid>
    6f1c:	b968      	cbnz	r0, 6f3a <z_get_next_timeout_expiry+0x36>
    6f1e:	4a17      	ldr	r2, [pc, #92]	; (6f7c <z_get_next_timeout_expiry+0x78>)
    6f20:	4917      	ldr	r1, [pc, #92]	; (6f80 <z_get_next_timeout_expiry+0x7c>)
    6f22:	4818      	ldr	r0, [pc, #96]	; (6f84 <z_get_next_timeout_expiry+0x80>)
    6f24:	2381      	movs	r3, #129	; 0x81
    6f26:	f000 fc96 	bl	7856 <printk>
    6f2a:	4913      	ldr	r1, [pc, #76]	; (6f78 <z_get_next_timeout_expiry+0x74>)
    6f2c:	4816      	ldr	r0, [pc, #88]	; (6f88 <z_get_next_timeout_expiry+0x84>)
    6f2e:	f000 fc92 	bl	7856 <printk>
    6f32:	4812      	ldr	r0, [pc, #72]	; (6f7c <z_get_next_timeout_expiry+0x78>)
    6f34:	2181      	movs	r1, #129	; 0x81
    6f36:	f000 fbba 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    6f3a:	480f      	ldr	r0, [pc, #60]	; (6f78 <z_get_next_timeout_expiry+0x74>)
    6f3c:	f7ff fe68 	bl	6c10 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    6f40:	f7ff fe78 	bl	6c34 <next_timeout>
    6f44:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f46:	480c      	ldr	r0, [pc, #48]	; (6f78 <z_get_next_timeout_expiry+0x74>)
    6f48:	f7ff fe52 	bl	6bf0 <z_spin_unlock_valid>
    6f4c:	b968      	cbnz	r0, 6f6a <z_get_next_timeout_expiry+0x66>
    6f4e:	4a0b      	ldr	r2, [pc, #44]	; (6f7c <z_get_next_timeout_expiry+0x78>)
    6f50:	490e      	ldr	r1, [pc, #56]	; (6f8c <z_get_next_timeout_expiry+0x88>)
    6f52:	480c      	ldr	r0, [pc, #48]	; (6f84 <z_get_next_timeout_expiry+0x80>)
    6f54:	23ac      	movs	r3, #172	; 0xac
    6f56:	f000 fc7e 	bl	7856 <printk>
    6f5a:	4907      	ldr	r1, [pc, #28]	; (6f78 <z_get_next_timeout_expiry+0x74>)
    6f5c:	480c      	ldr	r0, [pc, #48]	; (6f90 <z_get_next_timeout_expiry+0x8c>)
    6f5e:	f000 fc7a 	bl	7856 <printk>
    6f62:	4806      	ldr	r0, [pc, #24]	; (6f7c <z_get_next_timeout_expiry+0x78>)
    6f64:	21ac      	movs	r1, #172	; 0xac
    6f66:	f000 fba2 	bl	76ae <assert_post_action>
	__asm__ volatile(
    6f6a:	f385 8811 	msr	BASEPRI, r5
    6f6e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    6f72:	4620      	mov	r0, r4
    6f74:	bd38      	pop	{r3, r4, r5, pc}
    6f76:	bf00      	nop
    6f78:	20000a28 	.word	0x20000a28
    6f7c:	0000888c 	.word	0x0000888c
    6f80:	000088de 	.word	0x000088de
    6f84:	00008224 	.word	0x00008224
    6f88:	000088f3 	.word	0x000088f3
    6f8c:	000088b2 	.word	0x000088b2
    6f90:	000088c9 	.word	0x000088c9

00006f94 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    6f94:	b570      	push	{r4, r5, r6, lr}
    6f96:	4604      	mov	r4, r0
    6f98:	460d      	mov	r5, r1
	__asm__ volatile(
    6f9a:	f04f 0320 	mov.w	r3, #32
    6f9e:	f3ef 8611 	mrs	r6, BASEPRI
    6fa2:	f383 8812 	msr	BASEPRI_MAX, r3
    6fa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6faa:	481b      	ldr	r0, [pc, #108]	; (7018 <z_set_timeout_expiry+0x84>)
    6fac:	f7ff fe12 	bl	6bd4 <z_spin_lock_valid>
    6fb0:	b968      	cbnz	r0, 6fce <z_set_timeout_expiry+0x3a>
    6fb2:	4a1a      	ldr	r2, [pc, #104]	; (701c <z_set_timeout_expiry+0x88>)
    6fb4:	491a      	ldr	r1, [pc, #104]	; (7020 <z_set_timeout_expiry+0x8c>)
    6fb6:	481b      	ldr	r0, [pc, #108]	; (7024 <z_set_timeout_expiry+0x90>)
    6fb8:	2381      	movs	r3, #129	; 0x81
    6fba:	f000 fc4c 	bl	7856 <printk>
    6fbe:	4916      	ldr	r1, [pc, #88]	; (7018 <z_set_timeout_expiry+0x84>)
    6fc0:	4819      	ldr	r0, [pc, #100]	; (7028 <z_set_timeout_expiry+0x94>)
    6fc2:	f000 fc48 	bl	7856 <printk>
    6fc6:	4815      	ldr	r0, [pc, #84]	; (701c <z_set_timeout_expiry+0x88>)
    6fc8:	2181      	movs	r1, #129	; 0x81
    6fca:	f000 fb70 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    6fce:	4812      	ldr	r0, [pc, #72]	; (7018 <z_set_timeout_expiry+0x84>)
    6fd0:	f7ff fe1e 	bl	6c10 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    6fd4:	f7ff fe2e 	bl	6c34 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6fd8:	2801      	cmp	r0, #1
    6fda:	dd05      	ble.n	6fe8 <z_set_timeout_expiry+0x54>
    6fdc:	42a0      	cmp	r0, r4
    6fde:	db03      	blt.n	6fe8 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6fe0:	4629      	mov	r1, r5
    6fe2:	4620      	mov	r0, r4
    6fe4:	f7fd f81e 	bl	4024 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fe8:	480b      	ldr	r0, [pc, #44]	; (7018 <z_set_timeout_expiry+0x84>)
    6fea:	f7ff fe01 	bl	6bf0 <z_spin_unlock_valid>
    6fee:	b968      	cbnz	r0, 700c <z_set_timeout_expiry+0x78>
    6ff0:	4a0a      	ldr	r2, [pc, #40]	; (701c <z_set_timeout_expiry+0x88>)
    6ff2:	490e      	ldr	r1, [pc, #56]	; (702c <z_set_timeout_expiry+0x98>)
    6ff4:	480b      	ldr	r0, [pc, #44]	; (7024 <z_set_timeout_expiry+0x90>)
    6ff6:	23ac      	movs	r3, #172	; 0xac
    6ff8:	f000 fc2d 	bl	7856 <printk>
    6ffc:	4906      	ldr	r1, [pc, #24]	; (7018 <z_set_timeout_expiry+0x84>)
    6ffe:	480c      	ldr	r0, [pc, #48]	; (7030 <z_set_timeout_expiry+0x9c>)
    7000:	f000 fc29 	bl	7856 <printk>
    7004:	4805      	ldr	r0, [pc, #20]	; (701c <z_set_timeout_expiry+0x88>)
    7006:	21ac      	movs	r1, #172	; 0xac
    7008:	f000 fb51 	bl	76ae <assert_post_action>
	__asm__ volatile(
    700c:	f386 8811 	msr	BASEPRI, r6
    7010:	f3bf 8f6f 	isb	sy
		}
	}
}
    7014:	bd70      	pop	{r4, r5, r6, pc}
    7016:	bf00      	nop
    7018:	20000a28 	.word	0x20000a28
    701c:	0000888c 	.word	0x0000888c
    7020:	000088de 	.word	0x000088de
    7024:	00008224 	.word	0x00008224
    7028:	000088f3 	.word	0x000088f3
    702c:	000088b2 	.word	0x000088b2
    7030:	000088c9 	.word	0x000088c9

00007034 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7038:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    703a:	f7fe fd41 	bl	5ac0 <z_time_slice>
	__asm__ volatile(
    703e:	f04f 0320 	mov.w	r3, #32
    7042:	f3ef 8711 	mrs	r7, BASEPRI
    7046:	f383 8812 	msr	BASEPRI_MAX, r3
    704a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    704e:	4855      	ldr	r0, [pc, #340]	; (71a4 <sys_clock_announce+0x170>)
    7050:	f7ff fdc0 	bl	6bd4 <z_spin_lock_valid>
    7054:	b968      	cbnz	r0, 7072 <sys_clock_announce+0x3e>
    7056:	4a54      	ldr	r2, [pc, #336]	; (71a8 <sys_clock_announce+0x174>)
    7058:	4954      	ldr	r1, [pc, #336]	; (71ac <sys_clock_announce+0x178>)
    705a:	4855      	ldr	r0, [pc, #340]	; (71b0 <sys_clock_announce+0x17c>)
    705c:	2381      	movs	r3, #129	; 0x81
    705e:	f000 fbfa 	bl	7856 <printk>
    7062:	4950      	ldr	r1, [pc, #320]	; (71a4 <sys_clock_announce+0x170>)
    7064:	4853      	ldr	r0, [pc, #332]	; (71b4 <sys_clock_announce+0x180>)
    7066:	f000 fbf6 	bl	7856 <printk>
    706a:	484f      	ldr	r0, [pc, #316]	; (71a8 <sys_clock_announce+0x174>)
    706c:	2181      	movs	r1, #129	; 0x81
    706e:	f000 fb1e 	bl	76ae <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7072:	4d51      	ldr	r5, [pc, #324]	; (71b8 <sys_clock_announce+0x184>)
    7074:	4e51      	ldr	r6, [pc, #324]	; (71bc <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    7076:	484b      	ldr	r0, [pc, #300]	; (71a4 <sys_clock_announce+0x170>)
	return list->head == list;
    7078:	f8df a14c 	ldr.w	sl, [pc, #332]	; 71c8 <sys_clock_announce+0x194>
    707c:	f7ff fdc8 	bl	6c10 <z_spin_lock_set_owner>
    7080:	46b3      	mov	fp, r6
    7082:	602c      	str	r4, [r5, #0]
    7084:	e9d6 2300 	ldrd	r2, r3, [r6]
    7088:	f8d5 c000 	ldr.w	ip, [r5]
    708c:	f8da 4000 	ldr.w	r4, [sl]
    7090:	e9cd 2300 	strd	r2, r3, [sp]
    7094:	4662      	mov	r2, ip
    7096:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7098:	4554      	cmp	r4, sl
    709a:	46e0      	mov	r8, ip
    709c:	4699      	mov	r9, r3
    709e:	d00c      	beq.n	70ba <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    70a0:	b15c      	cbz	r4, 70ba <sys_clock_announce+0x86>
    70a2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    70a6:	458c      	cmp	ip, r1
    70a8:	eb79 0302 	sbcs.w	r3, r9, r2
    70ac:	da2e      	bge.n	710c <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    70ae:	ebb1 000c 	subs.w	r0, r1, ip
    70b2:	eb62 0109 	sbc.w	r1, r2, r9
    70b6:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    70ba:	9a00      	ldr	r2, [sp, #0]
    70bc:	9901      	ldr	r1, [sp, #4]
    70be:	eb18 0202 	adds.w	r2, r8, r2
    70c2:	464b      	mov	r3, r9
    70c4:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    70c8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    70ca:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    70ce:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    70d0:	f7ff fdb0 	bl	6c34 <next_timeout>
    70d4:	4621      	mov	r1, r4
    70d6:	f7fc ffa5 	bl	4024 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    70da:	4832      	ldr	r0, [pc, #200]	; (71a4 <sys_clock_announce+0x170>)
    70dc:	f7ff fd88 	bl	6bf0 <z_spin_unlock_valid>
    70e0:	b968      	cbnz	r0, 70fe <sys_clock_announce+0xca>
    70e2:	4a31      	ldr	r2, [pc, #196]	; (71a8 <sys_clock_announce+0x174>)
    70e4:	4936      	ldr	r1, [pc, #216]	; (71c0 <sys_clock_announce+0x18c>)
    70e6:	4832      	ldr	r0, [pc, #200]	; (71b0 <sys_clock_announce+0x17c>)
    70e8:	23ac      	movs	r3, #172	; 0xac
    70ea:	f000 fbb4 	bl	7856 <printk>
    70ee:	492d      	ldr	r1, [pc, #180]	; (71a4 <sys_clock_announce+0x170>)
    70f0:	4834      	ldr	r0, [pc, #208]	; (71c4 <sys_clock_announce+0x190>)
    70f2:	f000 fbb0 	bl	7856 <printk>
    70f6:	482c      	ldr	r0, [pc, #176]	; (71a8 <sys_clock_announce+0x174>)
    70f8:	21ac      	movs	r1, #172	; 0xac
    70fa:	f000 fad8 	bl	76ae <assert_post_action>
	__asm__ volatile(
    70fe:	f387 8811 	msr	BASEPRI, r7
    7102:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7106:	b003      	add	sp, #12
    7108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    710c:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    7110:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    7114:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    7118:	f04f 0200 	mov.w	r2, #0
    711c:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    7120:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    7124:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    7126:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    712a:	4620      	mov	r0, r4
		curr_tick += dt;
    712c:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    7130:	f7ff fdac 	bl	6c8c <remove_timeout>
    7134:	481b      	ldr	r0, [pc, #108]	; (71a4 <sys_clock_announce+0x170>)
    7136:	f7ff fd5b 	bl	6bf0 <z_spin_unlock_valid>
    713a:	b968      	cbnz	r0, 7158 <sys_clock_announce+0x124>
    713c:	4a1a      	ldr	r2, [pc, #104]	; (71a8 <sys_clock_announce+0x174>)
    713e:	4920      	ldr	r1, [pc, #128]	; (71c0 <sys_clock_announce+0x18c>)
    7140:	481b      	ldr	r0, [pc, #108]	; (71b0 <sys_clock_announce+0x17c>)
    7142:	23ac      	movs	r3, #172	; 0xac
    7144:	f000 fb87 	bl	7856 <printk>
    7148:	4916      	ldr	r1, [pc, #88]	; (71a4 <sys_clock_announce+0x170>)
    714a:	481e      	ldr	r0, [pc, #120]	; (71c4 <sys_clock_announce+0x190>)
    714c:	f000 fb83 	bl	7856 <printk>
    7150:	4815      	ldr	r0, [pc, #84]	; (71a8 <sys_clock_announce+0x174>)
    7152:	21ac      	movs	r1, #172	; 0xac
    7154:	f000 faab 	bl	76ae <assert_post_action>
    7158:	f387 8811 	msr	BASEPRI, r7
    715c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7160:	68a3      	ldr	r3, [r4, #8]
    7162:	4620      	mov	r0, r4
    7164:	4798      	blx	r3
	__asm__ volatile(
    7166:	f04f 0320 	mov.w	r3, #32
    716a:	f3ef 8711 	mrs	r7, BASEPRI
    716e:	f383 8812 	msr	BASEPRI_MAX, r3
    7172:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7176:	480b      	ldr	r0, [pc, #44]	; (71a4 <sys_clock_announce+0x170>)
    7178:	f7ff fd2c 	bl	6bd4 <z_spin_lock_valid>
    717c:	b968      	cbnz	r0, 719a <sys_clock_announce+0x166>
    717e:	4a0a      	ldr	r2, [pc, #40]	; (71a8 <sys_clock_announce+0x174>)
    7180:	490a      	ldr	r1, [pc, #40]	; (71ac <sys_clock_announce+0x178>)
    7182:	480b      	ldr	r0, [pc, #44]	; (71b0 <sys_clock_announce+0x17c>)
    7184:	2381      	movs	r3, #129	; 0x81
    7186:	f000 fb66 	bl	7856 <printk>
    718a:	4906      	ldr	r1, [pc, #24]	; (71a4 <sys_clock_announce+0x170>)
    718c:	4809      	ldr	r0, [pc, #36]	; (71b4 <sys_clock_announce+0x180>)
    718e:	f000 fb62 	bl	7856 <printk>
    7192:	4805      	ldr	r0, [pc, #20]	; (71a8 <sys_clock_announce+0x174>)
    7194:	2181      	movs	r1, #129	; 0x81
    7196:	f000 fa8a 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    719a:	4802      	ldr	r0, [pc, #8]	; (71a4 <sys_clock_announce+0x170>)
    719c:	f7ff fd38 	bl	6c10 <z_spin_lock_set_owner>
	return k;
    71a0:	e770      	b.n	7084 <sys_clock_announce+0x50>
    71a2:	bf00      	nop
    71a4:	20000a28 	.word	0x20000a28
    71a8:	0000888c 	.word	0x0000888c
    71ac:	000088de 	.word	0x000088de
    71b0:	00008224 	.word	0x00008224
    71b4:	000088f3 	.word	0x000088f3
    71b8:	20000a24 	.word	0x20000a24
    71bc:	200002c0 	.word	0x200002c0
    71c0:	000088b2 	.word	0x000088b2
    71c4:	000088c9 	.word	0x000088c9
    71c8:	200000d4 	.word	0x200000d4

000071cc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    71cc:	b570      	push	{r4, r5, r6, lr}
    71ce:	f04f 0320 	mov.w	r3, #32
    71d2:	f3ef 8611 	mrs	r6, BASEPRI
    71d6:	f383 8812 	msr	BASEPRI_MAX, r3
    71da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    71de:	481b      	ldr	r0, [pc, #108]	; (724c <sys_clock_tick_get+0x80>)
    71e0:	f7ff fcf8 	bl	6bd4 <z_spin_lock_valid>
    71e4:	b968      	cbnz	r0, 7202 <sys_clock_tick_get+0x36>
    71e6:	4a1a      	ldr	r2, [pc, #104]	; (7250 <sys_clock_tick_get+0x84>)
    71e8:	491a      	ldr	r1, [pc, #104]	; (7254 <sys_clock_tick_get+0x88>)
    71ea:	481b      	ldr	r0, [pc, #108]	; (7258 <sys_clock_tick_get+0x8c>)
    71ec:	2381      	movs	r3, #129	; 0x81
    71ee:	f000 fb32 	bl	7856 <printk>
    71f2:	4916      	ldr	r1, [pc, #88]	; (724c <sys_clock_tick_get+0x80>)
    71f4:	4819      	ldr	r0, [pc, #100]	; (725c <sys_clock_tick_get+0x90>)
    71f6:	f000 fb2e 	bl	7856 <printk>
    71fa:	4815      	ldr	r0, [pc, #84]	; (7250 <sys_clock_tick_get+0x84>)
    71fc:	2181      	movs	r1, #129	; 0x81
    71fe:	f000 fa56 	bl	76ae <assert_post_action>
	z_spin_lock_set_owner(l);
    7202:	4812      	ldr	r0, [pc, #72]	; (724c <sys_clock_tick_get+0x80>)
    7204:	f7ff fd04 	bl	6c10 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    7208:	f7fc ff3c 	bl	4084 <sys_clock_elapsed>
    720c:	4b14      	ldr	r3, [pc, #80]	; (7260 <sys_clock_tick_get+0x94>)
    720e:	e9d3 4500 	ldrd	r4, r5, [r3]
    7212:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7214:	480d      	ldr	r0, [pc, #52]	; (724c <sys_clock_tick_get+0x80>)
    7216:	f145 0500 	adc.w	r5, r5, #0
    721a:	f7ff fce9 	bl	6bf0 <z_spin_unlock_valid>
    721e:	b968      	cbnz	r0, 723c <sys_clock_tick_get+0x70>
    7220:	4a0b      	ldr	r2, [pc, #44]	; (7250 <sys_clock_tick_get+0x84>)
    7222:	4910      	ldr	r1, [pc, #64]	; (7264 <sys_clock_tick_get+0x98>)
    7224:	480c      	ldr	r0, [pc, #48]	; (7258 <sys_clock_tick_get+0x8c>)
    7226:	23ac      	movs	r3, #172	; 0xac
    7228:	f000 fb15 	bl	7856 <printk>
    722c:	4907      	ldr	r1, [pc, #28]	; (724c <sys_clock_tick_get+0x80>)
    722e:	480e      	ldr	r0, [pc, #56]	; (7268 <sys_clock_tick_get+0x9c>)
    7230:	f000 fb11 	bl	7856 <printk>
    7234:	4806      	ldr	r0, [pc, #24]	; (7250 <sys_clock_tick_get+0x84>)
    7236:	21ac      	movs	r1, #172	; 0xac
    7238:	f000 fa39 	bl	76ae <assert_post_action>
	__asm__ volatile(
    723c:	f386 8811 	msr	BASEPRI, r6
    7240:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    7244:	4620      	mov	r0, r4
    7246:	4629      	mov	r1, r5
    7248:	bd70      	pop	{r4, r5, r6, pc}
    724a:	bf00      	nop
    724c:	20000a28 	.word	0x20000a28
    7250:	0000888c 	.word	0x0000888c
    7254:	000088de 	.word	0x000088de
    7258:	00008224 	.word	0x00008224
    725c:	000088f3 	.word	0x000088f3
    7260:	200002c0 	.word	0x200002c0
    7264:	000088b2 	.word	0x000088b2
    7268:	000088c9 	.word	0x000088c9

0000726c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    726c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    726e:	4806      	ldr	r0, [pc, #24]	; (7288 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    7270:	4a06      	ldr	r2, [pc, #24]	; (728c <z_data_copy+0x20>)
    7272:	4907      	ldr	r1, [pc, #28]	; (7290 <z_data_copy+0x24>)
    7274:	1a12      	subs	r2, r2, r0
    7276:	f000 fb44 	bl	7902 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    727a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    727e:	4a05      	ldr	r2, [pc, #20]	; (7294 <z_data_copy+0x28>)
    7280:	4905      	ldr	r1, [pc, #20]	; (7298 <z_data_copy+0x2c>)
    7282:	4806      	ldr	r0, [pc, #24]	; (729c <z_data_copy+0x30>)
    7284:	f000 bb3d 	b.w	7902 <memcpy>
    7288:	20000000 	.word	0x20000000
    728c:	200001a0 	.word	0x200001a0
    7290:	00009400 	.word	0x00009400
    7294:	00000000 	.word	0x00000000
    7298:	00009400 	.word	0x00009400
    729c:	20000000 	.word	0x20000000

000072a0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    72a0:	4a02      	ldr	r2, [pc, #8]	; (72ac <boot_banner+0xc>)
    72a2:	4903      	ldr	r1, [pc, #12]	; (72b0 <boot_banner+0x10>)
    72a4:	4803      	ldr	r0, [pc, #12]	; (72b4 <boot_banner+0x14>)
    72a6:	f000 bad6 	b.w	7856 <printk>
    72aa:	bf00      	nop
    72ac:	000090cf 	.word	0x000090cf
    72b0:	000093c7 	.word	0x000093c7
    72b4:	000093d6 	.word	0x000093d6

000072b8 <nrf_cc3xx_platform_init_no_rng>:
    72b8:	b510      	push	{r4, lr}
    72ba:	4c0a      	ldr	r4, [pc, #40]	; (72e4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    72bc:	6823      	ldr	r3, [r4, #0]
    72be:	b11b      	cbz	r3, 72c8 <nrf_cc3xx_platform_init_no_rng+0x10>
    72c0:	2301      	movs	r3, #1
    72c2:	6023      	str	r3, [r4, #0]
    72c4:	2000      	movs	r0, #0
    72c6:	bd10      	pop	{r4, pc}
    72c8:	f000 f8d6 	bl	7478 <CC_LibInitNoRng>
    72cc:	2800      	cmp	r0, #0
    72ce:	d0f7      	beq.n	72c0 <nrf_cc3xx_platform_init_no_rng+0x8>
    72d0:	3801      	subs	r0, #1
    72d2:	2806      	cmp	r0, #6
    72d4:	d803      	bhi.n	72de <nrf_cc3xx_platform_init_no_rng+0x26>
    72d6:	4b04      	ldr	r3, [pc, #16]	; (72e8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    72d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    72dc:	bd10      	pop	{r4, pc}
    72de:	4803      	ldr	r0, [pc, #12]	; (72ec <nrf_cc3xx_platform_init_no_rng+0x34>)
    72e0:	bd10      	pop	{r4, pc}
    72e2:	bf00      	nop
    72e4:	20000a2c 	.word	0x20000a2c
    72e8:	00008134 	.word	0x00008134
    72ec:	ffff8ffe 	.word	0xffff8ffe

000072f0 <nrf_cc3xx_platform_abort>:
    72f0:	f3bf 8f4f 	dsb	sy
    72f4:	4905      	ldr	r1, [pc, #20]	; (730c <nrf_cc3xx_platform_abort+0x1c>)
    72f6:	4b06      	ldr	r3, [pc, #24]	; (7310 <nrf_cc3xx_platform_abort+0x20>)
    72f8:	68ca      	ldr	r2, [r1, #12]
    72fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    72fe:	4313      	orrs	r3, r2
    7300:	60cb      	str	r3, [r1, #12]
    7302:	f3bf 8f4f 	dsb	sy
    7306:	bf00      	nop
    7308:	e7fd      	b.n	7306 <nrf_cc3xx_platform_abort+0x16>
    730a:	bf00      	nop
    730c:	e000ed00 	.word	0xe000ed00
    7310:	05fa0004 	.word	0x05fa0004

00007314 <CC_PalAbort>:
    7314:	b4f0      	push	{r4, r5, r6, r7}
    7316:	4f09      	ldr	r7, [pc, #36]	; (733c <CC_PalAbort+0x28>)
    7318:	4e09      	ldr	r6, [pc, #36]	; (7340 <CC_PalAbort+0x2c>)
    731a:	4c0a      	ldr	r4, [pc, #40]	; (7344 <CC_PalAbort+0x30>)
    731c:	4a0a      	ldr	r2, [pc, #40]	; (7348 <CC_PalAbort+0x34>)
    731e:	4d0b      	ldr	r5, [pc, #44]	; (734c <CC_PalAbort+0x38>)
    7320:	490b      	ldr	r1, [pc, #44]	; (7350 <CC_PalAbort+0x3c>)
    7322:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    7326:	603b      	str	r3, [r7, #0]
    7328:	6852      	ldr	r2, [r2, #4]
    732a:	6033      	str	r3, [r6, #0]
    732c:	6023      	str	r3, [r4, #0]
    732e:	2400      	movs	r4, #0
    7330:	602b      	str	r3, [r5, #0]
    7332:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    7336:	bcf0      	pop	{r4, r5, r6, r7}
    7338:	4710      	bx	r2
    733a:	bf00      	nop
    733c:	5002b400 	.word	0x5002b400
    7340:	5002b404 	.word	0x5002b404
    7344:	5002b408 	.word	0x5002b408
    7348:	200000dc 	.word	0x200000dc
    734c:	5002b40c 	.word	0x5002b40c
    7350:	5002a000 	.word	0x5002a000

00007354 <nrf_cc3xx_platform_set_abort>:
    7354:	e9d0 1200 	ldrd	r1, r2, [r0]
    7358:	4b01      	ldr	r3, [pc, #4]	; (7360 <nrf_cc3xx_platform_set_abort+0xc>)
    735a:	e9c3 1200 	strd	r1, r2, [r3]
    735e:	4770      	bx	lr
    7360:	200000dc 	.word	0x200000dc

00007364 <mutex_free>:
    7364:	b510      	push	{r4, lr}
    7366:	4604      	mov	r4, r0
    7368:	b130      	cbz	r0, 7378 <mutex_free+0x14>
    736a:	6863      	ldr	r3, [r4, #4]
    736c:	06db      	lsls	r3, r3, #27
    736e:	d502      	bpl.n	7376 <mutex_free+0x12>
    7370:	2300      	movs	r3, #0
    7372:	6023      	str	r3, [r4, #0]
    7374:	6063      	str	r3, [r4, #4]
    7376:	bd10      	pop	{r4, pc}
    7378:	4b02      	ldr	r3, [pc, #8]	; (7384 <mutex_free+0x20>)
    737a:	4803      	ldr	r0, [pc, #12]	; (7388 <mutex_free+0x24>)
    737c:	685b      	ldr	r3, [r3, #4]
    737e:	4798      	blx	r3
    7380:	e7f3      	b.n	736a <mutex_free+0x6>
    7382:	bf00      	nop
    7384:	200000dc 	.word	0x200000dc
    7388:	00008150 	.word	0x00008150

0000738c <mutex_unlock>:
    738c:	b168      	cbz	r0, 73aa <mutex_unlock+0x1e>
    738e:	6843      	ldr	r3, [r0, #4]
    7390:	b13b      	cbz	r3, 73a2 <mutex_unlock+0x16>
    7392:	06db      	lsls	r3, r3, #27
    7394:	d507      	bpl.n	73a6 <mutex_unlock+0x1a>
    7396:	f3bf 8f5f 	dmb	sy
    739a:	2300      	movs	r3, #0
    739c:	6003      	str	r3, [r0, #0]
    739e:	4618      	mov	r0, r3
    73a0:	4770      	bx	lr
    73a2:	4803      	ldr	r0, [pc, #12]	; (73b0 <mutex_unlock+0x24>)
    73a4:	4770      	bx	lr
    73a6:	4803      	ldr	r0, [pc, #12]	; (73b4 <mutex_unlock+0x28>)
    73a8:	4770      	bx	lr
    73aa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    73ae:	4770      	bx	lr
    73b0:	ffff8fea 	.word	0xffff8fea
    73b4:	ffff8fe9 	.word	0xffff8fe9

000073b8 <mutex_init>:
    73b8:	b510      	push	{r4, lr}
    73ba:	4604      	mov	r4, r0
    73bc:	b120      	cbz	r0, 73c8 <mutex_init+0x10>
    73be:	2200      	movs	r2, #0
    73c0:	2311      	movs	r3, #17
    73c2:	6022      	str	r2, [r4, #0]
    73c4:	6063      	str	r3, [r4, #4]
    73c6:	bd10      	pop	{r4, pc}
    73c8:	4801      	ldr	r0, [pc, #4]	; (73d0 <mutex_init+0x18>)
    73ca:	f7ff ffa3 	bl	7314 <CC_PalAbort>
    73ce:	e7f6      	b.n	73be <mutex_init+0x6>
    73d0:	00008178 	.word	0x00008178

000073d4 <mutex_lock>:
    73d4:	b1c0      	cbz	r0, 7408 <mutex_lock+0x34>
    73d6:	6843      	ldr	r3, [r0, #4]
    73d8:	b1a3      	cbz	r3, 7404 <mutex_lock+0x30>
    73da:	06db      	lsls	r3, r3, #27
    73dc:	d510      	bpl.n	7400 <mutex_lock+0x2c>
    73de:	2201      	movs	r2, #1
    73e0:	f3bf 8f5b 	dmb	ish
    73e4:	e850 3f00 	ldrex	r3, [r0]
    73e8:	e840 2100 	strex	r1, r2, [r0]
    73ec:	2900      	cmp	r1, #0
    73ee:	d1f9      	bne.n	73e4 <mutex_lock+0x10>
    73f0:	f3bf 8f5b 	dmb	ish
    73f4:	2b01      	cmp	r3, #1
    73f6:	d0f3      	beq.n	73e0 <mutex_lock+0xc>
    73f8:	f3bf 8f5f 	dmb	sy
    73fc:	2000      	movs	r0, #0
    73fe:	4770      	bx	lr
    7400:	4803      	ldr	r0, [pc, #12]	; (7410 <mutex_lock+0x3c>)
    7402:	4770      	bx	lr
    7404:	4803      	ldr	r0, [pc, #12]	; (7414 <mutex_lock+0x40>)
    7406:	4770      	bx	lr
    7408:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    740c:	4770      	bx	lr
    740e:	bf00      	nop
    7410:	ffff8fe9 	.word	0xffff8fe9
    7414:	ffff8fea 	.word	0xffff8fea

00007418 <nrf_cc3xx_platform_set_mutexes>:
    7418:	b570      	push	{r4, r5, r6, lr}
    741a:	e9d0 2300 	ldrd	r2, r3, [r0]
    741e:	4c13      	ldr	r4, [pc, #76]	; (746c <nrf_cc3xx_platform_set_mutexes+0x54>)
    7420:	4d13      	ldr	r5, [pc, #76]	; (7470 <nrf_cc3xx_platform_set_mutexes+0x58>)
    7422:	e9c4 2300 	strd	r2, r3, [r4]
    7426:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    742a:	e9c4 6302 	strd	r6, r3, [r4, #8]
    742e:	4b11      	ldr	r3, [pc, #68]	; (7474 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    7430:	6808      	ldr	r0, [r1, #0]
    7432:	6018      	str	r0, [r3, #0]
    7434:	6848      	ldr	r0, [r1, #4]
    7436:	6058      	str	r0, [r3, #4]
    7438:	6888      	ldr	r0, [r1, #8]
    743a:	6098      	str	r0, [r3, #8]
    743c:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    7440:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    7444:	60de      	str	r6, [r3, #12]
    7446:	6118      	str	r0, [r3, #16]
    7448:	06cb      	lsls	r3, r1, #27
    744a:	d50d      	bpl.n	7468 <nrf_cc3xx_platform_set_mutexes+0x50>
    744c:	2300      	movs	r3, #0
    744e:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    7452:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    7456:	f505 7088 	add.w	r0, r5, #272	; 0x110
    745a:	4790      	blx	r2
    745c:	6823      	ldr	r3, [r4, #0]
    745e:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    7462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7466:	4718      	bx	r3
    7468:	bd70      	pop	{r4, r5, r6, pc}
    746a:	bf00      	nop
    746c:	200000ec 	.word	0x200000ec
    7470:	20000e58 	.word	0x20000e58
    7474:	200000fc 	.word	0x200000fc

00007478 <CC_LibInitNoRng>:
    7478:	b510      	push	{r4, lr}
    747a:	f000 f833 	bl	74e4 <CC_HalInit>
    747e:	b120      	cbz	r0, 748a <CC_LibInitNoRng+0x12>
    7480:	2403      	movs	r4, #3
    7482:	f000 f867 	bl	7554 <CC_PalTerminate>
    7486:	4620      	mov	r0, r4
    7488:	bd10      	pop	{r4, pc}
    748a:	f000 f835 	bl	74f8 <CC_PalInit>
    748e:	b990      	cbnz	r0, 74b6 <CC_LibInitNoRng+0x3e>
    7490:	f000 f8b0 	bl	75f4 <CC_PalPowerSaveModeSelect>
    7494:	b990      	cbnz	r0, 74bc <CC_LibInitNoRng+0x44>
    7496:	4b0f      	ldr	r3, [pc, #60]	; (74d4 <CC_LibInitNoRng+0x5c>)
    7498:	681b      	ldr	r3, [r3, #0]
    749a:	0e1b      	lsrs	r3, r3, #24
    749c:	2bf0      	cmp	r3, #240	; 0xf0
    749e:	d108      	bne.n	74b2 <CC_LibInitNoRng+0x3a>
    74a0:	4a0d      	ldr	r2, [pc, #52]	; (74d8 <CC_LibInitNoRng+0x60>)
    74a2:	4b0e      	ldr	r3, [pc, #56]	; (74dc <CC_LibInitNoRng+0x64>)
    74a4:	6812      	ldr	r2, [r2, #0]
    74a6:	429a      	cmp	r2, r3
    74a8:	d00a      	beq.n	74c0 <CC_LibInitNoRng+0x48>
    74aa:	2407      	movs	r4, #7
    74ac:	f000 f81c 	bl	74e8 <CC_HalTerminate>
    74b0:	e7e7      	b.n	7482 <CC_LibInitNoRng+0xa>
    74b2:	2406      	movs	r4, #6
    74b4:	e7fa      	b.n	74ac <CC_LibInitNoRng+0x34>
    74b6:	2404      	movs	r4, #4
    74b8:	4620      	mov	r0, r4
    74ba:	bd10      	pop	{r4, pc}
    74bc:	2400      	movs	r4, #0
    74be:	e7f5      	b.n	74ac <CC_LibInitNoRng+0x34>
    74c0:	2001      	movs	r0, #1
    74c2:	f000 f897 	bl	75f4 <CC_PalPowerSaveModeSelect>
    74c6:	4604      	mov	r4, r0
    74c8:	2800      	cmp	r0, #0
    74ca:	d1f7      	bne.n	74bc <CC_LibInitNoRng+0x44>
    74cc:	4b04      	ldr	r3, [pc, #16]	; (74e0 <CC_LibInitNoRng+0x68>)
    74ce:	6018      	str	r0, [r3, #0]
    74d0:	e7d9      	b.n	7486 <CC_LibInitNoRng+0xe>
    74d2:	bf00      	nop
    74d4:	5002b928 	.word	0x5002b928
    74d8:	5002ba24 	.word	0x5002ba24
    74dc:	20e00000 	.word	0x20e00000
    74e0:	5002ba0c 	.word	0x5002ba0c

000074e4 <CC_HalInit>:
    74e4:	2000      	movs	r0, #0
    74e6:	4770      	bx	lr

000074e8 <CC_HalTerminate>:
    74e8:	2000      	movs	r0, #0
    74ea:	4770      	bx	lr

000074ec <CC_HalMaskInterrupt>:
    74ec:	4b01      	ldr	r3, [pc, #4]	; (74f4 <CC_HalMaskInterrupt+0x8>)
    74ee:	6018      	str	r0, [r3, #0]
    74f0:	4770      	bx	lr
    74f2:	bf00      	nop
    74f4:	5002ba04 	.word	0x5002ba04

000074f8 <CC_PalInit>:
    74f8:	b510      	push	{r4, lr}
    74fa:	4811      	ldr	r0, [pc, #68]	; (7540 <CC_PalInit+0x48>)
    74fc:	f000 f848 	bl	7590 <CC_PalMutexCreate>
    7500:	b100      	cbz	r0, 7504 <CC_PalInit+0xc>
    7502:	bd10      	pop	{r4, pc}
    7504:	480f      	ldr	r0, [pc, #60]	; (7544 <CC_PalInit+0x4c>)
    7506:	f000 f843 	bl	7590 <CC_PalMutexCreate>
    750a:	2800      	cmp	r0, #0
    750c:	d1f9      	bne.n	7502 <CC_PalInit+0xa>
    750e:	4c0e      	ldr	r4, [pc, #56]	; (7548 <CC_PalInit+0x50>)
    7510:	4620      	mov	r0, r4
    7512:	f000 f83d 	bl	7590 <CC_PalMutexCreate>
    7516:	2800      	cmp	r0, #0
    7518:	d1f3      	bne.n	7502 <CC_PalInit+0xa>
    751a:	4b0c      	ldr	r3, [pc, #48]	; (754c <CC_PalInit+0x54>)
    751c:	480c      	ldr	r0, [pc, #48]	; (7550 <CC_PalInit+0x58>)
    751e:	601c      	str	r4, [r3, #0]
    7520:	f000 f836 	bl	7590 <CC_PalMutexCreate>
    7524:	4601      	mov	r1, r0
    7526:	2800      	cmp	r0, #0
    7528:	d1eb      	bne.n	7502 <CC_PalInit+0xa>
    752a:	f000 f82d 	bl	7588 <CC_PalDmaInit>
    752e:	4604      	mov	r4, r0
    7530:	b108      	cbz	r0, 7536 <CC_PalInit+0x3e>
    7532:	4620      	mov	r0, r4
    7534:	bd10      	pop	{r4, pc}
    7536:	f000 f83f 	bl	75b8 <CC_PalPowerSaveModeInit>
    753a:	4620      	mov	r0, r4
    753c:	e7fa      	b.n	7534 <CC_PalInit+0x3c>
    753e:	bf00      	nop
    7540:	20000134 	.word	0x20000134
    7544:	20000128 	.word	0x20000128
    7548:	20000130 	.word	0x20000130
    754c:	20000138 	.word	0x20000138
    7550:	2000012c 	.word	0x2000012c

00007554 <CC_PalTerminate>:
    7554:	b508      	push	{r3, lr}
    7556:	4808      	ldr	r0, [pc, #32]	; (7578 <CC_PalTerminate+0x24>)
    7558:	f000 f824 	bl	75a4 <CC_PalMutexDestroy>
    755c:	4807      	ldr	r0, [pc, #28]	; (757c <CC_PalTerminate+0x28>)
    755e:	f000 f821 	bl	75a4 <CC_PalMutexDestroy>
    7562:	4807      	ldr	r0, [pc, #28]	; (7580 <CC_PalTerminate+0x2c>)
    7564:	f000 f81e 	bl	75a4 <CC_PalMutexDestroy>
    7568:	4806      	ldr	r0, [pc, #24]	; (7584 <CC_PalTerminate+0x30>)
    756a:	f000 f81b 	bl	75a4 <CC_PalMutexDestroy>
    756e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7572:	f000 b80b 	b.w	758c <CC_PalDmaTerminate>
    7576:	bf00      	nop
    7578:	20000134 	.word	0x20000134
    757c:	20000128 	.word	0x20000128
    7580:	20000130 	.word	0x20000130
    7584:	2000012c 	.word	0x2000012c

00007588 <CC_PalDmaInit>:
    7588:	2000      	movs	r0, #0
    758a:	4770      	bx	lr

0000758c <CC_PalDmaTerminate>:
    758c:	4770      	bx	lr
    758e:	bf00      	nop

00007590 <CC_PalMutexCreate>:
    7590:	b508      	push	{r3, lr}
    7592:	4b03      	ldr	r3, [pc, #12]	; (75a0 <CC_PalMutexCreate+0x10>)
    7594:	6802      	ldr	r2, [r0, #0]
    7596:	681b      	ldr	r3, [r3, #0]
    7598:	6810      	ldr	r0, [r2, #0]
    759a:	4798      	blx	r3
    759c:	2000      	movs	r0, #0
    759e:	bd08      	pop	{r3, pc}
    75a0:	200000ec 	.word	0x200000ec

000075a4 <CC_PalMutexDestroy>:
    75a4:	b508      	push	{r3, lr}
    75a6:	4b03      	ldr	r3, [pc, #12]	; (75b4 <CC_PalMutexDestroy+0x10>)
    75a8:	6802      	ldr	r2, [r0, #0]
    75aa:	685b      	ldr	r3, [r3, #4]
    75ac:	6810      	ldr	r0, [r2, #0]
    75ae:	4798      	blx	r3
    75b0:	2000      	movs	r0, #0
    75b2:	bd08      	pop	{r3, pc}
    75b4:	200000ec 	.word	0x200000ec

000075b8 <CC_PalPowerSaveModeInit>:
    75b8:	b570      	push	{r4, r5, r6, lr}
    75ba:	4c09      	ldr	r4, [pc, #36]	; (75e0 <CC_PalPowerSaveModeInit+0x28>)
    75bc:	4d09      	ldr	r5, [pc, #36]	; (75e4 <CC_PalPowerSaveModeInit+0x2c>)
    75be:	6920      	ldr	r0, [r4, #16]
    75c0:	68ab      	ldr	r3, [r5, #8]
    75c2:	4798      	blx	r3
    75c4:	b118      	cbz	r0, 75ce <CC_PalPowerSaveModeInit+0x16>
    75c6:	4b08      	ldr	r3, [pc, #32]	; (75e8 <CC_PalPowerSaveModeInit+0x30>)
    75c8:	4808      	ldr	r0, [pc, #32]	; (75ec <CC_PalPowerSaveModeInit+0x34>)
    75ca:	685b      	ldr	r3, [r3, #4]
    75cc:	4798      	blx	r3
    75ce:	4a08      	ldr	r2, [pc, #32]	; (75f0 <CC_PalPowerSaveModeInit+0x38>)
    75d0:	68eb      	ldr	r3, [r5, #12]
    75d2:	6920      	ldr	r0, [r4, #16]
    75d4:	2100      	movs	r1, #0
    75d6:	6011      	str	r1, [r2, #0]
    75d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    75dc:	4718      	bx	r3
    75de:	bf00      	nop
    75e0:	200000fc 	.word	0x200000fc
    75e4:	200000ec 	.word	0x200000ec
    75e8:	200000dc 	.word	0x200000dc
    75ec:	0000819c 	.word	0x0000819c
    75f0:	20000a40 	.word	0x20000a40

000075f4 <CC_PalPowerSaveModeSelect>:
    75f4:	b570      	push	{r4, r5, r6, lr}
    75f6:	4d1a      	ldr	r5, [pc, #104]	; (7660 <CC_PalPowerSaveModeSelect+0x6c>)
    75f8:	4e1a      	ldr	r6, [pc, #104]	; (7664 <CC_PalPowerSaveModeSelect+0x70>)
    75fa:	4604      	mov	r4, r0
    75fc:	68b2      	ldr	r2, [r6, #8]
    75fe:	6928      	ldr	r0, [r5, #16]
    7600:	4790      	blx	r2
    7602:	b9f0      	cbnz	r0, 7642 <CC_PalPowerSaveModeSelect+0x4e>
    7604:	b15c      	cbz	r4, 761e <CC_PalPowerSaveModeSelect+0x2a>
    7606:	4c18      	ldr	r4, [pc, #96]	; (7668 <CC_PalPowerSaveModeSelect+0x74>)
    7608:	6823      	ldr	r3, [r4, #0]
    760a:	b1ab      	cbz	r3, 7638 <CC_PalPowerSaveModeSelect+0x44>
    760c:	2b01      	cmp	r3, #1
    760e:	d01a      	beq.n	7646 <CC_PalPowerSaveModeSelect+0x52>
    7610:	3b01      	subs	r3, #1
    7612:	6023      	str	r3, [r4, #0]
    7614:	6928      	ldr	r0, [r5, #16]
    7616:	68f3      	ldr	r3, [r6, #12]
    7618:	4798      	blx	r3
    761a:	2000      	movs	r0, #0
    761c:	bd70      	pop	{r4, r5, r6, pc}
    761e:	4c12      	ldr	r4, [pc, #72]	; (7668 <CC_PalPowerSaveModeSelect+0x74>)
    7620:	6821      	ldr	r1, [r4, #0]
    7622:	b939      	cbnz	r1, 7634 <CC_PalPowerSaveModeSelect+0x40>
    7624:	4b11      	ldr	r3, [pc, #68]	; (766c <CC_PalPowerSaveModeSelect+0x78>)
    7626:	4a12      	ldr	r2, [pc, #72]	; (7670 <CC_PalPowerSaveModeSelect+0x7c>)
    7628:	2001      	movs	r0, #1
    762a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    762e:	6813      	ldr	r3, [r2, #0]
    7630:	2b00      	cmp	r3, #0
    7632:	d1fc      	bne.n	762e <CC_PalPowerSaveModeSelect+0x3a>
    7634:	3101      	adds	r1, #1
    7636:	6021      	str	r1, [r4, #0]
    7638:	68f3      	ldr	r3, [r6, #12]
    763a:	6928      	ldr	r0, [r5, #16]
    763c:	4798      	blx	r3
    763e:	2000      	movs	r0, #0
    7640:	bd70      	pop	{r4, r5, r6, pc}
    7642:	480c      	ldr	r0, [pc, #48]	; (7674 <CC_PalPowerSaveModeSelect+0x80>)
    7644:	bd70      	pop	{r4, r5, r6, pc}
    7646:	4a0a      	ldr	r2, [pc, #40]	; (7670 <CC_PalPowerSaveModeSelect+0x7c>)
    7648:	6813      	ldr	r3, [r2, #0]
    764a:	2b00      	cmp	r3, #0
    764c:	d1fc      	bne.n	7648 <CC_PalPowerSaveModeSelect+0x54>
    764e:	4a07      	ldr	r2, [pc, #28]	; (766c <CC_PalPowerSaveModeSelect+0x78>)
    7650:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    7654:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7658:	f7ff ff48 	bl	74ec <CC_HalMaskInterrupt>
    765c:	6823      	ldr	r3, [r4, #0]
    765e:	e7d7      	b.n	7610 <CC_PalPowerSaveModeSelect+0x1c>
    7660:	200000fc 	.word	0x200000fc
    7664:	200000ec 	.word	0x200000ec
    7668:	20000a40 	.word	0x20000a40
    766c:	5002a000 	.word	0x5002a000
    7670:	5002b910 	.word	0x5002b910
    7674:	ffff8fe9 	.word	0xffff8fe9

00007678 <gpio_add_callback>:
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    7678:	6883      	ldr	r3, [r0, #8]
    767a:	69db      	ldr	r3, [r3, #28]
    767c:	b10b      	cbz	r3, 7682 <gpio_add_callback+0xa>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    767e:	2201      	movs	r2, #1
    7680:	4718      	bx	r3
}
    7682:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7686:	4770      	bx	lr

00007688 <k_msleep>:
{
    7688:	b538      	push	{r3, r4, r5, lr}
    768a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    768e:	f240 34e7 	movw	r4, #999	; 0x3e7
    7692:	2500      	movs	r5, #0
    7694:	fbc1 4500 	smlal	r4, r5, r1, r0
    7698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    769c:	2300      	movs	r3, #0
    769e:	4620      	mov	r0, r4
    76a0:	4629      	mov	r1, r5
    76a2:	f7f9 f9ab 	bl	9fc <__aeabi_uldivmod>
}
    76a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    76aa:	f7fe bfe5 	b.w	6678 <z_impl_k_sleep>

000076ae <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    76ae:	4040      	eors	r0, r0
    76b0:	f380 8811 	msr	BASEPRI, r0
    76b4:	f04f 0004 	mov.w	r0, #4
    76b8:	df02      	svc	2
}
    76ba:	4770      	bx	lr

000076bc <encode_uint>:
{
    76bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76c0:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    76c2:	78d3      	ldrb	r3, [r2, #3]
{
    76c4:	4614      	mov	r4, r2
	switch (specifier) {
    76c6:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    76c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    76cc:	4606      	mov	r6, r0
    76ce:	460f      	mov	r7, r1
    76d0:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    76d2:	d02d      	beq.n	7730 <encode_uint+0x74>
    76d4:	d828      	bhi.n	7728 <encode_uint+0x6c>
		return 16;
    76d6:	2b58      	cmp	r3, #88	; 0x58
    76d8:	bf14      	ite	ne
    76da:	250a      	movne	r5, #10
    76dc:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    76de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    76e2:	46aa      	mov	sl, r5
    76e4:	f04f 0b00 	mov.w	fp, #0
    76e8:	4652      	mov	r2, sl
    76ea:	465b      	mov	r3, fp
    76ec:	4630      	mov	r0, r6
    76ee:	4639      	mov	r1, r7
    76f0:	f7f9 f984 	bl	9fc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    76f4:	2a09      	cmp	r2, #9
    76f6:	b2d3      	uxtb	r3, r2
    76f8:	d81f      	bhi.n	773a <encode_uint+0x7e>
    76fa:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    76fc:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    76fe:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    7700:	bf08      	it	eq
    7702:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7704:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    7708:	d301      	bcc.n	770e <encode_uint+0x52>
    770a:	45c8      	cmp	r8, r9
    770c:	d812      	bhi.n	7734 <encode_uint+0x78>
	if (conv->flag_hash) {
    770e:	7823      	ldrb	r3, [r4, #0]
    7710:	069b      	lsls	r3, r3, #26
    7712:	d505      	bpl.n	7720 <encode_uint+0x64>
		if (radix == 8) {
    7714:	2d08      	cmp	r5, #8
    7716:	d116      	bne.n	7746 <encode_uint+0x8a>
			conv->altform_0 = true;
    7718:	78a3      	ldrb	r3, [r4, #2]
    771a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    771e:	70a3      	strb	r3, [r4, #2]
}
    7720:	4640      	mov	r0, r8
    7722:	b003      	add	sp, #12
    7724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7728:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    772c:	2b70      	cmp	r3, #112	; 0x70
    772e:	e7d3      	b.n	76d8 <encode_uint+0x1c>
	switch (specifier) {
    7730:	2508      	movs	r5, #8
    7732:	e7d4      	b.n	76de <encode_uint+0x22>
		value /= radix;
    7734:	4606      	mov	r6, r0
    7736:	460f      	mov	r7, r1
    7738:	e7d6      	b.n	76e8 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    773a:	9a01      	ldr	r2, [sp, #4]
    773c:	2a19      	cmp	r2, #25
    773e:	bf94      	ite	ls
    7740:	3337      	addls	r3, #55	; 0x37
    7742:	3357      	addhi	r3, #87	; 0x57
    7744:	e7da      	b.n	76fc <encode_uint+0x40>
		} else if (radix == 16) {
    7746:	2d10      	cmp	r5, #16
    7748:	d1ea      	bne.n	7720 <encode_uint+0x64>
			conv->altform_0c = true;
    774a:	78a3      	ldrb	r3, [r4, #2]
    774c:	f043 0310 	orr.w	r3, r3, #16
    7750:	e7e5      	b.n	771e <encode_uint+0x62>

00007752 <outs>:
{
    7752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7756:	4607      	mov	r7, r0
    7758:	4688      	mov	r8, r1
    775a:	4615      	mov	r5, r2
    775c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    775e:	4614      	mov	r4, r2
    7760:	42b4      	cmp	r4, r6
    7762:	eba4 0005 	sub.w	r0, r4, r5
    7766:	d302      	bcc.n	776e <outs+0x1c>
    7768:	b93e      	cbnz	r6, 777a <outs+0x28>
    776a:	7823      	ldrb	r3, [r4, #0]
    776c:	b12b      	cbz	r3, 777a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    776e:	f814 0b01 	ldrb.w	r0, [r4], #1
    7772:	4641      	mov	r1, r8
    7774:	47b8      	blx	r7
		if (rc < 0) {
    7776:	2800      	cmp	r0, #0
    7778:	daf2      	bge.n	7760 <outs+0xe>
}
    777a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000777e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    777e:	4770      	bx	lr

00007780 <sys_notify_validate>:
	if (notify == NULL) {
    7780:	4603      	mov	r3, r0
    7782:	b158      	cbz	r0, 779c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7784:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7786:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    778a:	2a01      	cmp	r2, #1
    778c:	d003      	beq.n	7796 <sys_notify_validate+0x16>
    778e:	2a03      	cmp	r2, #3
    7790:	d104      	bne.n	779c <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    7792:	6802      	ldr	r2, [r0, #0]
    7794:	b112      	cbz	r2, 779c <sys_notify_validate+0x1c>
		notify->result = 0;
    7796:	2000      	movs	r0, #0
    7798:	6098      	str	r0, [r3, #8]
    779a:	4770      	bx	lr
		return -EINVAL;
    779c:	f06f 0015 	mvn.w	r0, #21
}
    77a0:	4770      	bx	lr

000077a2 <abort_function>:
{
    77a2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    77a4:	2000      	movs	r0, #0
    77a6:	f7fa fee5 	bl	2574 <sys_reboot>

000077aa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    77aa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    77ac:	f013 0307 	ands.w	r3, r3, #7
    77b0:	d105      	bne.n	77be <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    77b2:	6803      	ldr	r3, [r0, #0]
    77b4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    77b6:	bf0c      	ite	eq
    77b8:	2000      	moveq	r0, #0
    77ba:	2003      	movne	r0, #3
    77bc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    77be:	2b02      	cmp	r3, #2
    77c0:	d105      	bne.n	77ce <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    77c2:	8bc3      	ldrh	r3, [r0, #30]
    77c4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    77c6:	bf14      	ite	ne
    77c8:	2000      	movne	r0, #0
    77ca:	2004      	moveq	r0, #4
    77cc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    77ce:	2b01      	cmp	r3, #1
    77d0:	d105      	bne.n	77de <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    77d2:	6803      	ldr	r3, [r0, #0]
    77d4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    77d6:	bf0c      	ite	eq
    77d8:	2000      	moveq	r0, #0
    77da:	2005      	movne	r0, #5
    77dc:	4770      	bx	lr
	int evt = EVT_NOP;
    77de:	2000      	movs	r0, #0
}
    77e0:	4770      	bx	lr

000077e2 <notify_one>:
{
    77e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77e6:	460d      	mov	r5, r1
    77e8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    77ea:	4619      	mov	r1, r3
    77ec:	1d28      	adds	r0, r5, #4
{
    77ee:	4690      	mov	r8, r2
    77f0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    77f2:	f7fa f9af 	bl	1b54 <sys_notify_finalize>
	if (cb) {
    77f6:	4604      	mov	r4, r0
    77f8:	b138      	cbz	r0, 780a <notify_one+0x28>
		cb(mgr, cli, state, res);
    77fa:	4633      	mov	r3, r6
    77fc:	4642      	mov	r2, r8
    77fe:	4629      	mov	r1, r5
    7800:	4638      	mov	r0, r7
    7802:	46a4      	mov	ip, r4
}
    7804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7808:	4760      	bx	ip
}
    780a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000780e <validate_args>:
{
    780e:	b510      	push	{r4, lr}
    7810:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7812:	b140      	cbz	r0, 7826 <validate_args+0x18>
    7814:	b139      	cbz	r1, 7826 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    7816:	1d08      	adds	r0, r1, #4
    7818:	f7ff ffb2 	bl	7780 <sys_notify_validate>
	if ((rv == 0)
    781c:	b928      	cbnz	r0, 782a <validate_args+0x1c>
	    && ((cli->notify.flags
    781e:	68a3      	ldr	r3, [r4, #8]
    7820:	f033 0303 	bics.w	r3, r3, #3
    7824:	d001      	beq.n	782a <validate_args+0x1c>
		rv = -EINVAL;
    7826:	f06f 0015 	mvn.w	r0, #21
}
    782a:	bd10      	pop	{r4, pc}

0000782c <onoff_manager_init>:
{
    782c:	b538      	push	{r3, r4, r5, lr}
    782e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7830:	4605      	mov	r5, r0
    7832:	b158      	cbz	r0, 784c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7834:	b151      	cbz	r1, 784c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7836:	680b      	ldr	r3, [r1, #0]
    7838:	b143      	cbz	r3, 784c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    783a:	684b      	ldr	r3, [r1, #4]
    783c:	b133      	cbz	r3, 784c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    783e:	2220      	movs	r2, #32
    7840:	2100      	movs	r1, #0
    7842:	f000 f869 	bl	7918 <memset>
    7846:	612c      	str	r4, [r5, #16]
	return 0;
    7848:	2000      	movs	r0, #0
}
    784a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    784c:	f06f 0015 	mvn.w	r0, #21
    7850:	e7fb      	b.n	784a <onoff_manager_init+0x1e>

00007852 <arch_printk_char_out>:
}
    7852:	2000      	movs	r0, #0
    7854:	4770      	bx	lr

00007856 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    7856:	b40f      	push	{r0, r1, r2, r3}
    7858:	b507      	push	{r0, r1, r2, lr}
    785a:	a904      	add	r1, sp, #16
    785c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7860:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    7862:	f7fa fe79 	bl	2558 <vprintk>
	}
	va_end(ap);
}
    7866:	b003      	add	sp, #12
    7868:	f85d eb04 	ldr.w	lr, [sp], #4
    786c:	b004      	add	sp, #16
    786e:	4770      	bx	lr

00007870 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    7870:	2200      	movs	r2, #0
    7872:	e9c0 2200 	strd	r2, r2, [r0]
    7876:	6082      	str	r2, [r0, #8]
}
    7878:	4770      	bx	lr

0000787a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    787a:	4604      	mov	r4, r0
    787c:	b508      	push	{r3, lr}
    787e:	4608      	mov	r0, r1
    7880:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7882:	461a      	mov	r2, r3
    7884:	47a0      	blx	r4
	return z_impl_z_current_get();
    7886:	f7fe ff2f 	bl	66e8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    788a:	f7fb f9af 	bl	2bec <z_impl_k_thread_abort>

0000788e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    788e:	f7fd bb1d 	b.w	4ecc <z_fatal_error>

00007892 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    7892:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    7894:	6800      	ldr	r0, [r0, #0]
    7896:	f7fd bb19 	b.w	4ecc <z_fatal_error>

0000789a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    789a:	2100      	movs	r1, #0
    789c:	2001      	movs	r0, #1
    789e:	f7ff bff6 	b.w	788e <z_arm_fatal_error>

000078a2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    78a2:	b508      	push	{r3, lr}
	handler();
    78a4:	f7fa feb8 	bl	2618 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    78a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    78ac:	f7fa bfc6 	b.w	283c <z_arm_exc_exit>

000078b0 <_stdout_hook_default>:
}
    78b0:	f04f 30ff 	mov.w	r0, #4294967295
    78b4:	4770      	bx	lr

000078b6 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    78b6:	3901      	subs	r1, #1
    78b8:	4603      	mov	r3, r0
    78ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    78be:	b90a      	cbnz	r2, 78c4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    78c0:	701a      	strb	r2, [r3, #0]

	return dest;
}
    78c2:	4770      	bx	lr
		*d = *s;
    78c4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    78c8:	e7f7      	b.n	78ba <strcpy+0x4>

000078ca <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    78ca:	4603      	mov	r3, r0
	size_t n = 0;
    78cc:	2000      	movs	r0, #0

	while (*s != '\0') {
    78ce:	5c1a      	ldrb	r2, [r3, r0]
    78d0:	b902      	cbnz	r2, 78d4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    78d2:	4770      	bx	lr
		n++;
    78d4:	3001      	adds	r0, #1
    78d6:	e7fa      	b.n	78ce <strlen+0x4>

000078d8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    78d8:	4603      	mov	r3, r0
	size_t n = 0;
    78da:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    78dc:	5c1a      	ldrb	r2, [r3, r0]
    78de:	b10a      	cbz	r2, 78e4 <strnlen+0xc>
    78e0:	4288      	cmp	r0, r1
    78e2:	d100      	bne.n	78e6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    78e4:	4770      	bx	lr
		n++;
    78e6:	3001      	adds	r0, #1
    78e8:	e7f8      	b.n	78dc <strnlen+0x4>

000078ea <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    78ea:	1e43      	subs	r3, r0, #1
    78ec:	3901      	subs	r1, #1
    78ee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    78f2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    78f6:	4282      	cmp	r2, r0
    78f8:	d101      	bne.n	78fe <strcmp+0x14>
    78fa:	2a00      	cmp	r2, #0
    78fc:	d1f7      	bne.n	78ee <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    78fe:	1a10      	subs	r0, r2, r0
    7900:	4770      	bx	lr

00007902 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7902:	b510      	push	{r4, lr}
    7904:	1e43      	subs	r3, r0, #1
    7906:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7908:	4291      	cmp	r1, r2
    790a:	d100      	bne.n	790e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    790c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    790e:	f811 4b01 	ldrb.w	r4, [r1], #1
    7912:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7916:	e7f7      	b.n	7908 <memcpy+0x6>

00007918 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    7918:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    791a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    791c:	4603      	mov	r3, r0
	while (n > 0) {
    791e:	4293      	cmp	r3, r2
    7920:	d100      	bne.n	7924 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7922:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7924:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7928:	e7f9      	b.n	791e <memset+0x6>

0000792a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    792a:	b084      	sub	sp, #16
    792c:	ab04      	add	r3, sp, #16
    792e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    7932:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7936:	2b06      	cmp	r3, #6
    7938:	d108      	bne.n	794c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    793a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    793e:	2201      	movs	r2, #1
    7940:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    7944:	f3bf 8f4f 	dsb	sy
        __WFE();
    7948:	bf20      	wfe
    while (true)
    794a:	e7fd      	b.n	7948 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    794c:	b004      	add	sp, #16
    794e:	4770      	bx	lr

00007950 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    7950:	b084      	sub	sp, #16
    7952:	ab04      	add	r3, sp, #16
    7954:	e903 0007 	stmdb	r3, {r0, r1, r2}
    7958:	2300      	movs	r3, #0
    795a:	f383 8811 	msr	BASEPRI, r3
    795e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7962:	b004      	add	sp, #16
    7964:	4770      	bx	lr

00007966 <set_starting_state>:
{
    7966:	b510      	push	{r4, lr}
	__asm__ volatile(
    7968:	f04f 0320 	mov.w	r3, #32
    796c:	f3ef 8211 	mrs	r2, BASEPRI
    7970:	f383 8812 	msr	BASEPRI_MAX, r3
    7974:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7978:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    797a:	f003 0407 	and.w	r4, r3, #7
    797e:	2c01      	cmp	r4, #1
    7980:	d106      	bne.n	7990 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7982:	6001      	str	r1, [r0, #0]
	int err = 0;
    7984:	2000      	movs	r0, #0
	__asm__ volatile(
    7986:	f382 8811 	msr	BASEPRI, r2
    798a:	f3bf 8f6f 	isb	sy
}
    798e:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7990:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7994:	428b      	cmp	r3, r1
		err = -EALREADY;
    7996:	bf14      	ite	ne
    7998:	f04f 30ff 	movne.w	r0, #4294967295
    799c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    79a0:	e7f1      	b.n	7986 <set_starting_state+0x20>

000079a2 <set_on_state>:
	__asm__ volatile(
    79a2:	f04f 0320 	mov.w	r3, #32
    79a6:	f3ef 8211 	mrs	r2, BASEPRI
    79aa:	f383 8812 	msr	BASEPRI_MAX, r3
    79ae:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    79b2:	6803      	ldr	r3, [r0, #0]
    79b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    79b8:	f043 0302 	orr.w	r3, r3, #2
    79bc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    79be:	f382 8811 	msr	BASEPRI, r2
    79c2:	f3bf 8f6f 	isb	sy
}
    79c6:	4770      	bx	lr

000079c8 <onoff_started_callback>:
	return &data->mgr[type];
    79c8:	6900      	ldr	r0, [r0, #16]
    79ca:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    79cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    79d0:	2100      	movs	r1, #0
    79d2:	4710      	bx	r2

000079d4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    79d4:	2000      	movs	r0, #0
    79d6:	f7fc bbd7 	b.w	4188 <nrfx_clock_start>

000079da <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    79da:	2000      	movs	r0, #0
    79dc:	f7fc bc28 	b.w	4230 <nrfx_clock_stop>

000079e0 <api_stop>:
	return stop(dev, subsys, CTX_API);
    79e0:	2280      	movs	r2, #128	; 0x80
    79e2:	f7fb badb 	b.w	2f9c <stop>

000079e6 <blocking_start_callback>:
{
    79e6:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    79e8:	f7fe bf38 	b.w	685c <z_impl_k_sem_give>

000079ec <api_start>:
{
    79ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79f0:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    79f2:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    79f4:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    79f6:	436f      	muls	r7, r5
{
    79f8:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    79fa:	f107 0048 	add.w	r0, r7, #72	; 0x48
    79fe:	2180      	movs	r1, #128	; 0x80
    7a00:	4420      	add	r0, r4
{
    7a02:	4690      	mov	r8, r2
    7a04:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    7a06:	f7ff ffae 	bl	7966 <set_starting_state>
	if (err < 0) {
    7a0a:	2800      	cmp	r0, #0
    7a0c:	db07      	blt.n	7a1e <api_start+0x32>
	subdata->cb = cb;
    7a0e:	443c      	add	r4, r7
	subdata->user_data = user_data;
    7a10:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    7a14:	6873      	ldr	r3, [r6, #4]
    7a16:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    7a1a:	4798      	blx	r3
	return 0;
    7a1c:	2000      	movs	r0, #0
}
    7a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007a22 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7a22:	6843      	ldr	r3, [r0, #4]
    7a24:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7a26:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7a2a:	600b      	str	r3, [r1, #0]
}
    7a2c:	2000      	movs	r0, #0
    7a2e:	4770      	bx	lr

00007a30 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7a30:	6843      	ldr	r3, [r0, #4]
    7a32:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7a34:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    7a38:	4042      	eors	r2, r0
    7a3a:	400a      	ands	r2, r1
    7a3c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    7a3e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    7a42:	2000      	movs	r0, #0
    7a44:	4770      	bx	lr

00007a46 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7a46:	6843      	ldr	r3, [r0, #4]
    7a48:	685b      	ldr	r3, [r3, #4]
}
    7a4a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    7a4c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    7a50:	4770      	bx	lr

00007a52 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7a52:	6843      	ldr	r3, [r0, #4]
    7a54:	685b      	ldr	r3, [r3, #4]
}
    7a56:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7a58:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    7a5c:	4770      	bx	lr

00007a5e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7a5e:	6843      	ldr	r3, [r0, #4]
    7a60:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7a62:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    7a66:	404b      	eors	r3, r1
    p_reg->OUT = value;
    7a68:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    7a6c:	2000      	movs	r0, #0
    7a6e:	4770      	bx	lr

00007a70 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    7a70:	6843      	ldr	r3, [r0, #4]
    7a72:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    7a74:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7a78:	05d1      	lsls	r1, r2, #23
    7a7a:	d518      	bpl.n	7aae <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7a7c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    7a80:	b1aa      	cbz	r2, 7aae <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    7a82:	f04f 0120 	mov.w	r1, #32
    7a86:	f3ef 8211 	mrs	r2, BASEPRI
    7a8a:	f381 8812 	msr	BASEPRI_MAX, r1
    7a8e:	f3bf 8f6f 	isb	sy
    7a92:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7a96:	b131      	cbz	r1, 7aa6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a98:	2100      	movs	r1, #0
    7a9a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    7a9e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7aa2:	2101      	movs	r1, #1
    7aa4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    7aa6:	f382 8811 	msr	BASEPRI, r2
    7aaa:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7aae:	6842      	ldr	r2, [r0, #4]
    7ab0:	6852      	ldr	r2, [r2, #4]
    7ab2:	06d2      	lsls	r2, r2, #27
    7ab4:	d515      	bpl.n	7ae2 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    7ab6:	f04f 0120 	mov.w	r1, #32
    7aba:	f3ef 8211 	mrs	r2, BASEPRI
    7abe:	f381 8812 	msr	BASEPRI_MAX, r1
    7ac2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ac6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7aca:	b111      	cbz	r1, 7ad2 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7acc:	2100      	movs	r1, #0
    7ace:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    7ad2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7ad6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7ada:	f382 8811 	msr	BASEPRI, r2
    7ade:	f3bf 8f6f 	isb	sy
}
    7ae2:	4770      	bx	lr

00007ae4 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    7ae4:	6902      	ldr	r2, [r0, #16]
{
    7ae6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    7ae8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7aec:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7af0:	2000      	movs	r0, #0
    7af2:	4770      	bx	lr

00007af4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7af4:	6843      	ldr	r3, [r0, #4]
    7af6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7af8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7afc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7b00:	4770      	bx	lr

00007b02 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    7b02:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    7b04:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7b06:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7b0a:	b940      	cbnz	r0, 7b1e <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7b0c:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7b0e:	0792      	lsls	r2, r2, #30
    7b10:	d406      	bmi.n	7b20 <is_tx_ready+0x1e>
    7b12:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    7b16:	3800      	subs	r0, #0
    7b18:	bf18      	it	ne
    7b1a:	2001      	movne	r0, #1
    7b1c:	4770      	bx	lr
    7b1e:	2001      	movs	r0, #1
}
    7b20:	4770      	bx	lr

00007b22 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7b22:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    7b24:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7b26:	681b      	ldr	r3, [r3, #0]
    7b28:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7b2c:	b148      	cbz	r0, 7b42 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    7b2e:	7c52      	ldrb	r2, [r2, #17]
    7b30:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7b32:	2000      	movs	r0, #0
    7b34:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7b38:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b3c:	2201      	movs	r2, #1
    7b3e:	601a      	str	r2, [r3, #0]
	return 0;
    7b40:	4770      	bx	lr
		return -1;
    7b42:	f04f 30ff 	mov.w	r0, #4294967295
}
    7b46:	4770      	bx	lr

00007b48 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    7b48:	b510      	push	{r4, lr}
    7b4a:	2200      	movs	r2, #0
    7b4c:	4604      	mov	r4, r0
    7b4e:	2101      	movs	r1, #1
    7b50:	2002      	movs	r0, #2
    7b52:	f7fa fdbd 	bl	26d0 <z_arm_irq_priority_set>
    7b56:	2002      	movs	r0, #2
    7b58:	f7fa fd9c 	bl	2694 <arch_irq_enable>
    7b5c:	4620      	mov	r0, r4
    7b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b62:	f7fb bf7b 	b.w	3a5c <uarte_instance_init.isra.0>

00007b66 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    7b66:	b510      	push	{r4, lr}
    7b68:	2200      	movs	r2, #0
    7b6a:	4604      	mov	r4, r0
    7b6c:	2101      	movs	r1, #1
    7b6e:	2028      	movs	r0, #40	; 0x28
    7b70:	f7fa fdae 	bl	26d0 <z_arm_irq_priority_set>
    7b74:	2028      	movs	r0, #40	; 0x28
    7b76:	f7fa fd8d 	bl	2694 <arch_irq_enable>
    7b7a:	4620      	mov	r0, r4
    7b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b80:	f7fb bf6c 	b.w	3a5c <uarte_instance_init.isra.0>

00007b84 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7b84:	4770      	bx	lr

00007b86 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7b86:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7b88:	2000      	movs	r0, #0
    7b8a:	f7fb f99f 	bl	2ecc <sys_arch_reboot>

00007b8e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7b8e:	f7ff bb93 	b.w	72b8 <nrf_cc3xx_platform_init_no_rng>

00007b92 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7b92:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7b94:	f7f9 fffe 	bl	1b94 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7b98:	f7fa f8b0 	bl	1cfc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7b9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7ba0:	f7ff bb8a 	b.w	72b8 <nrf_cc3xx_platform_init_no_rng>

00007ba4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7ba4:	4700      	bx	r0

00007ba6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7ba6:	f000 b8d5 	b.w	7d54 <z_impl_k_busy_wait>

00007baa <nrf_gpio_pin_present_check>:
    switch (port)
    7baa:	0943      	lsrs	r3, r0, #5
    7bac:	d00b      	beq.n	7bc6 <nrf_gpio_pin_present_check+0x1c>
    7bae:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    7bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7bb4:	bf18      	it	ne
    7bb6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    7bb8:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7bbc:	fa23 f000 	lsr.w	r0, r3, r0
}
    7bc0:	f000 0001 	and.w	r0, r0, #1
    7bc4:	4770      	bx	lr
    switch (port)
    7bc6:	f04f 33ff 	mov.w	r3, #4294967295
    7bca:	e7f5      	b.n	7bb8 <nrf_gpio_pin_present_check+0xe>

00007bcc <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7bcc:	0080      	lsls	r0, r0, #2
}
    7bce:	f500 7080 	add.w	r0, r0, #256	; 0x100
    7bd2:	4770      	bx	lr

00007bd4 <nrf_gpio_reconfigure>:
{
    7bd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7bd8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7bda:	a801      	add	r0, sp, #4
{
    7bdc:	460e      	mov	r6, r1
    7bde:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    7be2:	4690      	mov	r8, r2
    7be4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7be6:	f7fc fc91 	bl	450c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7bea:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7bec:	f1b8 0f00 	cmp.w	r8, #0
    7bf0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7bf4:	bf14      	ite	ne
    7bf6:	2302      	movne	r3, #2
    7bf8:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7bfa:	2e00      	cmp	r6, #0
    7bfc:	bf18      	it	ne
    7bfe:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7c02:	2d00      	cmp	r5, #0
    7c04:	bf14      	ite	ne
    7c06:	210c      	movne	r1, #12
    7c08:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7c0a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7c0c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7c10:	bf14      	ite	ne
    7c12:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    7c16:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7c18:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7c1a:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7c1e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7c22:	bf14      	ite	ne
    7c24:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    7c28:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7c2a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    7c2c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7c30:	b106      	cbz	r6, 7c34 <nrf_gpio_reconfigure+0x60>
    7c32:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7c34:	f1b8 0f00 	cmp.w	r8, #0
    7c38:	d003      	beq.n	7c42 <nrf_gpio_reconfigure+0x6e>
    7c3a:	f898 8000 	ldrb.w	r8, [r8]
    7c3e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    7c42:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7c44:	b10d      	cbz	r5, 7c4a <nrf_gpio_reconfigure+0x76>
    7c46:	782d      	ldrb	r5, [r5, #0]
    7c48:	00ad      	lsls	r5, r5, #2
    7c4a:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7c4e:	b10c      	cbz	r4, 7c54 <nrf_gpio_reconfigure+0x80>
    7c50:	7822      	ldrb	r2, [r4, #0]
    7c52:	0214      	lsls	r4, r2, #8
    7c54:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7c56:	b10f      	cbz	r7, 7c5c <nrf_gpio_reconfigure+0x88>
    7c58:	783f      	ldrb	r7, [r7, #0]
    7c5a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7c5c:	432c      	orrs	r4, r5
    7c5e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    7c60:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7c64:	b002      	add	sp, #8
    7c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007c6a <nrf_gpio_cfg_sense_set>:
{
    7c6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7c6c:	f10d 030f 	add.w	r3, sp, #15
    7c70:	9301      	str	r3, [sp, #4]
    7c72:	2300      	movs	r3, #0
{
    7c74:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7c78:	9300      	str	r3, [sp, #0]
    7c7a:	461a      	mov	r2, r3
    7c7c:	4619      	mov	r1, r3
    7c7e:	f7ff ffa9 	bl	7bd4 <nrf_gpio_reconfigure>
}
    7c82:	b005      	add	sp, #20
    7c84:	f85d fb04 	ldr.w	pc, [sp], #4

00007c88 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7c88:	f7fd b89e 	b.w	4dc8 <_DoInit>

00007c8c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7c8c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7c8e:	f7ff fffb 	bl	7c88 <SEGGER_RTT_Init>

	return 0;
}
    7c92:	2000      	movs	r0, #0
    7c94:	bd08      	pop	{r3, pc}

00007c96 <z_device_state_init>:
}
    7c96:	4770      	bx	lr

00007c98 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7c98:	b138      	cbz	r0, 7caa <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7c9a:	68c3      	ldr	r3, [r0, #12]
    7c9c:	8818      	ldrh	r0, [r3, #0]
    7c9e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7ca2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7ca6:	4258      	negs	r0, r3
    7ca8:	4158      	adcs	r0, r3
}
    7caa:	4770      	bx	lr

00007cac <z_pm_save_idle_exit>:
{
    7cac:	b508      	push	{r3, lr}
	pm_system_resume();
    7cae:	f7fa fb81 	bl	23b4 <pm_system_resume>
}
    7cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7cb6:	f7ff bf65 	b.w	7b84 <sys_clock_idle_exit>

00007cba <k_mem_slab_init>:
{
    7cba:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7cbc:	2400      	movs	r4, #0
    7cbe:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    7cc0:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7cc2:	ea41 0402 	orr.w	r4, r1, r2
    7cc6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7cca:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    7cce:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7cd0:	d10c      	bne.n	7cec <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    7cd2:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    7cd4:	42a3      	cmp	r3, r4
    7cd6:	d103      	bne.n	7ce0 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    7cd8:	e9c0 0000 	strd	r0, r0, [r0]
}
    7cdc:	2000      	movs	r0, #0
}
    7cde:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    7ce0:	6985      	ldr	r5, [r0, #24]
    7ce2:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7ce4:	3401      	adds	r4, #1
		slab->free_list = p;
    7ce6:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    7ce8:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7cea:	e7f3      	b.n	7cd4 <k_mem_slab_init+0x1a>
		return -EINVAL;
    7cec:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7cf0:	e7f5      	b.n	7cde <k_mem_slab_init+0x24>

00007cf2 <z_impl_k_mutex_init>:
{
    7cf2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7cf4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    7cf6:	e9c3 0002 	strd	r0, r0, [r3, #8]
    7cfa:	e9c3 3300 	strd	r3, r3, [r3]
}
    7cfe:	4770      	bx	lr

00007d00 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7d00:	4603      	mov	r3, r0
    7d02:	b920      	cbnz	r0, 7d0e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7d04:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7d08:	b90a      	cbnz	r2, 7d0e <z_reschedule_irqlock+0xe>
    7d0a:	f7fa bd31 	b.w	2770 <arch_swap>
    7d0e:	f383 8811 	msr	BASEPRI, r3
    7d12:	f3bf 8f6f 	isb	sy
}
    7d16:	4770      	bx	lr

00007d18 <z_reschedule_unlocked>:
	__asm__ volatile(
    7d18:	f04f 0320 	mov.w	r3, #32
    7d1c:	f3ef 8011 	mrs	r0, BASEPRI
    7d20:	f383 8812 	msr	BASEPRI_MAX, r3
    7d24:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7d28:	f7ff bfea 	b.w	7d00 <z_reschedule_irqlock>

00007d2c <z_priq_dumb_best>:
{
    7d2c:	4603      	mov	r3, r0
	return list->head == list;
    7d2e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7d30:	4283      	cmp	r3, r0
    7d32:	d003      	beq.n	7d3c <z_priq_dumb_best+0x10>
	if (n != NULL) {
    7d34:	2800      	cmp	r0, #0
    7d36:	bf38      	it	cc
    7d38:	2000      	movcc	r0, #0
    7d3a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    7d3c:	2000      	movs	r0, #0
}
    7d3e:	4770      	bx	lr

00007d40 <k_is_in_isr>:
    7d40:	f3ef 8005 	mrs	r0, IPSR
}
    7d44:	3800      	subs	r0, #0
    7d46:	bf18      	it	ne
    7d48:	2001      	movne	r0, #1
    7d4a:	4770      	bx	lr

00007d4c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7d4c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7d4e:	f7ff fa3d 	bl	71cc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7d52:	bd08      	pop	{r3, pc}

00007d54 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7d54:	b108      	cbz	r0, 7d5a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7d56:	f7fb b8cf 	b.w	2ef8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7d5a:	4770      	bx	lr

00007d5c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7d5c:	4770      	bx	lr
	...

00007d60 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7d60:	f7fc bf4a 	b.w	4bf8 <SystemInit>
